# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class BusinessTransaction(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        BusinessTransaction - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'create_date': 'datetime',
            'modify_date': 'datetime',
            'server_name': 'str',
            'queue_name': 'str',
            'lob_id': 'int',
            'message_body': 'str',
            'status': 'str',
            'custom_fields': 'dict(str, object)'
        }

        self.attribute_map = {
            'id': 'id',
            'create_date': 'createDate',
            'modify_date': 'modifyDate',
            'server_name': 'serverName',
            'queue_name': 'queueName',
            'lob_id': 'lobId',
            'message_body': 'messageBody',
            'status': 'status',
            'custom_fields': 'customFields'
        }

        self._id = None
        self._create_date = None
        self._modify_date = None
        self._server_name = None
        self._queue_name = None
        self._lob_id = None
        self._message_body = None
        self._status = None
        self._custom_fields = None

    @property
    def id(self):
        """
        Gets the id of this BusinessTransaction.


        :return: The id of this BusinessTransaction.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BusinessTransaction.


        :param id: The id of this BusinessTransaction.
        :type: int
        """
        self._id = id

    @property
    def create_date(self):
        """
        Gets the create_date of this BusinessTransaction.


        :return: The create_date of this BusinessTransaction.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """
        Sets the create_date of this BusinessTransaction.


        :param create_date: The create_date of this BusinessTransaction.
        :type: datetime
        """
        self._create_date = create_date

    @property
    def modify_date(self):
        """
        Gets the modify_date of this BusinessTransaction.


        :return: The modify_date of this BusinessTransaction.
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """
        Sets the modify_date of this BusinessTransaction.


        :param modify_date: The modify_date of this BusinessTransaction.
        :type: datetime
        """
        self._modify_date = modify_date

    @property
    def server_name(self):
        """
        Gets the server_name of this BusinessTransaction.


        :return: The server_name of this BusinessTransaction.
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """
        Sets the server_name of this BusinessTransaction.


        :param server_name: The server_name of this BusinessTransaction.
        :type: str
        """
        self._server_name = server_name

    @property
    def queue_name(self):
        """
        Gets the queue_name of this BusinessTransaction.


        :return: The queue_name of this BusinessTransaction.
        :rtype: str
        """
        return self._queue_name

    @queue_name.setter
    def queue_name(self, queue_name):
        """
        Sets the queue_name of this BusinessTransaction.


        :param queue_name: The queue_name of this BusinessTransaction.
        :type: str
        """
        self._queue_name = queue_name

    @property
    def lob_id(self):
        """
        Gets the lob_id of this BusinessTransaction.


        :return: The lob_id of this BusinessTransaction.
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """
        Sets the lob_id of this BusinessTransaction.


        :param lob_id: The lob_id of this BusinessTransaction.
        :type: int
        """
        self._lob_id = lob_id

    @property
    def message_body(self):
        """
        Gets the message_body of this BusinessTransaction.


        :return: The message_body of this BusinessTransaction.
        :rtype: str
        """
        return self._message_body

    @message_body.setter
    def message_body(self, message_body):
        """
        Sets the message_body of this BusinessTransaction.


        :param message_body: The message_body of this BusinessTransaction.
        :type: str
        """
        self._message_body = message_body

    @property
    def status(self):
        """
        Gets the status of this BusinessTransaction.


        :return: The status of this BusinessTransaction.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this BusinessTransaction.


        :param status: The status of this BusinessTransaction.
        :type: str
        """
        self._status = status

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this BusinessTransaction.


        :return: The custom_fields of this BusinessTransaction.
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this BusinessTransaction.


        :param custom_fields: The custom_fields of this BusinessTransaction.
        :type: dict(str, object)
        """
        self._custom_fields = custom_fields

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

