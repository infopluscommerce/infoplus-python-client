# coding: utf-8

"""
    Infoplus API

    Infoplus API.  # noqa: E501

    OpenAPI spec version: v3.0
    Contact: api@infopluscommerce.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Infoplus.models.job_recipe_input import JobRecipeInput  # noqa: F401,E501
from Infoplus.models.job_recipe_output import JobRecipeOutput  # noqa: F401,E501
from Infoplus.models.job_recipe_step import JobRecipeStep  # noqa: F401,E501


class JobRecipe(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'create_date': 'datetime',
        'modify_date': 'datetime',
        'warehouse_id': 'int',
        'lob_id': 'int',
        'name': 'str',
        'assembly_instructions': 'str',
        'inputs': 'list[JobRecipeInput]',
        'outputs': 'list[JobRecipeOutput]',
        'steps': 'list[JobRecipeStep]',
        'fulfillment_plan_id': 'int',
        'layout': 'str',
        'track_assemblies': 'bool',
        'track_steps': 'bool',
        'custom_fields': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'create_date': 'createDate',
        'modify_date': 'modifyDate',
        'warehouse_id': 'warehouseId',
        'lob_id': 'lobId',
        'name': 'name',
        'assembly_instructions': 'assemblyInstructions',
        'inputs': 'inputs',
        'outputs': 'outputs',
        'steps': 'steps',
        'fulfillment_plan_id': 'fulfillmentPlanId',
        'layout': 'layout',
        'track_assemblies': 'trackAssemblies',
        'track_steps': 'trackSteps',
        'custom_fields': 'customFields'
    }

    def __init__(self, id=None, create_date=None, modify_date=None, warehouse_id=None, lob_id=None, name=None, assembly_instructions=None, inputs=None, outputs=None, steps=None, fulfillment_plan_id=None, layout=None, track_assemblies=False, track_steps=False, custom_fields=None):  # noqa: E501
        """JobRecipe - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._create_date = None
        self._modify_date = None
        self._warehouse_id = None
        self._lob_id = None
        self._name = None
        self._assembly_instructions = None
        self._inputs = None
        self._outputs = None
        self._steps = None
        self._fulfillment_plan_id = None
        self._layout = None
        self._track_assemblies = None
        self._track_steps = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if create_date is not None:
            self.create_date = create_date
        if modify_date is not None:
            self.modify_date = modify_date
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id
        self.lob_id = lob_id
        self.name = name
        if assembly_instructions is not None:
            self.assembly_instructions = assembly_instructions
        if inputs is not None:
            self.inputs = inputs
        if outputs is not None:
            self.outputs = outputs
        if steps is not None:
            self.steps = steps
        self.fulfillment_plan_id = fulfillment_plan_id
        self.layout = layout
        self.track_assemblies = track_assemblies
        self.track_steps = track_steps
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this JobRecipe.  # noqa: E501


        :return: The id of this JobRecipe.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobRecipe.


        :param id: The id of this JobRecipe.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def create_date(self):
        """Gets the create_date of this JobRecipe.  # noqa: E501


        :return: The create_date of this JobRecipe.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this JobRecipe.


        :param create_date: The create_date of this JobRecipe.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def modify_date(self):
        """Gets the modify_date of this JobRecipe.  # noqa: E501


        :return: The modify_date of this JobRecipe.  # noqa: E501
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """Sets the modify_date of this JobRecipe.


        :param modify_date: The modify_date of this JobRecipe.  # noqa: E501
        :type: datetime
        """

        self._modify_date = modify_date

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this JobRecipe.  # noqa: E501


        :return: The warehouse_id of this JobRecipe.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this JobRecipe.


        :param warehouse_id: The warehouse_id of this JobRecipe.  # noqa: E501
        :type: int
        """

        self._warehouse_id = warehouse_id

    @property
    def lob_id(self):
        """Gets the lob_id of this JobRecipe.  # noqa: E501


        :return: The lob_id of this JobRecipe.  # noqa: E501
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """Sets the lob_id of this JobRecipe.


        :param lob_id: The lob_id of this JobRecipe.  # noqa: E501
        :type: int
        """
        if lob_id is None:
            raise ValueError("Invalid value for `lob_id`, must not be `None`")  # noqa: E501

        self._lob_id = lob_id

    @property
    def name(self):
        """Gets the name of this JobRecipe.  # noqa: E501


        :return: The name of this JobRecipe.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobRecipe.


        :param name: The name of this JobRecipe.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def assembly_instructions(self):
        """Gets the assembly_instructions of this JobRecipe.  # noqa: E501


        :return: The assembly_instructions of this JobRecipe.  # noqa: E501
        :rtype: str
        """
        return self._assembly_instructions

    @assembly_instructions.setter
    def assembly_instructions(self, assembly_instructions):
        """Sets the assembly_instructions of this JobRecipe.


        :param assembly_instructions: The assembly_instructions of this JobRecipe.  # noqa: E501
        :type: str
        """

        self._assembly_instructions = assembly_instructions

    @property
    def inputs(self):
        """Gets the inputs of this JobRecipe.  # noqa: E501


        :return: The inputs of this JobRecipe.  # noqa: E501
        :rtype: list[JobRecipeInput]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this JobRecipe.


        :param inputs: The inputs of this JobRecipe.  # noqa: E501
        :type: list[JobRecipeInput]
        """

        self._inputs = inputs

    @property
    def outputs(self):
        """Gets the outputs of this JobRecipe.  # noqa: E501


        :return: The outputs of this JobRecipe.  # noqa: E501
        :rtype: list[JobRecipeOutput]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this JobRecipe.


        :param outputs: The outputs of this JobRecipe.  # noqa: E501
        :type: list[JobRecipeOutput]
        """

        self._outputs = outputs

    @property
    def steps(self):
        """Gets the steps of this JobRecipe.  # noqa: E501


        :return: The steps of this JobRecipe.  # noqa: E501
        :rtype: list[JobRecipeStep]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this JobRecipe.


        :param steps: The steps of this JobRecipe.  # noqa: E501
        :type: list[JobRecipeStep]
        """

        self._steps = steps

    @property
    def fulfillment_plan_id(self):
        """Gets the fulfillment_plan_id of this JobRecipe.  # noqa: E501


        :return: The fulfillment_plan_id of this JobRecipe.  # noqa: E501
        :rtype: int
        """
        return self._fulfillment_plan_id

    @fulfillment_plan_id.setter
    def fulfillment_plan_id(self, fulfillment_plan_id):
        """Sets the fulfillment_plan_id of this JobRecipe.


        :param fulfillment_plan_id: The fulfillment_plan_id of this JobRecipe.  # noqa: E501
        :type: int
        """
        if fulfillment_plan_id is None:
            raise ValueError("Invalid value for `fulfillment_plan_id`, must not be `None`")  # noqa: E501

        self._fulfillment_plan_id = fulfillment_plan_id

    @property
    def layout(self):
        """Gets the layout of this JobRecipe.  # noqa: E501


        :return: The layout of this JobRecipe.  # noqa: E501
        :rtype: str
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this JobRecipe.


        :param layout: The layout of this JobRecipe.  # noqa: E501
        :type: str
        """
        if layout is None:
            raise ValueError("Invalid value for `layout`, must not be `None`")  # noqa: E501

        self._layout = layout

    @property
    def track_assemblies(self):
        """Gets the track_assemblies of this JobRecipe.  # noqa: E501


        :return: The track_assemblies of this JobRecipe.  # noqa: E501
        :rtype: bool
        """
        return self._track_assemblies

    @track_assemblies.setter
    def track_assemblies(self, track_assemblies):
        """Sets the track_assemblies of this JobRecipe.


        :param track_assemblies: The track_assemblies of this JobRecipe.  # noqa: E501
        :type: bool
        """
        if track_assemblies is None:
            raise ValueError("Invalid value for `track_assemblies`, must not be `None`")  # noqa: E501

        self._track_assemblies = track_assemblies

    @property
    def track_steps(self):
        """Gets the track_steps of this JobRecipe.  # noqa: E501


        :return: The track_steps of this JobRecipe.  # noqa: E501
        :rtype: bool
        """
        return self._track_steps

    @track_steps.setter
    def track_steps(self, track_steps):
        """Sets the track_steps of this JobRecipe.


        :param track_steps: The track_steps of this JobRecipe.  # noqa: E501
        :type: bool
        """
        if track_steps is None:
            raise ValueError("Invalid value for `track_steps`, must not be `None`")  # noqa: E501

        self._track_steps = track_steps

    @property
    def custom_fields(self):
        """Gets the custom_fields of this JobRecipe.  # noqa: E501


        :return: The custom_fields of this JobRecipe.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this JobRecipe.


        :param custom_fields: The custom_fields of this JobRecipe.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobRecipe):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
