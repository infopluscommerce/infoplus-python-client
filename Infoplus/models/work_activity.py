# coding: utf-8

"""
    Infoplus API

    Infoplus API.  # noqa: E501

    OpenAPI spec version: beta
    Contact: api@infopluscommerce.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WorkActivity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'imported_record_id': 'int',
        'lob_id': 'int',
        'create_date': 'datetime',
        'modify_date': 'datetime',
        'user_id': 'int',
        'email': 'str',
        'type': 'str',
        'type_name': 'str',
        'status': 'str',
        'status_name': 'str',
        'work_batch_id': 'int',
        'work_parent_id': 'int',
        'priority_code': 'int',
        'foreign_id': 'int',
        'source_warehouse_id': 'int',
        'source_warehouse_name': 'str',
        'source_location': 'str',
        'source_building_id': 'int',
        'source_building_name': 'str',
        'source_zone_id': 'int',
        'source_zone_name': 'str',
        'source_aisle_id': 'int',
        'source_aisle_address': 'str',
        'source_origin': 'int',
        'source_origin_name': 'str',
        'source_billing_type_id': 'int',
        'source_billing_type_name': 'str',
        'source_behavior_type': 'str',
        'source_behavior_type_name': 'str',
        'source_footprint_id': 'int',
        'source_footprint_name': 'str',
        'source_footprint_height': 'int',
        'source_footprint_width': 'int',
        'source_footprint_depth': 'int',
        'source_address_scheme_id': 'int',
        'source_address_scheme_name': 'str',
        'source_level': 'int',
        'source_bay': 'int',
        'source_number': 'int',
        'source_online': 'bool',
        'source_priority_code': 'int',
        'source_cost': 'int',
        'source_allow_item_mixing': 'bool',
        'destination_warehouse_id': 'int',
        'destination_warehouse_name': 'str',
        'destination_location': 'str',
        'destination_building_id': 'int',
        'destination_building_name': 'str',
        'destination_zone_id': 'int',
        'destination_zone_name': 'str',
        'destination_aisle_id': 'int',
        'destination_aisle_address': 'str',
        'destination_origin': 'int',
        'destination_origin_name': 'str',
        'destination_billing_type_id': 'int',
        'destination_billing_type_name': 'str',
        'destination_behavior_type': 'str',
        'destination_behavior_type_name': 'str',
        'destination_footprint_id': 'int',
        'destination_footprint_name': 'str',
        'destination_footprint_height': 'int',
        'destination_footprint_width': 'int',
        'destination_footprint_depth': 'int',
        'destination_address_scheme_id': 'int',
        'destination_address_scheme_name': 'str',
        'destination_level': 'int',
        'destination_bay': 'int',
        'destination_number': 'int',
        'destination_online': 'bool',
        'destination_priority_code': 'int',
        'destination_cost': 'int',
        'destination_allow_item_mixing': 'bool',
        'work_create_date': 'datetime',
        'work_modify_date': 'datetime',
        'master_ref': 'int',
        'weight_per_wrap': 'float',
        'sku': 'str',
        'numeric_sort_order': 'int',
        'item_description': 'str',
        'additional_description': 'str',
        'unit_code': 'str',
        'wrap_code': 'str',
        'units_per_wrap': 'int',
        'quantity': 'int',
        'number_of_wraps': 'int',
        'number_of_cases': 'int',
        'pick_touches': 'int',
        'class_restriction': 'str',
        'max_cycle': 'int',
        'max_interim': 'int',
        'seasonal_item': 'str',
        'secure': 'str',
        'product_type': 'int',
        'item_status': 'str',
        'overall_lead_time': 'int',
        'overall_fixed_reorder_point': 'int',
        'quality_control_indicator': 'str',
        'lot_control_flag': 'str',
        'product_code_flag': 'str',
        'charge_code': 'str',
        'pod_rev_date': 'str',
        'pod_order_suffix': 'int',
        'serial_code': 'str',
        'asset_code': 'str',
        'backorder': 'str',
        'absolute_max': 'str',
        'account_code_id': 'int',
        'summary_code_id': 'int',
        'low_stock_contact_id': 'int',
        'legacy_low_level_contact_id': 'int',
        'low_stock_code_id': 'int',
        'major_group_id': 'int',
        'sub_group_id': 'int',
        'product_code_id': 'int',
        'buyer_id': 'int',
        'vendor_sku': 'str',
        'upc': 'str',
        'packing_slip_description': 'str',
        'commodity_code_id': 'int',
        'comp_code': 'int',
        'critical_amount': 'int',
        'list_price': 'float',
        'outside_vendor': 'int',
        'pick_no': 'str',
        'requires_production_lot': 'str',
        'sector': 'str',
        'void_date': 'datetime',
        'extrinsic_text1': 'str',
        'extrinsic_text2': 'str',
        'extrinsic_text3': 'str',
        'extrinsic_number1': 'int',
        'extrinsic_number2': 'int',
        'extrinsic_decimal1': 'float',
        'extrinsic_decimal2': 'float',
        'casebreak_enabled': 'str',
        'alcohol_type_id': 'int',
        'alcohol_type_name': 'str',
        'alcohol_content': 'float',
        'alcohol_container_id': 'int',
        'alcohol_container_name': 'str',
        'alcohol_container_volume': 'int',
        'alcohol_vintage_year': 'str',
        'alcohol_country_id': 'int',
        'alcohol_country_name': 'str',
        'alcohol_state': 'str',
        'alcohol_region': 'str',
        'alcohol_brand': 'str',
        'alcohol_upc_code': 'str',
        'alcohol_nabca_code': 'str',
        'alcohol_unimerc_code': 'str',
        'alcohol_scc_code': 'str',
        'billing_quantity': 'float',
        'charge_rate': 'float',
        'extended_charge': 'float',
        'custom_fields': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'imported_record_id': 'importedRecordId',
        'lob_id': 'lobId',
        'create_date': 'createDate',
        'modify_date': 'modifyDate',
        'user_id': 'userId',
        'email': 'email',
        'type': 'type',
        'type_name': 'typeName',
        'status': 'status',
        'status_name': 'statusName',
        'work_batch_id': 'workBatchId',
        'work_parent_id': 'workParentId',
        'priority_code': 'priorityCode',
        'foreign_id': 'foreignId',
        'source_warehouse_id': 'sourceWarehouseId',
        'source_warehouse_name': 'sourceWarehouseName',
        'source_location': 'sourceLocation',
        'source_building_id': 'sourceBuildingId',
        'source_building_name': 'sourceBuildingName',
        'source_zone_id': 'sourceZoneId',
        'source_zone_name': 'sourceZoneName',
        'source_aisle_id': 'sourceAisleId',
        'source_aisle_address': 'sourceAisleAddress',
        'source_origin': 'sourceOrigin',
        'source_origin_name': 'sourceOriginName',
        'source_billing_type_id': 'sourceBillingTypeId',
        'source_billing_type_name': 'sourceBillingTypeName',
        'source_behavior_type': 'sourceBehaviorType',
        'source_behavior_type_name': 'sourceBehaviorTypeName',
        'source_footprint_id': 'sourceFootprintId',
        'source_footprint_name': 'sourceFootprintName',
        'source_footprint_height': 'sourceFootprintHeight',
        'source_footprint_width': 'sourceFootprintWidth',
        'source_footprint_depth': 'sourceFootprintDepth',
        'source_address_scheme_id': 'sourceAddressSchemeId',
        'source_address_scheme_name': 'sourceAddressSchemeName',
        'source_level': 'sourceLevel',
        'source_bay': 'sourceBay',
        'source_number': 'sourceNumber',
        'source_online': 'sourceOnline',
        'source_priority_code': 'sourcePriorityCode',
        'source_cost': 'sourceCost',
        'source_allow_item_mixing': 'sourceAllowItemMixing',
        'destination_warehouse_id': 'destinationWarehouseId',
        'destination_warehouse_name': 'destinationWarehouseName',
        'destination_location': 'destinationLocation',
        'destination_building_id': 'destinationBuildingId',
        'destination_building_name': 'destinationBuildingName',
        'destination_zone_id': 'destinationZoneId',
        'destination_zone_name': 'destinationZoneName',
        'destination_aisle_id': 'destinationAisleId',
        'destination_aisle_address': 'destinationAisleAddress',
        'destination_origin': 'destinationOrigin',
        'destination_origin_name': 'destinationOriginName',
        'destination_billing_type_id': 'destinationBillingTypeId',
        'destination_billing_type_name': 'destinationBillingTypeName',
        'destination_behavior_type': 'destinationBehaviorType',
        'destination_behavior_type_name': 'destinationBehaviorTypeName',
        'destination_footprint_id': 'destinationFootprintId',
        'destination_footprint_name': 'destinationFootprintName',
        'destination_footprint_height': 'destinationFootprintHeight',
        'destination_footprint_width': 'destinationFootprintWidth',
        'destination_footprint_depth': 'destinationFootprintDepth',
        'destination_address_scheme_id': 'destinationAddressSchemeId',
        'destination_address_scheme_name': 'destinationAddressSchemeName',
        'destination_level': 'destinationLevel',
        'destination_bay': 'destinationBay',
        'destination_number': 'destinationNumber',
        'destination_online': 'destinationOnline',
        'destination_priority_code': 'destinationPriorityCode',
        'destination_cost': 'destinationCost',
        'destination_allow_item_mixing': 'destinationAllowItemMixing',
        'work_create_date': 'workCreateDate',
        'work_modify_date': 'workModifyDate',
        'master_ref': 'masterRef',
        'weight_per_wrap': 'weightPerWrap',
        'sku': 'sku',
        'numeric_sort_order': 'numericSortOrder',
        'item_description': 'itemDescription',
        'additional_description': 'additionalDescription',
        'unit_code': 'unitCode',
        'wrap_code': 'wrapCode',
        'units_per_wrap': 'unitsPerWrap',
        'quantity': 'quantity',
        'number_of_wraps': 'numberOfWraps',
        'number_of_cases': 'numberOfCases',
        'pick_touches': 'pickTouches',
        'class_restriction': 'classRestriction',
        'max_cycle': 'maxCycle',
        'max_interim': 'maxInterim',
        'seasonal_item': 'seasonalItem',
        'secure': 'secure',
        'product_type': 'productType',
        'item_status': 'itemStatus',
        'overall_lead_time': 'overallLeadTime',
        'overall_fixed_reorder_point': 'overallFixedReorderPoint',
        'quality_control_indicator': 'qualityControlIndicator',
        'lot_control_flag': 'lotControlFlag',
        'product_code_flag': 'productCodeFlag',
        'charge_code': 'chargeCode',
        'pod_rev_date': 'podRevDate',
        'pod_order_suffix': 'podOrderSuffix',
        'serial_code': 'serialCode',
        'asset_code': 'assetCode',
        'backorder': 'backorder',
        'absolute_max': 'absoluteMax',
        'account_code_id': 'accountCodeId',
        'summary_code_id': 'summaryCodeId',
        'low_stock_contact_id': 'lowStockContactId',
        'legacy_low_level_contact_id': 'legacyLowLevelContactId',
        'low_stock_code_id': 'lowStockCodeId',
        'major_group_id': 'majorGroupId',
        'sub_group_id': 'subGroupId',
        'product_code_id': 'productCodeId',
        'buyer_id': 'buyerId',
        'vendor_sku': 'vendorSKU',
        'upc': 'upc',
        'packing_slip_description': 'packingSlipDescription',
        'commodity_code_id': 'commodityCodeId',
        'comp_code': 'compCode',
        'critical_amount': 'criticalAmount',
        'list_price': 'listPrice',
        'outside_vendor': 'outsideVendor',
        'pick_no': 'pickNo',
        'requires_production_lot': 'requiresProductionLot',
        'sector': 'sector',
        'void_date': 'voidDate',
        'extrinsic_text1': 'extrinsicText1',
        'extrinsic_text2': 'extrinsicText2',
        'extrinsic_text3': 'extrinsicText3',
        'extrinsic_number1': 'extrinsicNumber1',
        'extrinsic_number2': 'extrinsicNumber2',
        'extrinsic_decimal1': 'extrinsicDecimal1',
        'extrinsic_decimal2': 'extrinsicDecimal2',
        'casebreak_enabled': 'casebreakEnabled',
        'alcohol_type_id': 'alcoholTypeId',
        'alcohol_type_name': 'alcoholTypeName',
        'alcohol_content': 'alcoholContent',
        'alcohol_container_id': 'alcoholContainerId',
        'alcohol_container_name': 'alcoholContainerName',
        'alcohol_container_volume': 'alcoholContainerVolume',
        'alcohol_vintage_year': 'alcoholVintageYear',
        'alcohol_country_id': 'alcoholCountryId',
        'alcohol_country_name': 'alcoholCountryName',
        'alcohol_state': 'alcoholState',
        'alcohol_region': 'alcoholRegion',
        'alcohol_brand': 'alcoholBrand',
        'alcohol_upc_code': 'alcoholUPCCode',
        'alcohol_nabca_code': 'alcoholNABCACode',
        'alcohol_unimerc_code': 'alcoholUNIMERCCode',
        'alcohol_scc_code': 'alcoholSCCCode',
        'billing_quantity': 'billingQuantity',
        'charge_rate': 'chargeRate',
        'extended_charge': 'extendedCharge',
        'custom_fields': 'customFields'
    }

    def __init__(self, id=None, imported_record_id=None, lob_id=None, create_date=None, modify_date=None, user_id=None, email=None, type=None, type_name=None, status=None, status_name=None, work_batch_id=None, work_parent_id=None, priority_code=None, foreign_id=None, source_warehouse_id=None, source_warehouse_name=None, source_location=None, source_building_id=None, source_building_name=None, source_zone_id=None, source_zone_name=None, source_aisle_id=None, source_aisle_address=None, source_origin=None, source_origin_name=None, source_billing_type_id=None, source_billing_type_name=None, source_behavior_type=None, source_behavior_type_name=None, source_footprint_id=None, source_footprint_name=None, source_footprint_height=None, source_footprint_width=None, source_footprint_depth=None, source_address_scheme_id=None, source_address_scheme_name=None, source_level=None, source_bay=None, source_number=None, source_online=False, source_priority_code=None, source_cost=None, source_allow_item_mixing=False, destination_warehouse_id=None, destination_warehouse_name=None, destination_location=None, destination_building_id=None, destination_building_name=None, destination_zone_id=None, destination_zone_name=None, destination_aisle_id=None, destination_aisle_address=None, destination_origin=None, destination_origin_name=None, destination_billing_type_id=None, destination_billing_type_name=None, destination_behavior_type=None, destination_behavior_type_name=None, destination_footprint_id=None, destination_footprint_name=None, destination_footprint_height=None, destination_footprint_width=None, destination_footprint_depth=None, destination_address_scheme_id=None, destination_address_scheme_name=None, destination_level=None, destination_bay=None, destination_number=None, destination_online=False, destination_priority_code=None, destination_cost=None, destination_allow_item_mixing=False, work_create_date=None, work_modify_date=None, master_ref=None, weight_per_wrap=None, sku=None, numeric_sort_order=None, item_description=None, additional_description=None, unit_code=None, wrap_code=None, units_per_wrap=None, quantity=None, number_of_wraps=None, number_of_cases=None, pick_touches=None, class_restriction=None, max_cycle=None, max_interim=None, seasonal_item=None, secure=None, product_type=None, item_status=None, overall_lead_time=None, overall_fixed_reorder_point=None, quality_control_indicator=None, lot_control_flag=None, product_code_flag=None, charge_code=None, pod_rev_date=None, pod_order_suffix=None, serial_code=None, asset_code=None, backorder=None, absolute_max=None, account_code_id=None, summary_code_id=None, low_stock_contact_id=None, legacy_low_level_contact_id=None, low_stock_code_id=None, major_group_id=None, sub_group_id=None, product_code_id=None, buyer_id=None, vendor_sku=None, upc=None, packing_slip_description=None, commodity_code_id=None, comp_code=None, critical_amount=None, list_price=None, outside_vendor=None, pick_no=None, requires_production_lot=None, sector=None, void_date=None, extrinsic_text1=None, extrinsic_text2=None, extrinsic_text3=None, extrinsic_number1=None, extrinsic_number2=None, extrinsic_decimal1=None, extrinsic_decimal2=None, casebreak_enabled=None, alcohol_type_id=None, alcohol_type_name=None, alcohol_content=None, alcohol_container_id=None, alcohol_container_name=None, alcohol_container_volume=None, alcohol_vintage_year=None, alcohol_country_id=None, alcohol_country_name=None, alcohol_state=None, alcohol_region=None, alcohol_brand=None, alcohol_upc_code=None, alcohol_nabca_code=None, alcohol_unimerc_code=None, alcohol_scc_code=None, billing_quantity=None, charge_rate=None, extended_charge=None, custom_fields=None):  # noqa: E501
        """WorkActivity - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._imported_record_id = None
        self._lob_id = None
        self._create_date = None
        self._modify_date = None
        self._user_id = None
        self._email = None
        self._type = None
        self._type_name = None
        self._status = None
        self._status_name = None
        self._work_batch_id = None
        self._work_parent_id = None
        self._priority_code = None
        self._foreign_id = None
        self._source_warehouse_id = None
        self._source_warehouse_name = None
        self._source_location = None
        self._source_building_id = None
        self._source_building_name = None
        self._source_zone_id = None
        self._source_zone_name = None
        self._source_aisle_id = None
        self._source_aisle_address = None
        self._source_origin = None
        self._source_origin_name = None
        self._source_billing_type_id = None
        self._source_billing_type_name = None
        self._source_behavior_type = None
        self._source_behavior_type_name = None
        self._source_footprint_id = None
        self._source_footprint_name = None
        self._source_footprint_height = None
        self._source_footprint_width = None
        self._source_footprint_depth = None
        self._source_address_scheme_id = None
        self._source_address_scheme_name = None
        self._source_level = None
        self._source_bay = None
        self._source_number = None
        self._source_online = None
        self._source_priority_code = None
        self._source_cost = None
        self._source_allow_item_mixing = None
        self._destination_warehouse_id = None
        self._destination_warehouse_name = None
        self._destination_location = None
        self._destination_building_id = None
        self._destination_building_name = None
        self._destination_zone_id = None
        self._destination_zone_name = None
        self._destination_aisle_id = None
        self._destination_aisle_address = None
        self._destination_origin = None
        self._destination_origin_name = None
        self._destination_billing_type_id = None
        self._destination_billing_type_name = None
        self._destination_behavior_type = None
        self._destination_behavior_type_name = None
        self._destination_footprint_id = None
        self._destination_footprint_name = None
        self._destination_footprint_height = None
        self._destination_footprint_width = None
        self._destination_footprint_depth = None
        self._destination_address_scheme_id = None
        self._destination_address_scheme_name = None
        self._destination_level = None
        self._destination_bay = None
        self._destination_number = None
        self._destination_online = None
        self._destination_priority_code = None
        self._destination_cost = None
        self._destination_allow_item_mixing = None
        self._work_create_date = None
        self._work_modify_date = None
        self._master_ref = None
        self._weight_per_wrap = None
        self._sku = None
        self._numeric_sort_order = None
        self._item_description = None
        self._additional_description = None
        self._unit_code = None
        self._wrap_code = None
        self._units_per_wrap = None
        self._quantity = None
        self._number_of_wraps = None
        self._number_of_cases = None
        self._pick_touches = None
        self._class_restriction = None
        self._max_cycle = None
        self._max_interim = None
        self._seasonal_item = None
        self._secure = None
        self._product_type = None
        self._item_status = None
        self._overall_lead_time = None
        self._overall_fixed_reorder_point = None
        self._quality_control_indicator = None
        self._lot_control_flag = None
        self._product_code_flag = None
        self._charge_code = None
        self._pod_rev_date = None
        self._pod_order_suffix = None
        self._serial_code = None
        self._asset_code = None
        self._backorder = None
        self._absolute_max = None
        self._account_code_id = None
        self._summary_code_id = None
        self._low_stock_contact_id = None
        self._legacy_low_level_contact_id = None
        self._low_stock_code_id = None
        self._major_group_id = None
        self._sub_group_id = None
        self._product_code_id = None
        self._buyer_id = None
        self._vendor_sku = None
        self._upc = None
        self._packing_slip_description = None
        self._commodity_code_id = None
        self._comp_code = None
        self._critical_amount = None
        self._list_price = None
        self._outside_vendor = None
        self._pick_no = None
        self._requires_production_lot = None
        self._sector = None
        self._void_date = None
        self._extrinsic_text1 = None
        self._extrinsic_text2 = None
        self._extrinsic_text3 = None
        self._extrinsic_number1 = None
        self._extrinsic_number2 = None
        self._extrinsic_decimal1 = None
        self._extrinsic_decimal2 = None
        self._casebreak_enabled = None
        self._alcohol_type_id = None
        self._alcohol_type_name = None
        self._alcohol_content = None
        self._alcohol_container_id = None
        self._alcohol_container_name = None
        self._alcohol_container_volume = None
        self._alcohol_vintage_year = None
        self._alcohol_country_id = None
        self._alcohol_country_name = None
        self._alcohol_state = None
        self._alcohol_region = None
        self._alcohol_brand = None
        self._alcohol_upc_code = None
        self._alcohol_nabca_code = None
        self._alcohol_unimerc_code = None
        self._alcohol_scc_code = None
        self._billing_quantity = None
        self._charge_rate = None
        self._extended_charge = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if imported_record_id is not None:
            self.imported_record_id = imported_record_id
        self.lob_id = lob_id
        if create_date is not None:
            self.create_date = create_date
        if modify_date is not None:
            self.modify_date = modify_date
        self.user_id = user_id
        self.email = email
        self.type = type
        self.type_name = type_name
        self.status = status
        self.status_name = status_name
        if work_batch_id is not None:
            self.work_batch_id = work_batch_id
        if work_parent_id is not None:
            self.work_parent_id = work_parent_id
        self.priority_code = priority_code
        if foreign_id is not None:
            self.foreign_id = foreign_id
        self.source_warehouse_id = source_warehouse_id
        self.source_warehouse_name = source_warehouse_name
        self.source_location = source_location
        self.source_building_id = source_building_id
        self.source_building_name = source_building_name
        if source_zone_id is not None:
            self.source_zone_id = source_zone_id
        self.source_zone_name = source_zone_name
        if source_aisle_id is not None:
            self.source_aisle_id = source_aisle_id
        self.source_aisle_address = source_aisle_address
        if source_origin is not None:
            self.source_origin = source_origin
        self.source_origin_name = source_origin_name
        self.source_billing_type_id = source_billing_type_id
        self.source_billing_type_name = source_billing_type_name
        self.source_behavior_type = source_behavior_type
        self.source_behavior_type_name = source_behavior_type_name
        self.source_footprint_id = source_footprint_id
        self.source_footprint_name = source_footprint_name
        if source_footprint_height is not None:
            self.source_footprint_height = source_footprint_height
        if source_footprint_width is not None:
            self.source_footprint_width = source_footprint_width
        if source_footprint_depth is not None:
            self.source_footprint_depth = source_footprint_depth
        if source_address_scheme_id is not None:
            self.source_address_scheme_id = source_address_scheme_id
        self.source_address_scheme_name = source_address_scheme_name
        if source_level is not None:
            self.source_level = source_level
        if source_bay is not None:
            self.source_bay = source_bay
        if source_number is not None:
            self.source_number = source_number
        self.source_online = source_online
        if source_priority_code is not None:
            self.source_priority_code = source_priority_code
        if source_cost is not None:
            self.source_cost = source_cost
        self.source_allow_item_mixing = source_allow_item_mixing
        self.destination_warehouse_id = destination_warehouse_id
        self.destination_warehouse_name = destination_warehouse_name
        self.destination_location = destination_location
        self.destination_building_id = destination_building_id
        self.destination_building_name = destination_building_name
        if destination_zone_id is not None:
            self.destination_zone_id = destination_zone_id
        self.destination_zone_name = destination_zone_name
        if destination_aisle_id is not None:
            self.destination_aisle_id = destination_aisle_id
        self.destination_aisle_address = destination_aisle_address
        if destination_origin is not None:
            self.destination_origin = destination_origin
        self.destination_origin_name = destination_origin_name
        self.destination_billing_type_id = destination_billing_type_id
        self.destination_billing_type_name = destination_billing_type_name
        self.destination_behavior_type = destination_behavior_type
        self.destination_behavior_type_name = destination_behavior_type_name
        self.destination_footprint_id = destination_footprint_id
        self.destination_footprint_name = destination_footprint_name
        if destination_footprint_height is not None:
            self.destination_footprint_height = destination_footprint_height
        if destination_footprint_width is not None:
            self.destination_footprint_width = destination_footprint_width
        if destination_footprint_depth is not None:
            self.destination_footprint_depth = destination_footprint_depth
        if destination_address_scheme_id is not None:
            self.destination_address_scheme_id = destination_address_scheme_id
        self.destination_address_scheme_name = destination_address_scheme_name
        if destination_level is not None:
            self.destination_level = destination_level
        if destination_bay is not None:
            self.destination_bay = destination_bay
        if destination_number is not None:
            self.destination_number = destination_number
        self.destination_online = destination_online
        if destination_priority_code is not None:
            self.destination_priority_code = destination_priority_code
        if destination_cost is not None:
            self.destination_cost = destination_cost
        self.destination_allow_item_mixing = destination_allow_item_mixing
        if work_create_date is not None:
            self.work_create_date = work_create_date
        if work_modify_date is not None:
            self.work_modify_date = work_modify_date
        if master_ref is not None:
            self.master_ref = master_ref
        if weight_per_wrap is not None:
            self.weight_per_wrap = weight_per_wrap
        self.sku = sku
        if numeric_sort_order is not None:
            self.numeric_sort_order = numeric_sort_order
        self.item_description = item_description
        if additional_description is not None:
            self.additional_description = additional_description
        self.unit_code = unit_code
        self.wrap_code = wrap_code
        self.units_per_wrap = units_per_wrap
        if quantity is not None:
            self.quantity = quantity
        if number_of_wraps is not None:
            self.number_of_wraps = number_of_wraps
        if number_of_cases is not None:
            self.number_of_cases = number_of_cases
        if pick_touches is not None:
            self.pick_touches = pick_touches
        self.class_restriction = class_restriction
        self.max_cycle = max_cycle
        self.max_interim = max_interim
        self.seasonal_item = seasonal_item
        self.secure = secure
        if product_type is not None:
            self.product_type = product_type
        self.item_status = item_status
        if overall_lead_time is not None:
            self.overall_lead_time = overall_lead_time
        if overall_fixed_reorder_point is not None:
            self.overall_fixed_reorder_point = overall_fixed_reorder_point
        self.quality_control_indicator = quality_control_indicator
        if lot_control_flag is not None:
            self.lot_control_flag = lot_control_flag
        self.product_code_flag = product_code_flag
        self.charge_code = charge_code
        if pod_rev_date is not None:
            self.pod_rev_date = pod_rev_date
        if pod_order_suffix is not None:
            self.pod_order_suffix = pod_order_suffix
        self.serial_code = serial_code
        if asset_code is not None:
            self.asset_code = asset_code
        self.backorder = backorder
        if absolute_max is not None:
            self.absolute_max = absolute_max
        if account_code_id is not None:
            self.account_code_id = account_code_id
        if summary_code_id is not None:
            self.summary_code_id = summary_code_id
        if low_stock_contact_id is not None:
            self.low_stock_contact_id = low_stock_contact_id
        if legacy_low_level_contact_id is not None:
            self.legacy_low_level_contact_id = legacy_low_level_contact_id
        if low_stock_code_id is not None:
            self.low_stock_code_id = low_stock_code_id
        self.major_group_id = major_group_id
        self.sub_group_id = sub_group_id
        if product_code_id is not None:
            self.product_code_id = product_code_id
        if buyer_id is not None:
            self.buyer_id = buyer_id
        if vendor_sku is not None:
            self.vendor_sku = vendor_sku
        if upc is not None:
            self.upc = upc
        if packing_slip_description is not None:
            self.packing_slip_description = packing_slip_description
        if commodity_code_id is not None:
            self.commodity_code_id = commodity_code_id
        if comp_code is not None:
            self.comp_code = comp_code
        self.critical_amount = critical_amount
        if list_price is not None:
            self.list_price = list_price
        if outside_vendor is not None:
            self.outside_vendor = outside_vendor
        if pick_no is not None:
            self.pick_no = pick_no
        if requires_production_lot is not None:
            self.requires_production_lot = requires_production_lot
        if sector is not None:
            self.sector = sector
        if void_date is not None:
            self.void_date = void_date
        if extrinsic_text1 is not None:
            self.extrinsic_text1 = extrinsic_text1
        if extrinsic_text2 is not None:
            self.extrinsic_text2 = extrinsic_text2
        if extrinsic_text3 is not None:
            self.extrinsic_text3 = extrinsic_text3
        if extrinsic_number1 is not None:
            self.extrinsic_number1 = extrinsic_number1
        if extrinsic_number2 is not None:
            self.extrinsic_number2 = extrinsic_number2
        if extrinsic_decimal1 is not None:
            self.extrinsic_decimal1 = extrinsic_decimal1
        if extrinsic_decimal2 is not None:
            self.extrinsic_decimal2 = extrinsic_decimal2
        if casebreak_enabled is not None:
            self.casebreak_enabled = casebreak_enabled
        if alcohol_type_id is not None:
            self.alcohol_type_id = alcohol_type_id
        if alcohol_type_name is not None:
            self.alcohol_type_name = alcohol_type_name
        if alcohol_content is not None:
            self.alcohol_content = alcohol_content
        if alcohol_container_id is not None:
            self.alcohol_container_id = alcohol_container_id
        if alcohol_container_name is not None:
            self.alcohol_container_name = alcohol_container_name
        if alcohol_container_volume is not None:
            self.alcohol_container_volume = alcohol_container_volume
        if alcohol_vintage_year is not None:
            self.alcohol_vintage_year = alcohol_vintage_year
        if alcohol_country_id is not None:
            self.alcohol_country_id = alcohol_country_id
        if alcohol_country_name is not None:
            self.alcohol_country_name = alcohol_country_name
        if alcohol_state is not None:
            self.alcohol_state = alcohol_state
        if alcohol_region is not None:
            self.alcohol_region = alcohol_region
        if alcohol_brand is not None:
            self.alcohol_brand = alcohol_brand
        if alcohol_upc_code is not None:
            self.alcohol_upc_code = alcohol_upc_code
        if alcohol_nabca_code is not None:
            self.alcohol_nabca_code = alcohol_nabca_code
        if alcohol_unimerc_code is not None:
            self.alcohol_unimerc_code = alcohol_unimerc_code
        if alcohol_scc_code is not None:
            self.alcohol_scc_code = alcohol_scc_code
        if billing_quantity is not None:
            self.billing_quantity = billing_quantity
        if charge_rate is not None:
            self.charge_rate = charge_rate
        if extended_charge is not None:
            self.extended_charge = extended_charge
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this WorkActivity.  # noqa: E501


        :return: The id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkActivity.


        :param id: The id of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def imported_record_id(self):
        """Gets the imported_record_id of this WorkActivity.  # noqa: E501


        :return: The imported_record_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._imported_record_id

    @imported_record_id.setter
    def imported_record_id(self, imported_record_id):
        """Sets the imported_record_id of this WorkActivity.


        :param imported_record_id: The imported_record_id of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._imported_record_id = imported_record_id

    @property
    def lob_id(self):
        """Gets the lob_id of this WorkActivity.  # noqa: E501


        :return: The lob_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """Sets the lob_id of this WorkActivity.


        :param lob_id: The lob_id of this WorkActivity.  # noqa: E501
        :type: int
        """
        if lob_id is None:
            raise ValueError("Invalid value for `lob_id`, must not be `None`")  # noqa: E501

        self._lob_id = lob_id

    @property
    def create_date(self):
        """Gets the create_date of this WorkActivity.  # noqa: E501


        :return: The create_date of this WorkActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this WorkActivity.


        :param create_date: The create_date of this WorkActivity.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def modify_date(self):
        """Gets the modify_date of this WorkActivity.  # noqa: E501


        :return: The modify_date of this WorkActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """Sets the modify_date of this WorkActivity.


        :param modify_date: The modify_date of this WorkActivity.  # noqa: E501
        :type: datetime
        """

        self._modify_date = modify_date

    @property
    def user_id(self):
        """Gets the user_id of this WorkActivity.  # noqa: E501


        :return: The user_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this WorkActivity.


        :param user_id: The user_id of this WorkActivity.  # noqa: E501
        :type: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def email(self):
        """Gets the email of this WorkActivity.  # noqa: E501


        :return: The email of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this WorkActivity.


        :param email: The email of this WorkActivity.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def type(self):
        """Gets the type of this WorkActivity.  # noqa: E501


        :return: The type of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WorkActivity.


        :param type: The type of this WorkActivity.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def type_name(self):
        """Gets the type_name of this WorkActivity.  # noqa: E501


        :return: The type_name of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this WorkActivity.


        :param type_name: The type_name of this WorkActivity.  # noqa: E501
        :type: str
        """
        if type_name is None:
            raise ValueError("Invalid value for `type_name`, must not be `None`")  # noqa: E501

        self._type_name = type_name

    @property
    def status(self):
        """Gets the status of this WorkActivity.  # noqa: E501


        :return: The status of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkActivity.


        :param status: The status of this WorkActivity.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_name(self):
        """Gets the status_name of this WorkActivity.  # noqa: E501


        :return: The status_name of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._status_name

    @status_name.setter
    def status_name(self, status_name):
        """Sets the status_name of this WorkActivity.


        :param status_name: The status_name of this WorkActivity.  # noqa: E501
        :type: str
        """
        if status_name is None:
            raise ValueError("Invalid value for `status_name`, must not be `None`")  # noqa: E501

        self._status_name = status_name

    @property
    def work_batch_id(self):
        """Gets the work_batch_id of this WorkActivity.  # noqa: E501


        :return: The work_batch_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._work_batch_id

    @work_batch_id.setter
    def work_batch_id(self, work_batch_id):
        """Sets the work_batch_id of this WorkActivity.


        :param work_batch_id: The work_batch_id of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._work_batch_id = work_batch_id

    @property
    def work_parent_id(self):
        """Gets the work_parent_id of this WorkActivity.  # noqa: E501


        :return: The work_parent_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._work_parent_id

    @work_parent_id.setter
    def work_parent_id(self, work_parent_id):
        """Sets the work_parent_id of this WorkActivity.


        :param work_parent_id: The work_parent_id of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._work_parent_id = work_parent_id

    @property
    def priority_code(self):
        """Gets the priority_code of this WorkActivity.  # noqa: E501


        :return: The priority_code of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._priority_code

    @priority_code.setter
    def priority_code(self, priority_code):
        """Sets the priority_code of this WorkActivity.


        :param priority_code: The priority_code of this WorkActivity.  # noqa: E501
        :type: int
        """
        if priority_code is None:
            raise ValueError("Invalid value for `priority_code`, must not be `None`")  # noqa: E501

        self._priority_code = priority_code

    @property
    def foreign_id(self):
        """Gets the foreign_id of this WorkActivity.  # noqa: E501


        :return: The foreign_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._foreign_id

    @foreign_id.setter
    def foreign_id(self, foreign_id):
        """Sets the foreign_id of this WorkActivity.


        :param foreign_id: The foreign_id of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._foreign_id = foreign_id

    @property
    def source_warehouse_id(self):
        """Gets the source_warehouse_id of this WorkActivity.  # noqa: E501


        :return: The source_warehouse_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._source_warehouse_id

    @source_warehouse_id.setter
    def source_warehouse_id(self, source_warehouse_id):
        """Sets the source_warehouse_id of this WorkActivity.


        :param source_warehouse_id: The source_warehouse_id of this WorkActivity.  # noqa: E501
        :type: int
        """
        if source_warehouse_id is None:
            raise ValueError("Invalid value for `source_warehouse_id`, must not be `None`")  # noqa: E501

        self._source_warehouse_id = source_warehouse_id

    @property
    def source_warehouse_name(self):
        """Gets the source_warehouse_name of this WorkActivity.  # noqa: E501


        :return: The source_warehouse_name of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._source_warehouse_name

    @source_warehouse_name.setter
    def source_warehouse_name(self, source_warehouse_name):
        """Sets the source_warehouse_name of this WorkActivity.


        :param source_warehouse_name: The source_warehouse_name of this WorkActivity.  # noqa: E501
        :type: str
        """
        if source_warehouse_name is None:
            raise ValueError("Invalid value for `source_warehouse_name`, must not be `None`")  # noqa: E501

        self._source_warehouse_name = source_warehouse_name

    @property
    def source_location(self):
        """Gets the source_location of this WorkActivity.  # noqa: E501


        :return: The source_location of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._source_location

    @source_location.setter
    def source_location(self, source_location):
        """Sets the source_location of this WorkActivity.


        :param source_location: The source_location of this WorkActivity.  # noqa: E501
        :type: str
        """
        if source_location is None:
            raise ValueError("Invalid value for `source_location`, must not be `None`")  # noqa: E501

        self._source_location = source_location

    @property
    def source_building_id(self):
        """Gets the source_building_id of this WorkActivity.  # noqa: E501


        :return: The source_building_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._source_building_id

    @source_building_id.setter
    def source_building_id(self, source_building_id):
        """Sets the source_building_id of this WorkActivity.


        :param source_building_id: The source_building_id of this WorkActivity.  # noqa: E501
        :type: int
        """
        if source_building_id is None:
            raise ValueError("Invalid value for `source_building_id`, must not be `None`")  # noqa: E501

        self._source_building_id = source_building_id

    @property
    def source_building_name(self):
        """Gets the source_building_name of this WorkActivity.  # noqa: E501


        :return: The source_building_name of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._source_building_name

    @source_building_name.setter
    def source_building_name(self, source_building_name):
        """Sets the source_building_name of this WorkActivity.


        :param source_building_name: The source_building_name of this WorkActivity.  # noqa: E501
        :type: str
        """
        if source_building_name is None:
            raise ValueError("Invalid value for `source_building_name`, must not be `None`")  # noqa: E501

        self._source_building_name = source_building_name

    @property
    def source_zone_id(self):
        """Gets the source_zone_id of this WorkActivity.  # noqa: E501


        :return: The source_zone_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._source_zone_id

    @source_zone_id.setter
    def source_zone_id(self, source_zone_id):
        """Sets the source_zone_id of this WorkActivity.


        :param source_zone_id: The source_zone_id of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._source_zone_id = source_zone_id

    @property
    def source_zone_name(self):
        """Gets the source_zone_name of this WorkActivity.  # noqa: E501


        :return: The source_zone_name of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._source_zone_name

    @source_zone_name.setter
    def source_zone_name(self, source_zone_name):
        """Sets the source_zone_name of this WorkActivity.


        :param source_zone_name: The source_zone_name of this WorkActivity.  # noqa: E501
        :type: str
        """
        if source_zone_name is None:
            raise ValueError("Invalid value for `source_zone_name`, must not be `None`")  # noqa: E501

        self._source_zone_name = source_zone_name

    @property
    def source_aisle_id(self):
        """Gets the source_aisle_id of this WorkActivity.  # noqa: E501


        :return: The source_aisle_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._source_aisle_id

    @source_aisle_id.setter
    def source_aisle_id(self, source_aisle_id):
        """Sets the source_aisle_id of this WorkActivity.


        :param source_aisle_id: The source_aisle_id of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._source_aisle_id = source_aisle_id

    @property
    def source_aisle_address(self):
        """Gets the source_aisle_address of this WorkActivity.  # noqa: E501


        :return: The source_aisle_address of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._source_aisle_address

    @source_aisle_address.setter
    def source_aisle_address(self, source_aisle_address):
        """Sets the source_aisle_address of this WorkActivity.


        :param source_aisle_address: The source_aisle_address of this WorkActivity.  # noqa: E501
        :type: str
        """
        if source_aisle_address is None:
            raise ValueError("Invalid value for `source_aisle_address`, must not be `None`")  # noqa: E501

        self._source_aisle_address = source_aisle_address

    @property
    def source_origin(self):
        """Gets the source_origin of this WorkActivity.  # noqa: E501


        :return: The source_origin of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._source_origin

    @source_origin.setter
    def source_origin(self, source_origin):
        """Sets the source_origin of this WorkActivity.


        :param source_origin: The source_origin of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._source_origin = source_origin

    @property
    def source_origin_name(self):
        """Gets the source_origin_name of this WorkActivity.  # noqa: E501


        :return: The source_origin_name of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._source_origin_name

    @source_origin_name.setter
    def source_origin_name(self, source_origin_name):
        """Sets the source_origin_name of this WorkActivity.


        :param source_origin_name: The source_origin_name of this WorkActivity.  # noqa: E501
        :type: str
        """
        if source_origin_name is None:
            raise ValueError("Invalid value for `source_origin_name`, must not be `None`")  # noqa: E501

        self._source_origin_name = source_origin_name

    @property
    def source_billing_type_id(self):
        """Gets the source_billing_type_id of this WorkActivity.  # noqa: E501


        :return: The source_billing_type_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._source_billing_type_id

    @source_billing_type_id.setter
    def source_billing_type_id(self, source_billing_type_id):
        """Sets the source_billing_type_id of this WorkActivity.


        :param source_billing_type_id: The source_billing_type_id of this WorkActivity.  # noqa: E501
        :type: int
        """
        if source_billing_type_id is None:
            raise ValueError("Invalid value for `source_billing_type_id`, must not be `None`")  # noqa: E501

        self._source_billing_type_id = source_billing_type_id

    @property
    def source_billing_type_name(self):
        """Gets the source_billing_type_name of this WorkActivity.  # noqa: E501


        :return: The source_billing_type_name of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._source_billing_type_name

    @source_billing_type_name.setter
    def source_billing_type_name(self, source_billing_type_name):
        """Sets the source_billing_type_name of this WorkActivity.


        :param source_billing_type_name: The source_billing_type_name of this WorkActivity.  # noqa: E501
        :type: str
        """
        if source_billing_type_name is None:
            raise ValueError("Invalid value for `source_billing_type_name`, must not be `None`")  # noqa: E501

        self._source_billing_type_name = source_billing_type_name

    @property
    def source_behavior_type(self):
        """Gets the source_behavior_type of this WorkActivity.  # noqa: E501


        :return: The source_behavior_type of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._source_behavior_type

    @source_behavior_type.setter
    def source_behavior_type(self, source_behavior_type):
        """Sets the source_behavior_type of this WorkActivity.


        :param source_behavior_type: The source_behavior_type of this WorkActivity.  # noqa: E501
        :type: str
        """
        if source_behavior_type is None:
            raise ValueError("Invalid value for `source_behavior_type`, must not be `None`")  # noqa: E501

        self._source_behavior_type = source_behavior_type

    @property
    def source_behavior_type_name(self):
        """Gets the source_behavior_type_name of this WorkActivity.  # noqa: E501


        :return: The source_behavior_type_name of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._source_behavior_type_name

    @source_behavior_type_name.setter
    def source_behavior_type_name(self, source_behavior_type_name):
        """Sets the source_behavior_type_name of this WorkActivity.


        :param source_behavior_type_name: The source_behavior_type_name of this WorkActivity.  # noqa: E501
        :type: str
        """
        if source_behavior_type_name is None:
            raise ValueError("Invalid value for `source_behavior_type_name`, must not be `None`")  # noqa: E501

        self._source_behavior_type_name = source_behavior_type_name

    @property
    def source_footprint_id(self):
        """Gets the source_footprint_id of this WorkActivity.  # noqa: E501


        :return: The source_footprint_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._source_footprint_id

    @source_footprint_id.setter
    def source_footprint_id(self, source_footprint_id):
        """Sets the source_footprint_id of this WorkActivity.


        :param source_footprint_id: The source_footprint_id of this WorkActivity.  # noqa: E501
        :type: int
        """
        if source_footprint_id is None:
            raise ValueError("Invalid value for `source_footprint_id`, must not be `None`")  # noqa: E501

        self._source_footprint_id = source_footprint_id

    @property
    def source_footprint_name(self):
        """Gets the source_footprint_name of this WorkActivity.  # noqa: E501


        :return: The source_footprint_name of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._source_footprint_name

    @source_footprint_name.setter
    def source_footprint_name(self, source_footprint_name):
        """Sets the source_footprint_name of this WorkActivity.


        :param source_footprint_name: The source_footprint_name of this WorkActivity.  # noqa: E501
        :type: str
        """
        if source_footprint_name is None:
            raise ValueError("Invalid value for `source_footprint_name`, must not be `None`")  # noqa: E501

        self._source_footprint_name = source_footprint_name

    @property
    def source_footprint_height(self):
        """Gets the source_footprint_height of this WorkActivity.  # noqa: E501


        :return: The source_footprint_height of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._source_footprint_height

    @source_footprint_height.setter
    def source_footprint_height(self, source_footprint_height):
        """Sets the source_footprint_height of this WorkActivity.


        :param source_footprint_height: The source_footprint_height of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._source_footprint_height = source_footprint_height

    @property
    def source_footprint_width(self):
        """Gets the source_footprint_width of this WorkActivity.  # noqa: E501


        :return: The source_footprint_width of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._source_footprint_width

    @source_footprint_width.setter
    def source_footprint_width(self, source_footprint_width):
        """Sets the source_footprint_width of this WorkActivity.


        :param source_footprint_width: The source_footprint_width of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._source_footprint_width = source_footprint_width

    @property
    def source_footprint_depth(self):
        """Gets the source_footprint_depth of this WorkActivity.  # noqa: E501


        :return: The source_footprint_depth of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._source_footprint_depth

    @source_footprint_depth.setter
    def source_footprint_depth(self, source_footprint_depth):
        """Sets the source_footprint_depth of this WorkActivity.


        :param source_footprint_depth: The source_footprint_depth of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._source_footprint_depth = source_footprint_depth

    @property
    def source_address_scheme_id(self):
        """Gets the source_address_scheme_id of this WorkActivity.  # noqa: E501


        :return: The source_address_scheme_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._source_address_scheme_id

    @source_address_scheme_id.setter
    def source_address_scheme_id(self, source_address_scheme_id):
        """Sets the source_address_scheme_id of this WorkActivity.


        :param source_address_scheme_id: The source_address_scheme_id of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._source_address_scheme_id = source_address_scheme_id

    @property
    def source_address_scheme_name(self):
        """Gets the source_address_scheme_name of this WorkActivity.  # noqa: E501


        :return: The source_address_scheme_name of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._source_address_scheme_name

    @source_address_scheme_name.setter
    def source_address_scheme_name(self, source_address_scheme_name):
        """Sets the source_address_scheme_name of this WorkActivity.


        :param source_address_scheme_name: The source_address_scheme_name of this WorkActivity.  # noqa: E501
        :type: str
        """
        if source_address_scheme_name is None:
            raise ValueError("Invalid value for `source_address_scheme_name`, must not be `None`")  # noqa: E501

        self._source_address_scheme_name = source_address_scheme_name

    @property
    def source_level(self):
        """Gets the source_level of this WorkActivity.  # noqa: E501


        :return: The source_level of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._source_level

    @source_level.setter
    def source_level(self, source_level):
        """Sets the source_level of this WorkActivity.


        :param source_level: The source_level of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._source_level = source_level

    @property
    def source_bay(self):
        """Gets the source_bay of this WorkActivity.  # noqa: E501


        :return: The source_bay of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._source_bay

    @source_bay.setter
    def source_bay(self, source_bay):
        """Sets the source_bay of this WorkActivity.


        :param source_bay: The source_bay of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._source_bay = source_bay

    @property
    def source_number(self):
        """Gets the source_number of this WorkActivity.  # noqa: E501


        :return: The source_number of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._source_number

    @source_number.setter
    def source_number(self, source_number):
        """Sets the source_number of this WorkActivity.


        :param source_number: The source_number of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._source_number = source_number

    @property
    def source_online(self):
        """Gets the source_online of this WorkActivity.  # noqa: E501


        :return: The source_online of this WorkActivity.  # noqa: E501
        :rtype: bool
        """
        return self._source_online

    @source_online.setter
    def source_online(self, source_online):
        """Sets the source_online of this WorkActivity.


        :param source_online: The source_online of this WorkActivity.  # noqa: E501
        :type: bool
        """
        if source_online is None:
            raise ValueError("Invalid value for `source_online`, must not be `None`")  # noqa: E501

        self._source_online = source_online

    @property
    def source_priority_code(self):
        """Gets the source_priority_code of this WorkActivity.  # noqa: E501


        :return: The source_priority_code of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._source_priority_code

    @source_priority_code.setter
    def source_priority_code(self, source_priority_code):
        """Sets the source_priority_code of this WorkActivity.


        :param source_priority_code: The source_priority_code of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._source_priority_code = source_priority_code

    @property
    def source_cost(self):
        """Gets the source_cost of this WorkActivity.  # noqa: E501


        :return: The source_cost of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._source_cost

    @source_cost.setter
    def source_cost(self, source_cost):
        """Sets the source_cost of this WorkActivity.


        :param source_cost: The source_cost of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._source_cost = source_cost

    @property
    def source_allow_item_mixing(self):
        """Gets the source_allow_item_mixing of this WorkActivity.  # noqa: E501


        :return: The source_allow_item_mixing of this WorkActivity.  # noqa: E501
        :rtype: bool
        """
        return self._source_allow_item_mixing

    @source_allow_item_mixing.setter
    def source_allow_item_mixing(self, source_allow_item_mixing):
        """Sets the source_allow_item_mixing of this WorkActivity.


        :param source_allow_item_mixing: The source_allow_item_mixing of this WorkActivity.  # noqa: E501
        :type: bool
        """
        if source_allow_item_mixing is None:
            raise ValueError("Invalid value for `source_allow_item_mixing`, must not be `None`")  # noqa: E501

        self._source_allow_item_mixing = source_allow_item_mixing

    @property
    def destination_warehouse_id(self):
        """Gets the destination_warehouse_id of this WorkActivity.  # noqa: E501


        :return: The destination_warehouse_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._destination_warehouse_id

    @destination_warehouse_id.setter
    def destination_warehouse_id(self, destination_warehouse_id):
        """Sets the destination_warehouse_id of this WorkActivity.


        :param destination_warehouse_id: The destination_warehouse_id of this WorkActivity.  # noqa: E501
        :type: int
        """
        if destination_warehouse_id is None:
            raise ValueError("Invalid value for `destination_warehouse_id`, must not be `None`")  # noqa: E501

        self._destination_warehouse_id = destination_warehouse_id

    @property
    def destination_warehouse_name(self):
        """Gets the destination_warehouse_name of this WorkActivity.  # noqa: E501


        :return: The destination_warehouse_name of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._destination_warehouse_name

    @destination_warehouse_name.setter
    def destination_warehouse_name(self, destination_warehouse_name):
        """Sets the destination_warehouse_name of this WorkActivity.


        :param destination_warehouse_name: The destination_warehouse_name of this WorkActivity.  # noqa: E501
        :type: str
        """
        if destination_warehouse_name is None:
            raise ValueError("Invalid value for `destination_warehouse_name`, must not be `None`")  # noqa: E501

        self._destination_warehouse_name = destination_warehouse_name

    @property
    def destination_location(self):
        """Gets the destination_location of this WorkActivity.  # noqa: E501


        :return: The destination_location of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._destination_location

    @destination_location.setter
    def destination_location(self, destination_location):
        """Sets the destination_location of this WorkActivity.


        :param destination_location: The destination_location of this WorkActivity.  # noqa: E501
        :type: str
        """
        if destination_location is None:
            raise ValueError("Invalid value for `destination_location`, must not be `None`")  # noqa: E501

        self._destination_location = destination_location

    @property
    def destination_building_id(self):
        """Gets the destination_building_id of this WorkActivity.  # noqa: E501


        :return: The destination_building_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._destination_building_id

    @destination_building_id.setter
    def destination_building_id(self, destination_building_id):
        """Sets the destination_building_id of this WorkActivity.


        :param destination_building_id: The destination_building_id of this WorkActivity.  # noqa: E501
        :type: int
        """
        if destination_building_id is None:
            raise ValueError("Invalid value for `destination_building_id`, must not be `None`")  # noqa: E501

        self._destination_building_id = destination_building_id

    @property
    def destination_building_name(self):
        """Gets the destination_building_name of this WorkActivity.  # noqa: E501


        :return: The destination_building_name of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._destination_building_name

    @destination_building_name.setter
    def destination_building_name(self, destination_building_name):
        """Sets the destination_building_name of this WorkActivity.


        :param destination_building_name: The destination_building_name of this WorkActivity.  # noqa: E501
        :type: str
        """
        if destination_building_name is None:
            raise ValueError("Invalid value for `destination_building_name`, must not be `None`")  # noqa: E501

        self._destination_building_name = destination_building_name

    @property
    def destination_zone_id(self):
        """Gets the destination_zone_id of this WorkActivity.  # noqa: E501


        :return: The destination_zone_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._destination_zone_id

    @destination_zone_id.setter
    def destination_zone_id(self, destination_zone_id):
        """Sets the destination_zone_id of this WorkActivity.


        :param destination_zone_id: The destination_zone_id of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._destination_zone_id = destination_zone_id

    @property
    def destination_zone_name(self):
        """Gets the destination_zone_name of this WorkActivity.  # noqa: E501


        :return: The destination_zone_name of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._destination_zone_name

    @destination_zone_name.setter
    def destination_zone_name(self, destination_zone_name):
        """Sets the destination_zone_name of this WorkActivity.


        :param destination_zone_name: The destination_zone_name of this WorkActivity.  # noqa: E501
        :type: str
        """
        if destination_zone_name is None:
            raise ValueError("Invalid value for `destination_zone_name`, must not be `None`")  # noqa: E501

        self._destination_zone_name = destination_zone_name

    @property
    def destination_aisle_id(self):
        """Gets the destination_aisle_id of this WorkActivity.  # noqa: E501


        :return: The destination_aisle_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._destination_aisle_id

    @destination_aisle_id.setter
    def destination_aisle_id(self, destination_aisle_id):
        """Sets the destination_aisle_id of this WorkActivity.


        :param destination_aisle_id: The destination_aisle_id of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._destination_aisle_id = destination_aisle_id

    @property
    def destination_aisle_address(self):
        """Gets the destination_aisle_address of this WorkActivity.  # noqa: E501


        :return: The destination_aisle_address of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._destination_aisle_address

    @destination_aisle_address.setter
    def destination_aisle_address(self, destination_aisle_address):
        """Sets the destination_aisle_address of this WorkActivity.


        :param destination_aisle_address: The destination_aisle_address of this WorkActivity.  # noqa: E501
        :type: str
        """
        if destination_aisle_address is None:
            raise ValueError("Invalid value for `destination_aisle_address`, must not be `None`")  # noqa: E501

        self._destination_aisle_address = destination_aisle_address

    @property
    def destination_origin(self):
        """Gets the destination_origin of this WorkActivity.  # noqa: E501


        :return: The destination_origin of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._destination_origin

    @destination_origin.setter
    def destination_origin(self, destination_origin):
        """Sets the destination_origin of this WorkActivity.


        :param destination_origin: The destination_origin of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._destination_origin = destination_origin

    @property
    def destination_origin_name(self):
        """Gets the destination_origin_name of this WorkActivity.  # noqa: E501


        :return: The destination_origin_name of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._destination_origin_name

    @destination_origin_name.setter
    def destination_origin_name(self, destination_origin_name):
        """Sets the destination_origin_name of this WorkActivity.


        :param destination_origin_name: The destination_origin_name of this WorkActivity.  # noqa: E501
        :type: str
        """
        if destination_origin_name is None:
            raise ValueError("Invalid value for `destination_origin_name`, must not be `None`")  # noqa: E501

        self._destination_origin_name = destination_origin_name

    @property
    def destination_billing_type_id(self):
        """Gets the destination_billing_type_id of this WorkActivity.  # noqa: E501


        :return: The destination_billing_type_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._destination_billing_type_id

    @destination_billing_type_id.setter
    def destination_billing_type_id(self, destination_billing_type_id):
        """Sets the destination_billing_type_id of this WorkActivity.


        :param destination_billing_type_id: The destination_billing_type_id of this WorkActivity.  # noqa: E501
        :type: int
        """
        if destination_billing_type_id is None:
            raise ValueError("Invalid value for `destination_billing_type_id`, must not be `None`")  # noqa: E501

        self._destination_billing_type_id = destination_billing_type_id

    @property
    def destination_billing_type_name(self):
        """Gets the destination_billing_type_name of this WorkActivity.  # noqa: E501


        :return: The destination_billing_type_name of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._destination_billing_type_name

    @destination_billing_type_name.setter
    def destination_billing_type_name(self, destination_billing_type_name):
        """Sets the destination_billing_type_name of this WorkActivity.


        :param destination_billing_type_name: The destination_billing_type_name of this WorkActivity.  # noqa: E501
        :type: str
        """
        if destination_billing_type_name is None:
            raise ValueError("Invalid value for `destination_billing_type_name`, must not be `None`")  # noqa: E501

        self._destination_billing_type_name = destination_billing_type_name

    @property
    def destination_behavior_type(self):
        """Gets the destination_behavior_type of this WorkActivity.  # noqa: E501


        :return: The destination_behavior_type of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._destination_behavior_type

    @destination_behavior_type.setter
    def destination_behavior_type(self, destination_behavior_type):
        """Sets the destination_behavior_type of this WorkActivity.


        :param destination_behavior_type: The destination_behavior_type of this WorkActivity.  # noqa: E501
        :type: str
        """
        if destination_behavior_type is None:
            raise ValueError("Invalid value for `destination_behavior_type`, must not be `None`")  # noqa: E501

        self._destination_behavior_type = destination_behavior_type

    @property
    def destination_behavior_type_name(self):
        """Gets the destination_behavior_type_name of this WorkActivity.  # noqa: E501


        :return: The destination_behavior_type_name of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._destination_behavior_type_name

    @destination_behavior_type_name.setter
    def destination_behavior_type_name(self, destination_behavior_type_name):
        """Sets the destination_behavior_type_name of this WorkActivity.


        :param destination_behavior_type_name: The destination_behavior_type_name of this WorkActivity.  # noqa: E501
        :type: str
        """
        if destination_behavior_type_name is None:
            raise ValueError("Invalid value for `destination_behavior_type_name`, must not be `None`")  # noqa: E501

        self._destination_behavior_type_name = destination_behavior_type_name

    @property
    def destination_footprint_id(self):
        """Gets the destination_footprint_id of this WorkActivity.  # noqa: E501


        :return: The destination_footprint_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._destination_footprint_id

    @destination_footprint_id.setter
    def destination_footprint_id(self, destination_footprint_id):
        """Sets the destination_footprint_id of this WorkActivity.


        :param destination_footprint_id: The destination_footprint_id of this WorkActivity.  # noqa: E501
        :type: int
        """
        if destination_footprint_id is None:
            raise ValueError("Invalid value for `destination_footprint_id`, must not be `None`")  # noqa: E501

        self._destination_footprint_id = destination_footprint_id

    @property
    def destination_footprint_name(self):
        """Gets the destination_footprint_name of this WorkActivity.  # noqa: E501


        :return: The destination_footprint_name of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._destination_footprint_name

    @destination_footprint_name.setter
    def destination_footprint_name(self, destination_footprint_name):
        """Sets the destination_footprint_name of this WorkActivity.


        :param destination_footprint_name: The destination_footprint_name of this WorkActivity.  # noqa: E501
        :type: str
        """
        if destination_footprint_name is None:
            raise ValueError("Invalid value for `destination_footprint_name`, must not be `None`")  # noqa: E501

        self._destination_footprint_name = destination_footprint_name

    @property
    def destination_footprint_height(self):
        """Gets the destination_footprint_height of this WorkActivity.  # noqa: E501


        :return: The destination_footprint_height of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._destination_footprint_height

    @destination_footprint_height.setter
    def destination_footprint_height(self, destination_footprint_height):
        """Sets the destination_footprint_height of this WorkActivity.


        :param destination_footprint_height: The destination_footprint_height of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._destination_footprint_height = destination_footprint_height

    @property
    def destination_footprint_width(self):
        """Gets the destination_footprint_width of this WorkActivity.  # noqa: E501


        :return: The destination_footprint_width of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._destination_footprint_width

    @destination_footprint_width.setter
    def destination_footprint_width(self, destination_footprint_width):
        """Sets the destination_footprint_width of this WorkActivity.


        :param destination_footprint_width: The destination_footprint_width of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._destination_footprint_width = destination_footprint_width

    @property
    def destination_footprint_depth(self):
        """Gets the destination_footprint_depth of this WorkActivity.  # noqa: E501


        :return: The destination_footprint_depth of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._destination_footprint_depth

    @destination_footprint_depth.setter
    def destination_footprint_depth(self, destination_footprint_depth):
        """Sets the destination_footprint_depth of this WorkActivity.


        :param destination_footprint_depth: The destination_footprint_depth of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._destination_footprint_depth = destination_footprint_depth

    @property
    def destination_address_scheme_id(self):
        """Gets the destination_address_scheme_id of this WorkActivity.  # noqa: E501


        :return: The destination_address_scheme_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._destination_address_scheme_id

    @destination_address_scheme_id.setter
    def destination_address_scheme_id(self, destination_address_scheme_id):
        """Sets the destination_address_scheme_id of this WorkActivity.


        :param destination_address_scheme_id: The destination_address_scheme_id of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._destination_address_scheme_id = destination_address_scheme_id

    @property
    def destination_address_scheme_name(self):
        """Gets the destination_address_scheme_name of this WorkActivity.  # noqa: E501


        :return: The destination_address_scheme_name of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._destination_address_scheme_name

    @destination_address_scheme_name.setter
    def destination_address_scheme_name(self, destination_address_scheme_name):
        """Sets the destination_address_scheme_name of this WorkActivity.


        :param destination_address_scheme_name: The destination_address_scheme_name of this WorkActivity.  # noqa: E501
        :type: str
        """
        if destination_address_scheme_name is None:
            raise ValueError("Invalid value for `destination_address_scheme_name`, must not be `None`")  # noqa: E501

        self._destination_address_scheme_name = destination_address_scheme_name

    @property
    def destination_level(self):
        """Gets the destination_level of this WorkActivity.  # noqa: E501


        :return: The destination_level of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._destination_level

    @destination_level.setter
    def destination_level(self, destination_level):
        """Sets the destination_level of this WorkActivity.


        :param destination_level: The destination_level of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._destination_level = destination_level

    @property
    def destination_bay(self):
        """Gets the destination_bay of this WorkActivity.  # noqa: E501


        :return: The destination_bay of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._destination_bay

    @destination_bay.setter
    def destination_bay(self, destination_bay):
        """Sets the destination_bay of this WorkActivity.


        :param destination_bay: The destination_bay of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._destination_bay = destination_bay

    @property
    def destination_number(self):
        """Gets the destination_number of this WorkActivity.  # noqa: E501


        :return: The destination_number of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._destination_number

    @destination_number.setter
    def destination_number(self, destination_number):
        """Sets the destination_number of this WorkActivity.


        :param destination_number: The destination_number of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._destination_number = destination_number

    @property
    def destination_online(self):
        """Gets the destination_online of this WorkActivity.  # noqa: E501


        :return: The destination_online of this WorkActivity.  # noqa: E501
        :rtype: bool
        """
        return self._destination_online

    @destination_online.setter
    def destination_online(self, destination_online):
        """Sets the destination_online of this WorkActivity.


        :param destination_online: The destination_online of this WorkActivity.  # noqa: E501
        :type: bool
        """
        if destination_online is None:
            raise ValueError("Invalid value for `destination_online`, must not be `None`")  # noqa: E501

        self._destination_online = destination_online

    @property
    def destination_priority_code(self):
        """Gets the destination_priority_code of this WorkActivity.  # noqa: E501


        :return: The destination_priority_code of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._destination_priority_code

    @destination_priority_code.setter
    def destination_priority_code(self, destination_priority_code):
        """Sets the destination_priority_code of this WorkActivity.


        :param destination_priority_code: The destination_priority_code of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._destination_priority_code = destination_priority_code

    @property
    def destination_cost(self):
        """Gets the destination_cost of this WorkActivity.  # noqa: E501


        :return: The destination_cost of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._destination_cost

    @destination_cost.setter
    def destination_cost(self, destination_cost):
        """Sets the destination_cost of this WorkActivity.


        :param destination_cost: The destination_cost of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._destination_cost = destination_cost

    @property
    def destination_allow_item_mixing(self):
        """Gets the destination_allow_item_mixing of this WorkActivity.  # noqa: E501


        :return: The destination_allow_item_mixing of this WorkActivity.  # noqa: E501
        :rtype: bool
        """
        return self._destination_allow_item_mixing

    @destination_allow_item_mixing.setter
    def destination_allow_item_mixing(self, destination_allow_item_mixing):
        """Sets the destination_allow_item_mixing of this WorkActivity.


        :param destination_allow_item_mixing: The destination_allow_item_mixing of this WorkActivity.  # noqa: E501
        :type: bool
        """
        if destination_allow_item_mixing is None:
            raise ValueError("Invalid value for `destination_allow_item_mixing`, must not be `None`")  # noqa: E501

        self._destination_allow_item_mixing = destination_allow_item_mixing

    @property
    def work_create_date(self):
        """Gets the work_create_date of this WorkActivity.  # noqa: E501


        :return: The work_create_date of this WorkActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._work_create_date

    @work_create_date.setter
    def work_create_date(self, work_create_date):
        """Sets the work_create_date of this WorkActivity.


        :param work_create_date: The work_create_date of this WorkActivity.  # noqa: E501
        :type: datetime
        """

        self._work_create_date = work_create_date

    @property
    def work_modify_date(self):
        """Gets the work_modify_date of this WorkActivity.  # noqa: E501


        :return: The work_modify_date of this WorkActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._work_modify_date

    @work_modify_date.setter
    def work_modify_date(self, work_modify_date):
        """Sets the work_modify_date of this WorkActivity.


        :param work_modify_date: The work_modify_date of this WorkActivity.  # noqa: E501
        :type: datetime
        """

        self._work_modify_date = work_modify_date

    @property
    def master_ref(self):
        """Gets the master_ref of this WorkActivity.  # noqa: E501


        :return: The master_ref of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._master_ref

    @master_ref.setter
    def master_ref(self, master_ref):
        """Sets the master_ref of this WorkActivity.


        :param master_ref: The master_ref of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._master_ref = master_ref

    @property
    def weight_per_wrap(self):
        """Gets the weight_per_wrap of this WorkActivity.  # noqa: E501


        :return: The weight_per_wrap of this WorkActivity.  # noqa: E501
        :rtype: float
        """
        return self._weight_per_wrap

    @weight_per_wrap.setter
    def weight_per_wrap(self, weight_per_wrap):
        """Sets the weight_per_wrap of this WorkActivity.


        :param weight_per_wrap: The weight_per_wrap of this WorkActivity.  # noqa: E501
        :type: float
        """

        self._weight_per_wrap = weight_per_wrap

    @property
    def sku(self):
        """Gets the sku of this WorkActivity.  # noqa: E501


        :return: The sku of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this WorkActivity.


        :param sku: The sku of this WorkActivity.  # noqa: E501
        :type: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")  # noqa: E501

        self._sku = sku

    @property
    def numeric_sort_order(self):
        """Gets the numeric_sort_order of this WorkActivity.  # noqa: E501


        :return: The numeric_sort_order of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._numeric_sort_order

    @numeric_sort_order.setter
    def numeric_sort_order(self, numeric_sort_order):
        """Sets the numeric_sort_order of this WorkActivity.


        :param numeric_sort_order: The numeric_sort_order of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._numeric_sort_order = numeric_sort_order

    @property
    def item_description(self):
        """Gets the item_description of this WorkActivity.  # noqa: E501


        :return: The item_description of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._item_description

    @item_description.setter
    def item_description(self, item_description):
        """Sets the item_description of this WorkActivity.


        :param item_description: The item_description of this WorkActivity.  # noqa: E501
        :type: str
        """
        if item_description is None:
            raise ValueError("Invalid value for `item_description`, must not be `None`")  # noqa: E501

        self._item_description = item_description

    @property
    def additional_description(self):
        """Gets the additional_description of this WorkActivity.  # noqa: E501


        :return: The additional_description of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._additional_description

    @additional_description.setter
    def additional_description(self, additional_description):
        """Sets the additional_description of this WorkActivity.


        :param additional_description: The additional_description of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._additional_description = additional_description

    @property
    def unit_code(self):
        """Gets the unit_code of this WorkActivity.  # noqa: E501


        :return: The unit_code of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._unit_code

    @unit_code.setter
    def unit_code(self, unit_code):
        """Sets the unit_code of this WorkActivity.


        :param unit_code: The unit_code of this WorkActivity.  # noqa: E501
        :type: str
        """
        if unit_code is None:
            raise ValueError("Invalid value for `unit_code`, must not be `None`")  # noqa: E501

        self._unit_code = unit_code

    @property
    def wrap_code(self):
        """Gets the wrap_code of this WorkActivity.  # noqa: E501


        :return: The wrap_code of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._wrap_code

    @wrap_code.setter
    def wrap_code(self, wrap_code):
        """Sets the wrap_code of this WorkActivity.


        :param wrap_code: The wrap_code of this WorkActivity.  # noqa: E501
        :type: str
        """
        if wrap_code is None:
            raise ValueError("Invalid value for `wrap_code`, must not be `None`")  # noqa: E501

        self._wrap_code = wrap_code

    @property
    def units_per_wrap(self):
        """Gets the units_per_wrap of this WorkActivity.  # noqa: E501


        :return: The units_per_wrap of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._units_per_wrap

    @units_per_wrap.setter
    def units_per_wrap(self, units_per_wrap):
        """Sets the units_per_wrap of this WorkActivity.


        :param units_per_wrap: The units_per_wrap of this WorkActivity.  # noqa: E501
        :type: int
        """
        if units_per_wrap is None:
            raise ValueError("Invalid value for `units_per_wrap`, must not be `None`")  # noqa: E501

        self._units_per_wrap = units_per_wrap

    @property
    def quantity(self):
        """Gets the quantity of this WorkActivity.  # noqa: E501


        :return: The quantity of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this WorkActivity.


        :param quantity: The quantity of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def number_of_wraps(self):
        """Gets the number_of_wraps of this WorkActivity.  # noqa: E501


        :return: The number_of_wraps of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._number_of_wraps

    @number_of_wraps.setter
    def number_of_wraps(self, number_of_wraps):
        """Sets the number_of_wraps of this WorkActivity.


        :param number_of_wraps: The number_of_wraps of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._number_of_wraps = number_of_wraps

    @property
    def number_of_cases(self):
        """Gets the number_of_cases of this WorkActivity.  # noqa: E501


        :return: The number_of_cases of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._number_of_cases

    @number_of_cases.setter
    def number_of_cases(self, number_of_cases):
        """Sets the number_of_cases of this WorkActivity.


        :param number_of_cases: The number_of_cases of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._number_of_cases = number_of_cases

    @property
    def pick_touches(self):
        """Gets the pick_touches of this WorkActivity.  # noqa: E501


        :return: The pick_touches of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._pick_touches

    @pick_touches.setter
    def pick_touches(self, pick_touches):
        """Sets the pick_touches of this WorkActivity.


        :param pick_touches: The pick_touches of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._pick_touches = pick_touches

    @property
    def class_restriction(self):
        """Gets the class_restriction of this WorkActivity.  # noqa: E501


        :return: The class_restriction of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._class_restriction

    @class_restriction.setter
    def class_restriction(self, class_restriction):
        """Sets the class_restriction of this WorkActivity.


        :param class_restriction: The class_restriction of this WorkActivity.  # noqa: E501
        :type: str
        """
        if class_restriction is None:
            raise ValueError("Invalid value for `class_restriction`, must not be `None`")  # noqa: E501

        self._class_restriction = class_restriction

    @property
    def max_cycle(self):
        """Gets the max_cycle of this WorkActivity.  # noqa: E501


        :return: The max_cycle of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._max_cycle

    @max_cycle.setter
    def max_cycle(self, max_cycle):
        """Sets the max_cycle of this WorkActivity.


        :param max_cycle: The max_cycle of this WorkActivity.  # noqa: E501
        :type: int
        """
        if max_cycle is None:
            raise ValueError("Invalid value for `max_cycle`, must not be `None`")  # noqa: E501

        self._max_cycle = max_cycle

    @property
    def max_interim(self):
        """Gets the max_interim of this WorkActivity.  # noqa: E501


        :return: The max_interim of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._max_interim

    @max_interim.setter
    def max_interim(self, max_interim):
        """Sets the max_interim of this WorkActivity.


        :param max_interim: The max_interim of this WorkActivity.  # noqa: E501
        :type: int
        """
        if max_interim is None:
            raise ValueError("Invalid value for `max_interim`, must not be `None`")  # noqa: E501

        self._max_interim = max_interim

    @property
    def seasonal_item(self):
        """Gets the seasonal_item of this WorkActivity.  # noqa: E501


        :return: The seasonal_item of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._seasonal_item

    @seasonal_item.setter
    def seasonal_item(self, seasonal_item):
        """Sets the seasonal_item of this WorkActivity.


        :param seasonal_item: The seasonal_item of this WorkActivity.  # noqa: E501
        :type: str
        """
        if seasonal_item is None:
            raise ValueError("Invalid value for `seasonal_item`, must not be `None`")  # noqa: E501

        self._seasonal_item = seasonal_item

    @property
    def secure(self):
        """Gets the secure of this WorkActivity.  # noqa: E501


        :return: The secure of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._secure

    @secure.setter
    def secure(self, secure):
        """Sets the secure of this WorkActivity.


        :param secure: The secure of this WorkActivity.  # noqa: E501
        :type: str
        """
        if secure is None:
            raise ValueError("Invalid value for `secure`, must not be `None`")  # noqa: E501

        self._secure = secure

    @property
    def product_type(self):
        """Gets the product_type of this WorkActivity.  # noqa: E501


        :return: The product_type of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this WorkActivity.


        :param product_type: The product_type of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._product_type = product_type

    @property
    def item_status(self):
        """Gets the item_status of this WorkActivity.  # noqa: E501


        :return: The item_status of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._item_status

    @item_status.setter
    def item_status(self, item_status):
        """Sets the item_status of this WorkActivity.


        :param item_status: The item_status of this WorkActivity.  # noqa: E501
        :type: str
        """
        if item_status is None:
            raise ValueError("Invalid value for `item_status`, must not be `None`")  # noqa: E501

        self._item_status = item_status

    @property
    def overall_lead_time(self):
        """Gets the overall_lead_time of this WorkActivity.  # noqa: E501


        :return: The overall_lead_time of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._overall_lead_time

    @overall_lead_time.setter
    def overall_lead_time(self, overall_lead_time):
        """Sets the overall_lead_time of this WorkActivity.


        :param overall_lead_time: The overall_lead_time of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._overall_lead_time = overall_lead_time

    @property
    def overall_fixed_reorder_point(self):
        """Gets the overall_fixed_reorder_point of this WorkActivity.  # noqa: E501


        :return: The overall_fixed_reorder_point of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._overall_fixed_reorder_point

    @overall_fixed_reorder_point.setter
    def overall_fixed_reorder_point(self, overall_fixed_reorder_point):
        """Sets the overall_fixed_reorder_point of this WorkActivity.


        :param overall_fixed_reorder_point: The overall_fixed_reorder_point of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._overall_fixed_reorder_point = overall_fixed_reorder_point

    @property
    def quality_control_indicator(self):
        """Gets the quality_control_indicator of this WorkActivity.  # noqa: E501


        :return: The quality_control_indicator of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._quality_control_indicator

    @quality_control_indicator.setter
    def quality_control_indicator(self, quality_control_indicator):
        """Sets the quality_control_indicator of this WorkActivity.


        :param quality_control_indicator: The quality_control_indicator of this WorkActivity.  # noqa: E501
        :type: str
        """
        if quality_control_indicator is None:
            raise ValueError("Invalid value for `quality_control_indicator`, must not be `None`")  # noqa: E501

        self._quality_control_indicator = quality_control_indicator

    @property
    def lot_control_flag(self):
        """Gets the lot_control_flag of this WorkActivity.  # noqa: E501


        :return: The lot_control_flag of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._lot_control_flag

    @lot_control_flag.setter
    def lot_control_flag(self, lot_control_flag):
        """Sets the lot_control_flag of this WorkActivity.


        :param lot_control_flag: The lot_control_flag of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._lot_control_flag = lot_control_flag

    @property
    def product_code_flag(self):
        """Gets the product_code_flag of this WorkActivity.  # noqa: E501


        :return: The product_code_flag of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._product_code_flag

    @product_code_flag.setter
    def product_code_flag(self, product_code_flag):
        """Sets the product_code_flag of this WorkActivity.


        :param product_code_flag: The product_code_flag of this WorkActivity.  # noqa: E501
        :type: str
        """
        if product_code_flag is None:
            raise ValueError("Invalid value for `product_code_flag`, must not be `None`")  # noqa: E501

        self._product_code_flag = product_code_flag

    @property
    def charge_code(self):
        """Gets the charge_code of this WorkActivity.  # noqa: E501


        :return: The charge_code of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._charge_code

    @charge_code.setter
    def charge_code(self, charge_code):
        """Sets the charge_code of this WorkActivity.


        :param charge_code: The charge_code of this WorkActivity.  # noqa: E501
        :type: str
        """
        if charge_code is None:
            raise ValueError("Invalid value for `charge_code`, must not be `None`")  # noqa: E501

        self._charge_code = charge_code

    @property
    def pod_rev_date(self):
        """Gets the pod_rev_date of this WorkActivity.  # noqa: E501


        :return: The pod_rev_date of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._pod_rev_date

    @pod_rev_date.setter
    def pod_rev_date(self, pod_rev_date):
        """Sets the pod_rev_date of this WorkActivity.


        :param pod_rev_date: The pod_rev_date of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._pod_rev_date = pod_rev_date

    @property
    def pod_order_suffix(self):
        """Gets the pod_order_suffix of this WorkActivity.  # noqa: E501


        :return: The pod_order_suffix of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._pod_order_suffix

    @pod_order_suffix.setter
    def pod_order_suffix(self, pod_order_suffix):
        """Sets the pod_order_suffix of this WorkActivity.


        :param pod_order_suffix: The pod_order_suffix of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._pod_order_suffix = pod_order_suffix

    @property
    def serial_code(self):
        """Gets the serial_code of this WorkActivity.  # noqa: E501


        :return: The serial_code of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._serial_code

    @serial_code.setter
    def serial_code(self, serial_code):
        """Sets the serial_code of this WorkActivity.


        :param serial_code: The serial_code of this WorkActivity.  # noqa: E501
        :type: str
        """
        if serial_code is None:
            raise ValueError("Invalid value for `serial_code`, must not be `None`")  # noqa: E501

        self._serial_code = serial_code

    @property
    def asset_code(self):
        """Gets the asset_code of this WorkActivity.  # noqa: E501


        :return: The asset_code of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._asset_code

    @asset_code.setter
    def asset_code(self, asset_code):
        """Sets the asset_code of this WorkActivity.


        :param asset_code: The asset_code of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._asset_code = asset_code

    @property
    def backorder(self):
        """Gets the backorder of this WorkActivity.  # noqa: E501


        :return: The backorder of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._backorder

    @backorder.setter
    def backorder(self, backorder):
        """Sets the backorder of this WorkActivity.


        :param backorder: The backorder of this WorkActivity.  # noqa: E501
        :type: str
        """
        if backorder is None:
            raise ValueError("Invalid value for `backorder`, must not be `None`")  # noqa: E501

        self._backorder = backorder

    @property
    def absolute_max(self):
        """Gets the absolute_max of this WorkActivity.  # noqa: E501


        :return: The absolute_max of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._absolute_max

    @absolute_max.setter
    def absolute_max(self, absolute_max):
        """Sets the absolute_max of this WorkActivity.


        :param absolute_max: The absolute_max of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._absolute_max = absolute_max

    @property
    def account_code_id(self):
        """Gets the account_code_id of this WorkActivity.  # noqa: E501


        :return: The account_code_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._account_code_id

    @account_code_id.setter
    def account_code_id(self, account_code_id):
        """Sets the account_code_id of this WorkActivity.


        :param account_code_id: The account_code_id of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._account_code_id = account_code_id

    @property
    def summary_code_id(self):
        """Gets the summary_code_id of this WorkActivity.  # noqa: E501


        :return: The summary_code_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._summary_code_id

    @summary_code_id.setter
    def summary_code_id(self, summary_code_id):
        """Sets the summary_code_id of this WorkActivity.


        :param summary_code_id: The summary_code_id of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._summary_code_id = summary_code_id

    @property
    def low_stock_contact_id(self):
        """Gets the low_stock_contact_id of this WorkActivity.  # noqa: E501


        :return: The low_stock_contact_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._low_stock_contact_id

    @low_stock_contact_id.setter
    def low_stock_contact_id(self, low_stock_contact_id):
        """Sets the low_stock_contact_id of this WorkActivity.


        :param low_stock_contact_id: The low_stock_contact_id of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._low_stock_contact_id = low_stock_contact_id

    @property
    def legacy_low_level_contact_id(self):
        """Gets the legacy_low_level_contact_id of this WorkActivity.  # noqa: E501


        :return: The legacy_low_level_contact_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._legacy_low_level_contact_id

    @legacy_low_level_contact_id.setter
    def legacy_low_level_contact_id(self, legacy_low_level_contact_id):
        """Sets the legacy_low_level_contact_id of this WorkActivity.


        :param legacy_low_level_contact_id: The legacy_low_level_contact_id of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._legacy_low_level_contact_id = legacy_low_level_contact_id

    @property
    def low_stock_code_id(self):
        """Gets the low_stock_code_id of this WorkActivity.  # noqa: E501


        :return: The low_stock_code_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._low_stock_code_id

    @low_stock_code_id.setter
    def low_stock_code_id(self, low_stock_code_id):
        """Sets the low_stock_code_id of this WorkActivity.


        :param low_stock_code_id: The low_stock_code_id of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._low_stock_code_id = low_stock_code_id

    @property
    def major_group_id(self):
        """Gets the major_group_id of this WorkActivity.  # noqa: E501


        :return: The major_group_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._major_group_id

    @major_group_id.setter
    def major_group_id(self, major_group_id):
        """Sets the major_group_id of this WorkActivity.


        :param major_group_id: The major_group_id of this WorkActivity.  # noqa: E501
        :type: int
        """
        if major_group_id is None:
            raise ValueError("Invalid value for `major_group_id`, must not be `None`")  # noqa: E501

        self._major_group_id = major_group_id

    @property
    def sub_group_id(self):
        """Gets the sub_group_id of this WorkActivity.  # noqa: E501


        :return: The sub_group_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._sub_group_id

    @sub_group_id.setter
    def sub_group_id(self, sub_group_id):
        """Sets the sub_group_id of this WorkActivity.


        :param sub_group_id: The sub_group_id of this WorkActivity.  # noqa: E501
        :type: int
        """
        if sub_group_id is None:
            raise ValueError("Invalid value for `sub_group_id`, must not be `None`")  # noqa: E501

        self._sub_group_id = sub_group_id

    @property
    def product_code_id(self):
        """Gets the product_code_id of this WorkActivity.  # noqa: E501


        :return: The product_code_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._product_code_id

    @product_code_id.setter
    def product_code_id(self, product_code_id):
        """Sets the product_code_id of this WorkActivity.


        :param product_code_id: The product_code_id of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._product_code_id = product_code_id

    @property
    def buyer_id(self):
        """Gets the buyer_id of this WorkActivity.  # noqa: E501


        :return: The buyer_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._buyer_id

    @buyer_id.setter
    def buyer_id(self, buyer_id):
        """Sets the buyer_id of this WorkActivity.


        :param buyer_id: The buyer_id of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._buyer_id = buyer_id

    @property
    def vendor_sku(self):
        """Gets the vendor_sku of this WorkActivity.  # noqa: E501


        :return: The vendor_sku of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._vendor_sku

    @vendor_sku.setter
    def vendor_sku(self, vendor_sku):
        """Sets the vendor_sku of this WorkActivity.


        :param vendor_sku: The vendor_sku of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._vendor_sku = vendor_sku

    @property
    def upc(self):
        """Gets the upc of this WorkActivity.  # noqa: E501


        :return: The upc of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._upc

    @upc.setter
    def upc(self, upc):
        """Sets the upc of this WorkActivity.


        :param upc: The upc of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._upc = upc

    @property
    def packing_slip_description(self):
        """Gets the packing_slip_description of this WorkActivity.  # noqa: E501


        :return: The packing_slip_description of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._packing_slip_description

    @packing_slip_description.setter
    def packing_slip_description(self, packing_slip_description):
        """Sets the packing_slip_description of this WorkActivity.


        :param packing_slip_description: The packing_slip_description of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._packing_slip_description = packing_slip_description

    @property
    def commodity_code_id(self):
        """Gets the commodity_code_id of this WorkActivity.  # noqa: E501


        :return: The commodity_code_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._commodity_code_id

    @commodity_code_id.setter
    def commodity_code_id(self, commodity_code_id):
        """Sets the commodity_code_id of this WorkActivity.


        :param commodity_code_id: The commodity_code_id of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._commodity_code_id = commodity_code_id

    @property
    def comp_code(self):
        """Gets the comp_code of this WorkActivity.  # noqa: E501


        :return: The comp_code of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._comp_code

    @comp_code.setter
    def comp_code(self, comp_code):
        """Sets the comp_code of this WorkActivity.


        :param comp_code: The comp_code of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._comp_code = comp_code

    @property
    def critical_amount(self):
        """Gets the critical_amount of this WorkActivity.  # noqa: E501


        :return: The critical_amount of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._critical_amount

    @critical_amount.setter
    def critical_amount(self, critical_amount):
        """Sets the critical_amount of this WorkActivity.


        :param critical_amount: The critical_amount of this WorkActivity.  # noqa: E501
        :type: int
        """
        if critical_amount is None:
            raise ValueError("Invalid value for `critical_amount`, must not be `None`")  # noqa: E501

        self._critical_amount = critical_amount

    @property
    def list_price(self):
        """Gets the list_price of this WorkActivity.  # noqa: E501


        :return: The list_price of this WorkActivity.  # noqa: E501
        :rtype: float
        """
        return self._list_price

    @list_price.setter
    def list_price(self, list_price):
        """Sets the list_price of this WorkActivity.


        :param list_price: The list_price of this WorkActivity.  # noqa: E501
        :type: float
        """

        self._list_price = list_price

    @property
    def outside_vendor(self):
        """Gets the outside_vendor of this WorkActivity.  # noqa: E501


        :return: The outside_vendor of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._outside_vendor

    @outside_vendor.setter
    def outside_vendor(self, outside_vendor):
        """Sets the outside_vendor of this WorkActivity.


        :param outside_vendor: The outside_vendor of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._outside_vendor = outside_vendor

    @property
    def pick_no(self):
        """Gets the pick_no of this WorkActivity.  # noqa: E501


        :return: The pick_no of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._pick_no

    @pick_no.setter
    def pick_no(self, pick_no):
        """Sets the pick_no of this WorkActivity.


        :param pick_no: The pick_no of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._pick_no = pick_no

    @property
    def requires_production_lot(self):
        """Gets the requires_production_lot of this WorkActivity.  # noqa: E501


        :return: The requires_production_lot of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._requires_production_lot

    @requires_production_lot.setter
    def requires_production_lot(self, requires_production_lot):
        """Sets the requires_production_lot of this WorkActivity.


        :param requires_production_lot: The requires_production_lot of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._requires_production_lot = requires_production_lot

    @property
    def sector(self):
        """Gets the sector of this WorkActivity.  # noqa: E501


        :return: The sector of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """Sets the sector of this WorkActivity.


        :param sector: The sector of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._sector = sector

    @property
    def void_date(self):
        """Gets the void_date of this WorkActivity.  # noqa: E501


        :return: The void_date of this WorkActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._void_date

    @void_date.setter
    def void_date(self, void_date):
        """Sets the void_date of this WorkActivity.


        :param void_date: The void_date of this WorkActivity.  # noqa: E501
        :type: datetime
        """

        self._void_date = void_date

    @property
    def extrinsic_text1(self):
        """Gets the extrinsic_text1 of this WorkActivity.  # noqa: E501


        :return: The extrinsic_text1 of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._extrinsic_text1

    @extrinsic_text1.setter
    def extrinsic_text1(self, extrinsic_text1):
        """Sets the extrinsic_text1 of this WorkActivity.


        :param extrinsic_text1: The extrinsic_text1 of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._extrinsic_text1 = extrinsic_text1

    @property
    def extrinsic_text2(self):
        """Gets the extrinsic_text2 of this WorkActivity.  # noqa: E501


        :return: The extrinsic_text2 of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._extrinsic_text2

    @extrinsic_text2.setter
    def extrinsic_text2(self, extrinsic_text2):
        """Sets the extrinsic_text2 of this WorkActivity.


        :param extrinsic_text2: The extrinsic_text2 of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._extrinsic_text2 = extrinsic_text2

    @property
    def extrinsic_text3(self):
        """Gets the extrinsic_text3 of this WorkActivity.  # noqa: E501


        :return: The extrinsic_text3 of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._extrinsic_text3

    @extrinsic_text3.setter
    def extrinsic_text3(self, extrinsic_text3):
        """Sets the extrinsic_text3 of this WorkActivity.


        :param extrinsic_text3: The extrinsic_text3 of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._extrinsic_text3 = extrinsic_text3

    @property
    def extrinsic_number1(self):
        """Gets the extrinsic_number1 of this WorkActivity.  # noqa: E501


        :return: The extrinsic_number1 of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._extrinsic_number1

    @extrinsic_number1.setter
    def extrinsic_number1(self, extrinsic_number1):
        """Sets the extrinsic_number1 of this WorkActivity.


        :param extrinsic_number1: The extrinsic_number1 of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._extrinsic_number1 = extrinsic_number1

    @property
    def extrinsic_number2(self):
        """Gets the extrinsic_number2 of this WorkActivity.  # noqa: E501


        :return: The extrinsic_number2 of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._extrinsic_number2

    @extrinsic_number2.setter
    def extrinsic_number2(self, extrinsic_number2):
        """Sets the extrinsic_number2 of this WorkActivity.


        :param extrinsic_number2: The extrinsic_number2 of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._extrinsic_number2 = extrinsic_number2

    @property
    def extrinsic_decimal1(self):
        """Gets the extrinsic_decimal1 of this WorkActivity.  # noqa: E501


        :return: The extrinsic_decimal1 of this WorkActivity.  # noqa: E501
        :rtype: float
        """
        return self._extrinsic_decimal1

    @extrinsic_decimal1.setter
    def extrinsic_decimal1(self, extrinsic_decimal1):
        """Sets the extrinsic_decimal1 of this WorkActivity.


        :param extrinsic_decimal1: The extrinsic_decimal1 of this WorkActivity.  # noqa: E501
        :type: float
        """

        self._extrinsic_decimal1 = extrinsic_decimal1

    @property
    def extrinsic_decimal2(self):
        """Gets the extrinsic_decimal2 of this WorkActivity.  # noqa: E501


        :return: The extrinsic_decimal2 of this WorkActivity.  # noqa: E501
        :rtype: float
        """
        return self._extrinsic_decimal2

    @extrinsic_decimal2.setter
    def extrinsic_decimal2(self, extrinsic_decimal2):
        """Sets the extrinsic_decimal2 of this WorkActivity.


        :param extrinsic_decimal2: The extrinsic_decimal2 of this WorkActivity.  # noqa: E501
        :type: float
        """

        self._extrinsic_decimal2 = extrinsic_decimal2

    @property
    def casebreak_enabled(self):
        """Gets the casebreak_enabled of this WorkActivity.  # noqa: E501


        :return: The casebreak_enabled of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._casebreak_enabled

    @casebreak_enabled.setter
    def casebreak_enabled(self, casebreak_enabled):
        """Sets the casebreak_enabled of this WorkActivity.


        :param casebreak_enabled: The casebreak_enabled of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._casebreak_enabled = casebreak_enabled

    @property
    def alcohol_type_id(self):
        """Gets the alcohol_type_id of this WorkActivity.  # noqa: E501


        :return: The alcohol_type_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._alcohol_type_id

    @alcohol_type_id.setter
    def alcohol_type_id(self, alcohol_type_id):
        """Sets the alcohol_type_id of this WorkActivity.


        :param alcohol_type_id: The alcohol_type_id of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._alcohol_type_id = alcohol_type_id

    @property
    def alcohol_type_name(self):
        """Gets the alcohol_type_name of this WorkActivity.  # noqa: E501


        :return: The alcohol_type_name of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._alcohol_type_name

    @alcohol_type_name.setter
    def alcohol_type_name(self, alcohol_type_name):
        """Sets the alcohol_type_name of this WorkActivity.


        :param alcohol_type_name: The alcohol_type_name of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._alcohol_type_name = alcohol_type_name

    @property
    def alcohol_content(self):
        """Gets the alcohol_content of this WorkActivity.  # noqa: E501


        :return: The alcohol_content of this WorkActivity.  # noqa: E501
        :rtype: float
        """
        return self._alcohol_content

    @alcohol_content.setter
    def alcohol_content(self, alcohol_content):
        """Sets the alcohol_content of this WorkActivity.


        :param alcohol_content: The alcohol_content of this WorkActivity.  # noqa: E501
        :type: float
        """

        self._alcohol_content = alcohol_content

    @property
    def alcohol_container_id(self):
        """Gets the alcohol_container_id of this WorkActivity.  # noqa: E501


        :return: The alcohol_container_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._alcohol_container_id

    @alcohol_container_id.setter
    def alcohol_container_id(self, alcohol_container_id):
        """Sets the alcohol_container_id of this WorkActivity.


        :param alcohol_container_id: The alcohol_container_id of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._alcohol_container_id = alcohol_container_id

    @property
    def alcohol_container_name(self):
        """Gets the alcohol_container_name of this WorkActivity.  # noqa: E501


        :return: The alcohol_container_name of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._alcohol_container_name

    @alcohol_container_name.setter
    def alcohol_container_name(self, alcohol_container_name):
        """Sets the alcohol_container_name of this WorkActivity.


        :param alcohol_container_name: The alcohol_container_name of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._alcohol_container_name = alcohol_container_name

    @property
    def alcohol_container_volume(self):
        """Gets the alcohol_container_volume of this WorkActivity.  # noqa: E501


        :return: The alcohol_container_volume of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._alcohol_container_volume

    @alcohol_container_volume.setter
    def alcohol_container_volume(self, alcohol_container_volume):
        """Sets the alcohol_container_volume of this WorkActivity.


        :param alcohol_container_volume: The alcohol_container_volume of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._alcohol_container_volume = alcohol_container_volume

    @property
    def alcohol_vintage_year(self):
        """Gets the alcohol_vintage_year of this WorkActivity.  # noqa: E501


        :return: The alcohol_vintage_year of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._alcohol_vintage_year

    @alcohol_vintage_year.setter
    def alcohol_vintage_year(self, alcohol_vintage_year):
        """Sets the alcohol_vintage_year of this WorkActivity.


        :param alcohol_vintage_year: The alcohol_vintage_year of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._alcohol_vintage_year = alcohol_vintage_year

    @property
    def alcohol_country_id(self):
        """Gets the alcohol_country_id of this WorkActivity.  # noqa: E501


        :return: The alcohol_country_id of this WorkActivity.  # noqa: E501
        :rtype: int
        """
        return self._alcohol_country_id

    @alcohol_country_id.setter
    def alcohol_country_id(self, alcohol_country_id):
        """Sets the alcohol_country_id of this WorkActivity.


        :param alcohol_country_id: The alcohol_country_id of this WorkActivity.  # noqa: E501
        :type: int
        """

        self._alcohol_country_id = alcohol_country_id

    @property
    def alcohol_country_name(self):
        """Gets the alcohol_country_name of this WorkActivity.  # noqa: E501


        :return: The alcohol_country_name of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._alcohol_country_name

    @alcohol_country_name.setter
    def alcohol_country_name(self, alcohol_country_name):
        """Sets the alcohol_country_name of this WorkActivity.


        :param alcohol_country_name: The alcohol_country_name of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._alcohol_country_name = alcohol_country_name

    @property
    def alcohol_state(self):
        """Gets the alcohol_state of this WorkActivity.  # noqa: E501


        :return: The alcohol_state of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._alcohol_state

    @alcohol_state.setter
    def alcohol_state(self, alcohol_state):
        """Sets the alcohol_state of this WorkActivity.


        :param alcohol_state: The alcohol_state of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._alcohol_state = alcohol_state

    @property
    def alcohol_region(self):
        """Gets the alcohol_region of this WorkActivity.  # noqa: E501


        :return: The alcohol_region of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._alcohol_region

    @alcohol_region.setter
    def alcohol_region(self, alcohol_region):
        """Sets the alcohol_region of this WorkActivity.


        :param alcohol_region: The alcohol_region of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._alcohol_region = alcohol_region

    @property
    def alcohol_brand(self):
        """Gets the alcohol_brand of this WorkActivity.  # noqa: E501


        :return: The alcohol_brand of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._alcohol_brand

    @alcohol_brand.setter
    def alcohol_brand(self, alcohol_brand):
        """Sets the alcohol_brand of this WorkActivity.


        :param alcohol_brand: The alcohol_brand of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._alcohol_brand = alcohol_brand

    @property
    def alcohol_upc_code(self):
        """Gets the alcohol_upc_code of this WorkActivity.  # noqa: E501


        :return: The alcohol_upc_code of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._alcohol_upc_code

    @alcohol_upc_code.setter
    def alcohol_upc_code(self, alcohol_upc_code):
        """Sets the alcohol_upc_code of this WorkActivity.


        :param alcohol_upc_code: The alcohol_upc_code of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._alcohol_upc_code = alcohol_upc_code

    @property
    def alcohol_nabca_code(self):
        """Gets the alcohol_nabca_code of this WorkActivity.  # noqa: E501


        :return: The alcohol_nabca_code of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._alcohol_nabca_code

    @alcohol_nabca_code.setter
    def alcohol_nabca_code(self, alcohol_nabca_code):
        """Sets the alcohol_nabca_code of this WorkActivity.


        :param alcohol_nabca_code: The alcohol_nabca_code of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._alcohol_nabca_code = alcohol_nabca_code

    @property
    def alcohol_unimerc_code(self):
        """Gets the alcohol_unimerc_code of this WorkActivity.  # noqa: E501


        :return: The alcohol_unimerc_code of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._alcohol_unimerc_code

    @alcohol_unimerc_code.setter
    def alcohol_unimerc_code(self, alcohol_unimerc_code):
        """Sets the alcohol_unimerc_code of this WorkActivity.


        :param alcohol_unimerc_code: The alcohol_unimerc_code of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._alcohol_unimerc_code = alcohol_unimerc_code

    @property
    def alcohol_scc_code(self):
        """Gets the alcohol_scc_code of this WorkActivity.  # noqa: E501


        :return: The alcohol_scc_code of this WorkActivity.  # noqa: E501
        :rtype: str
        """
        return self._alcohol_scc_code

    @alcohol_scc_code.setter
    def alcohol_scc_code(self, alcohol_scc_code):
        """Sets the alcohol_scc_code of this WorkActivity.


        :param alcohol_scc_code: The alcohol_scc_code of this WorkActivity.  # noqa: E501
        :type: str
        """

        self._alcohol_scc_code = alcohol_scc_code

    @property
    def billing_quantity(self):
        """Gets the billing_quantity of this WorkActivity.  # noqa: E501


        :return: The billing_quantity of this WorkActivity.  # noqa: E501
        :rtype: float
        """
        return self._billing_quantity

    @billing_quantity.setter
    def billing_quantity(self, billing_quantity):
        """Sets the billing_quantity of this WorkActivity.


        :param billing_quantity: The billing_quantity of this WorkActivity.  # noqa: E501
        :type: float
        """

        self._billing_quantity = billing_quantity

    @property
    def charge_rate(self):
        """Gets the charge_rate of this WorkActivity.  # noqa: E501


        :return: The charge_rate of this WorkActivity.  # noqa: E501
        :rtype: float
        """
        return self._charge_rate

    @charge_rate.setter
    def charge_rate(self, charge_rate):
        """Sets the charge_rate of this WorkActivity.


        :param charge_rate: The charge_rate of this WorkActivity.  # noqa: E501
        :type: float
        """

        self._charge_rate = charge_rate

    @property
    def extended_charge(self):
        """Gets the extended_charge of this WorkActivity.  # noqa: E501


        :return: The extended_charge of this WorkActivity.  # noqa: E501
        :rtype: float
        """
        return self._extended_charge

    @extended_charge.setter
    def extended_charge(self, extended_charge):
        """Sets the extended_charge of this WorkActivity.


        :param extended_charge: The extended_charge of this WorkActivity.  # noqa: E501
        :type: float
        """

        self._extended_charge = extended_charge

    @property
    def custom_fields(self):
        """Gets the custom_fields of this WorkActivity.  # noqa: E501


        :return: The custom_fields of this WorkActivity.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this WorkActivity.


        :param custom_fields: The custom_fields of this WorkActivity.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkActivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
