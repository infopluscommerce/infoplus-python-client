# coding: utf-8

"""
    Infoplus API

    Infoplus API.  # noqa: E501

    OpenAPI spec version: beta
    Contact: api@infopluscommerce.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FulfillmentPlan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'create_date': 'datetime',
        'modify_date': 'datetime',
        'name': 'str',
        'description': 'str',
        'warehouse_id': 'int',
        'priority_code': 'int',
        'last_run_time': 'datetime',
        'order_smart_filter_id': 'int',
        'location_smart_filter_id': 'int',
        'max_orders': 'int',
        'batch_size_max': 'int',
        'batch_size_min': 'int',
        'max_cartons': 'int',
        'version': 'str',
        'is_mass_distribution': 'bool',
        'create_pick_work': 'bool',
        'picking_rule': 'str',
        'pick_batch_group_id': 'str',
        'max_sk_us_per_batch': 'int',
        'layout_rule': 'str',
        'pick_sort_rule': 'str',
        'location_sort': 'str',
        'create_pick_list': 'bool',
        'pick_list_format': 'str',
        'pick_list_layout': 'str',
        'pick_list_group': 'str',
        'pick_list_sort': 'str',
        'pick_list_location_sort': 'str',
        'create_pick_summary': 'bool',
        'pick_summary_format': 'str',
        'pick_summary_layout': 'str',
        'pick_summary_sort': 'str',
        'pick_scan_scheme_id': 'int',
        'cartonize_orders': 'bool',
        'cartonization_script_id': 'int',
        'auto_ship_casebreak_cartons': 'bool',
        'auto_ship_orders': 'bool',
        'pre_generate_parcel_labels': 'bool',
        'label_sort': 'str',
        'create_packing_slip': 'str',
        'override_packing_slip_template_id': 'int',
        'create_order_assembly_guide': 'bool',
        'order_assembly_guide_layout': 'str',
        'create_order_invoice': 'str',
        'override_order_invoice_template_id': 'int',
        'create_carton_gs1128_labels': 'str',
        'create_line_item_each_gs1128_labels': 'str',
        'send_to_external_shipping_system': 'bool',
        'external_shipping_system_id': 'int',
        'custom_fields': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'create_date': 'createDate',
        'modify_date': 'modifyDate',
        'name': 'name',
        'description': 'description',
        'warehouse_id': 'warehouseId',
        'priority_code': 'priorityCode',
        'last_run_time': 'lastRunTime',
        'order_smart_filter_id': 'orderSmartFilterId',
        'location_smart_filter_id': 'locationSmartFilterId',
        'max_orders': 'maxOrders',
        'batch_size_max': 'batchSizeMax',
        'batch_size_min': 'batchSizeMin',
        'max_cartons': 'maxCartons',
        'version': 'version',
        'is_mass_distribution': 'isMassDistribution',
        'create_pick_work': 'createPickWork',
        'picking_rule': 'pickingRule',
        'pick_batch_group_id': 'pickBatchGroupId',
        'max_sk_us_per_batch': 'maxSKUsPerBatch',
        'layout_rule': 'layoutRule',
        'pick_sort_rule': 'pickSortRule',
        'location_sort': 'locationSort',
        'create_pick_list': 'createPickList',
        'pick_list_format': 'pickListFormat',
        'pick_list_layout': 'pickListLayout',
        'pick_list_group': 'pickListGroup',
        'pick_list_sort': 'pickListSort',
        'pick_list_location_sort': 'pickListLocationSort',
        'create_pick_summary': 'createPickSummary',
        'pick_summary_format': 'pickSummaryFormat',
        'pick_summary_layout': 'pickSummaryLayout',
        'pick_summary_sort': 'pickSummarySort',
        'pick_scan_scheme_id': 'pickScanSchemeId',
        'cartonize_orders': 'cartonizeOrders',
        'cartonization_script_id': 'cartonizationScriptId',
        'auto_ship_casebreak_cartons': 'autoShipCasebreakCartons',
        'auto_ship_orders': 'autoShipOrders',
        'pre_generate_parcel_labels': 'preGenerateParcelLabels',
        'label_sort': 'labelSort',
        'create_packing_slip': 'createPackingSlip',
        'override_packing_slip_template_id': 'overridePackingSlipTemplateId',
        'create_order_assembly_guide': 'createOrderAssemblyGuide',
        'order_assembly_guide_layout': 'orderAssemblyGuideLayout',
        'create_order_invoice': 'createOrderInvoice',
        'override_order_invoice_template_id': 'overrideOrderInvoiceTemplateId',
        'create_carton_gs1128_labels': 'createCartonGS1128Labels',
        'create_line_item_each_gs1128_labels': 'createLineItemEachGS1128Labels',
        'send_to_external_shipping_system': 'sendToExternalShippingSystem',
        'external_shipping_system_id': 'externalShippingSystemId',
        'custom_fields': 'customFields'
    }

    def __init__(self, id=None, create_date=None, modify_date=None, name=None, description=None, warehouse_id=None, priority_code=None, last_run_time=None, order_smart_filter_id=None, location_smart_filter_id=None, max_orders=None, batch_size_max=None, batch_size_min=None, max_cartons=None, version=None, is_mass_distribution=False, create_pick_work=False, picking_rule=None, pick_batch_group_id=None, max_sk_us_per_batch=None, layout_rule=None, pick_sort_rule=None, location_sort=None, create_pick_list=False, pick_list_format=None, pick_list_layout=None, pick_list_group=None, pick_list_sort=None, pick_list_location_sort=None, create_pick_summary=False, pick_summary_format=None, pick_summary_layout=None, pick_summary_sort=None, pick_scan_scheme_id=None, cartonize_orders=False, cartonization_script_id=None, auto_ship_casebreak_cartons=False, auto_ship_orders=False, pre_generate_parcel_labels=False, label_sort=None, create_packing_slip=None, override_packing_slip_template_id=None, create_order_assembly_guide=False, order_assembly_guide_layout=None, create_order_invoice=None, override_order_invoice_template_id=None, create_carton_gs1128_labels=None, create_line_item_each_gs1128_labels=None, send_to_external_shipping_system=False, external_shipping_system_id=None, custom_fields=None):  # noqa: E501
        """FulfillmentPlan - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._create_date = None
        self._modify_date = None
        self._name = None
        self._description = None
        self._warehouse_id = None
        self._priority_code = None
        self._last_run_time = None
        self._order_smart_filter_id = None
        self._location_smart_filter_id = None
        self._max_orders = None
        self._batch_size_max = None
        self._batch_size_min = None
        self._max_cartons = None
        self._version = None
        self._is_mass_distribution = None
        self._create_pick_work = None
        self._picking_rule = None
        self._pick_batch_group_id = None
        self._max_sk_us_per_batch = None
        self._layout_rule = None
        self._pick_sort_rule = None
        self._location_sort = None
        self._create_pick_list = None
        self._pick_list_format = None
        self._pick_list_layout = None
        self._pick_list_group = None
        self._pick_list_sort = None
        self._pick_list_location_sort = None
        self._create_pick_summary = None
        self._pick_summary_format = None
        self._pick_summary_layout = None
        self._pick_summary_sort = None
        self._pick_scan_scheme_id = None
        self._cartonize_orders = None
        self._cartonization_script_id = None
        self._auto_ship_casebreak_cartons = None
        self._auto_ship_orders = None
        self._pre_generate_parcel_labels = None
        self._label_sort = None
        self._create_packing_slip = None
        self._override_packing_slip_template_id = None
        self._create_order_assembly_guide = None
        self._order_assembly_guide_layout = None
        self._create_order_invoice = None
        self._override_order_invoice_template_id = None
        self._create_carton_gs1128_labels = None
        self._create_line_item_each_gs1128_labels = None
        self._send_to_external_shipping_system = None
        self._external_shipping_system_id = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if create_date is not None:
            self.create_date = create_date
        if modify_date is not None:
            self.modify_date = modify_date
        self.name = name
        if description is not None:
            self.description = description
        self.warehouse_id = warehouse_id
        if priority_code is not None:
            self.priority_code = priority_code
        if last_run_time is not None:
            self.last_run_time = last_run_time
        self.order_smart_filter_id = order_smart_filter_id
        if location_smart_filter_id is not None:
            self.location_smart_filter_id = location_smart_filter_id
        if max_orders is not None:
            self.max_orders = max_orders
        if batch_size_max is not None:
            self.batch_size_max = batch_size_max
        if batch_size_min is not None:
            self.batch_size_min = batch_size_min
        if max_cartons is not None:
            self.max_cartons = max_cartons
        if version is not None:
            self.version = version
        if is_mass_distribution is not None:
            self.is_mass_distribution = is_mass_distribution
        self.create_pick_work = create_pick_work
        if picking_rule is not None:
            self.picking_rule = picking_rule
        if pick_batch_group_id is not None:
            self.pick_batch_group_id = pick_batch_group_id
        if max_sk_us_per_batch is not None:
            self.max_sk_us_per_batch = max_sk_us_per_batch
        if layout_rule is not None:
            self.layout_rule = layout_rule
        if pick_sort_rule is not None:
            self.pick_sort_rule = pick_sort_rule
        if location_sort is not None:
            self.location_sort = location_sort
        if create_pick_list is not None:
            self.create_pick_list = create_pick_list
        if pick_list_format is not None:
            self.pick_list_format = pick_list_format
        if pick_list_layout is not None:
            self.pick_list_layout = pick_list_layout
        if pick_list_group is not None:
            self.pick_list_group = pick_list_group
        if pick_list_sort is not None:
            self.pick_list_sort = pick_list_sort
        if pick_list_location_sort is not None:
            self.pick_list_location_sort = pick_list_location_sort
        if create_pick_summary is not None:
            self.create_pick_summary = create_pick_summary
        if pick_summary_format is not None:
            self.pick_summary_format = pick_summary_format
        if pick_summary_layout is not None:
            self.pick_summary_layout = pick_summary_layout
        if pick_summary_sort is not None:
            self.pick_summary_sort = pick_summary_sort
        self.pick_scan_scheme_id = pick_scan_scheme_id
        self.cartonize_orders = cartonize_orders
        if cartonization_script_id is not None:
            self.cartonization_script_id = cartonization_script_id
        if auto_ship_casebreak_cartons is not None:
            self.auto_ship_casebreak_cartons = auto_ship_casebreak_cartons
        if auto_ship_orders is not None:
            self.auto_ship_orders = auto_ship_orders
        if pre_generate_parcel_labels is not None:
            self.pre_generate_parcel_labels = pre_generate_parcel_labels
        if label_sort is not None:
            self.label_sort = label_sort
        self.create_packing_slip = create_packing_slip
        if override_packing_slip_template_id is not None:
            self.override_packing_slip_template_id = override_packing_slip_template_id
        if create_order_assembly_guide is not None:
            self.create_order_assembly_guide = create_order_assembly_guide
        if order_assembly_guide_layout is not None:
            self.order_assembly_guide_layout = order_assembly_guide_layout
        self.create_order_invoice = create_order_invoice
        if override_order_invoice_template_id is not None:
            self.override_order_invoice_template_id = override_order_invoice_template_id
        if create_carton_gs1128_labels is not None:
            self.create_carton_gs1128_labels = create_carton_gs1128_labels
        if create_line_item_each_gs1128_labels is not None:
            self.create_line_item_each_gs1128_labels = create_line_item_each_gs1128_labels
        self.send_to_external_shipping_system = send_to_external_shipping_system
        if external_shipping_system_id is not None:
            self.external_shipping_system_id = external_shipping_system_id
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this FulfillmentPlan.  # noqa: E501


        :return: The id of this FulfillmentPlan.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FulfillmentPlan.


        :param id: The id of this FulfillmentPlan.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def create_date(self):
        """Gets the create_date of this FulfillmentPlan.  # noqa: E501


        :return: The create_date of this FulfillmentPlan.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this FulfillmentPlan.


        :param create_date: The create_date of this FulfillmentPlan.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def modify_date(self):
        """Gets the modify_date of this FulfillmentPlan.  # noqa: E501


        :return: The modify_date of this FulfillmentPlan.  # noqa: E501
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """Sets the modify_date of this FulfillmentPlan.


        :param modify_date: The modify_date of this FulfillmentPlan.  # noqa: E501
        :type: datetime
        """

        self._modify_date = modify_date

    @property
    def name(self):
        """Gets the name of this FulfillmentPlan.  # noqa: E501


        :return: The name of this FulfillmentPlan.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FulfillmentPlan.


        :param name: The name of this FulfillmentPlan.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this FulfillmentPlan.  # noqa: E501


        :return: The description of this FulfillmentPlan.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FulfillmentPlan.


        :param description: The description of this FulfillmentPlan.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this FulfillmentPlan.  # noqa: E501


        :return: The warehouse_id of this FulfillmentPlan.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this FulfillmentPlan.


        :param warehouse_id: The warehouse_id of this FulfillmentPlan.  # noqa: E501
        :type: int
        """
        if warehouse_id is None:
            raise ValueError("Invalid value for `warehouse_id`, must not be `None`")  # noqa: E501

        self._warehouse_id = warehouse_id

    @property
    def priority_code(self):
        """Gets the priority_code of this FulfillmentPlan.  # noqa: E501


        :return: The priority_code of this FulfillmentPlan.  # noqa: E501
        :rtype: int
        """
        return self._priority_code

    @priority_code.setter
    def priority_code(self, priority_code):
        """Sets the priority_code of this FulfillmentPlan.


        :param priority_code: The priority_code of this FulfillmentPlan.  # noqa: E501
        :type: int
        """

        self._priority_code = priority_code

    @property
    def last_run_time(self):
        """Gets the last_run_time of this FulfillmentPlan.  # noqa: E501


        :return: The last_run_time of this FulfillmentPlan.  # noqa: E501
        :rtype: datetime
        """
        return self._last_run_time

    @last_run_time.setter
    def last_run_time(self, last_run_time):
        """Sets the last_run_time of this FulfillmentPlan.


        :param last_run_time: The last_run_time of this FulfillmentPlan.  # noqa: E501
        :type: datetime
        """

        self._last_run_time = last_run_time

    @property
    def order_smart_filter_id(self):
        """Gets the order_smart_filter_id of this FulfillmentPlan.  # noqa: E501


        :return: The order_smart_filter_id of this FulfillmentPlan.  # noqa: E501
        :rtype: int
        """
        return self._order_smart_filter_id

    @order_smart_filter_id.setter
    def order_smart_filter_id(self, order_smart_filter_id):
        """Sets the order_smart_filter_id of this FulfillmentPlan.


        :param order_smart_filter_id: The order_smart_filter_id of this FulfillmentPlan.  # noqa: E501
        :type: int
        """
        if order_smart_filter_id is None:
            raise ValueError("Invalid value for `order_smart_filter_id`, must not be `None`")  # noqa: E501

        self._order_smart_filter_id = order_smart_filter_id

    @property
    def location_smart_filter_id(self):
        """Gets the location_smart_filter_id of this FulfillmentPlan.  # noqa: E501


        :return: The location_smart_filter_id of this FulfillmentPlan.  # noqa: E501
        :rtype: int
        """
        return self._location_smart_filter_id

    @location_smart_filter_id.setter
    def location_smart_filter_id(self, location_smart_filter_id):
        """Sets the location_smart_filter_id of this FulfillmentPlan.


        :param location_smart_filter_id: The location_smart_filter_id of this FulfillmentPlan.  # noqa: E501
        :type: int
        """

        self._location_smart_filter_id = location_smart_filter_id

    @property
    def max_orders(self):
        """Gets the max_orders of this FulfillmentPlan.  # noqa: E501


        :return: The max_orders of this FulfillmentPlan.  # noqa: E501
        :rtype: int
        """
        return self._max_orders

    @max_orders.setter
    def max_orders(self, max_orders):
        """Sets the max_orders of this FulfillmentPlan.


        :param max_orders: The max_orders of this FulfillmentPlan.  # noqa: E501
        :type: int
        """

        self._max_orders = max_orders

    @property
    def batch_size_max(self):
        """Gets the batch_size_max of this FulfillmentPlan.  # noqa: E501


        :return: The batch_size_max of this FulfillmentPlan.  # noqa: E501
        :rtype: int
        """
        return self._batch_size_max

    @batch_size_max.setter
    def batch_size_max(self, batch_size_max):
        """Sets the batch_size_max of this FulfillmentPlan.


        :param batch_size_max: The batch_size_max of this FulfillmentPlan.  # noqa: E501
        :type: int
        """

        self._batch_size_max = batch_size_max

    @property
    def batch_size_min(self):
        """Gets the batch_size_min of this FulfillmentPlan.  # noqa: E501


        :return: The batch_size_min of this FulfillmentPlan.  # noqa: E501
        :rtype: int
        """
        return self._batch_size_min

    @batch_size_min.setter
    def batch_size_min(self, batch_size_min):
        """Sets the batch_size_min of this FulfillmentPlan.


        :param batch_size_min: The batch_size_min of this FulfillmentPlan.  # noqa: E501
        :type: int
        """

        self._batch_size_min = batch_size_min

    @property
    def max_cartons(self):
        """Gets the max_cartons of this FulfillmentPlan.  # noqa: E501


        :return: The max_cartons of this FulfillmentPlan.  # noqa: E501
        :rtype: int
        """
        return self._max_cartons

    @max_cartons.setter
    def max_cartons(self, max_cartons):
        """Sets the max_cartons of this FulfillmentPlan.


        :param max_cartons: The max_cartons of this FulfillmentPlan.  # noqa: E501
        :type: int
        """

        self._max_cartons = max_cartons

    @property
    def version(self):
        """Gets the version of this FulfillmentPlan.  # noqa: E501


        :return: The version of this FulfillmentPlan.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this FulfillmentPlan.


        :param version: The version of this FulfillmentPlan.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def is_mass_distribution(self):
        """Gets the is_mass_distribution of this FulfillmentPlan.  # noqa: E501


        :return: The is_mass_distribution of this FulfillmentPlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_mass_distribution

    @is_mass_distribution.setter
    def is_mass_distribution(self, is_mass_distribution):
        """Sets the is_mass_distribution of this FulfillmentPlan.


        :param is_mass_distribution: The is_mass_distribution of this FulfillmentPlan.  # noqa: E501
        :type: bool
        """

        self._is_mass_distribution = is_mass_distribution

    @property
    def create_pick_work(self):
        """Gets the create_pick_work of this FulfillmentPlan.  # noqa: E501


        :return: The create_pick_work of this FulfillmentPlan.  # noqa: E501
        :rtype: bool
        """
        return self._create_pick_work

    @create_pick_work.setter
    def create_pick_work(self, create_pick_work):
        """Sets the create_pick_work of this FulfillmentPlan.


        :param create_pick_work: The create_pick_work of this FulfillmentPlan.  # noqa: E501
        :type: bool
        """
        if create_pick_work is None:
            raise ValueError("Invalid value for `create_pick_work`, must not be `None`")  # noqa: E501

        self._create_pick_work = create_pick_work

    @property
    def picking_rule(self):
        """Gets the picking_rule of this FulfillmentPlan.  # noqa: E501


        :return: The picking_rule of this FulfillmentPlan.  # noqa: E501
        :rtype: str
        """
        return self._picking_rule

    @picking_rule.setter
    def picking_rule(self, picking_rule):
        """Sets the picking_rule of this FulfillmentPlan.


        :param picking_rule: The picking_rule of this FulfillmentPlan.  # noqa: E501
        :type: str
        """

        self._picking_rule = picking_rule

    @property
    def pick_batch_group_id(self):
        """Gets the pick_batch_group_id of this FulfillmentPlan.  # noqa: E501


        :return: The pick_batch_group_id of this FulfillmentPlan.  # noqa: E501
        :rtype: str
        """
        return self._pick_batch_group_id

    @pick_batch_group_id.setter
    def pick_batch_group_id(self, pick_batch_group_id):
        """Sets the pick_batch_group_id of this FulfillmentPlan.


        :param pick_batch_group_id: The pick_batch_group_id of this FulfillmentPlan.  # noqa: E501
        :type: str
        """

        self._pick_batch_group_id = pick_batch_group_id

    @property
    def max_sk_us_per_batch(self):
        """Gets the max_sk_us_per_batch of this FulfillmentPlan.  # noqa: E501


        :return: The max_sk_us_per_batch of this FulfillmentPlan.  # noqa: E501
        :rtype: int
        """
        return self._max_sk_us_per_batch

    @max_sk_us_per_batch.setter
    def max_sk_us_per_batch(self, max_sk_us_per_batch):
        """Sets the max_sk_us_per_batch of this FulfillmentPlan.


        :param max_sk_us_per_batch: The max_sk_us_per_batch of this FulfillmentPlan.  # noqa: E501
        :type: int
        """

        self._max_sk_us_per_batch = max_sk_us_per_batch

    @property
    def layout_rule(self):
        """Gets the layout_rule of this FulfillmentPlan.  # noqa: E501


        :return: The layout_rule of this FulfillmentPlan.  # noqa: E501
        :rtype: str
        """
        return self._layout_rule

    @layout_rule.setter
    def layout_rule(self, layout_rule):
        """Sets the layout_rule of this FulfillmentPlan.


        :param layout_rule: The layout_rule of this FulfillmentPlan.  # noqa: E501
        :type: str
        """

        self._layout_rule = layout_rule

    @property
    def pick_sort_rule(self):
        """Gets the pick_sort_rule of this FulfillmentPlan.  # noqa: E501


        :return: The pick_sort_rule of this FulfillmentPlan.  # noqa: E501
        :rtype: str
        """
        return self._pick_sort_rule

    @pick_sort_rule.setter
    def pick_sort_rule(self, pick_sort_rule):
        """Sets the pick_sort_rule of this FulfillmentPlan.


        :param pick_sort_rule: The pick_sort_rule of this FulfillmentPlan.  # noqa: E501
        :type: str
        """

        self._pick_sort_rule = pick_sort_rule

    @property
    def location_sort(self):
        """Gets the location_sort of this FulfillmentPlan.  # noqa: E501


        :return: The location_sort of this FulfillmentPlan.  # noqa: E501
        :rtype: str
        """
        return self._location_sort

    @location_sort.setter
    def location_sort(self, location_sort):
        """Sets the location_sort of this FulfillmentPlan.


        :param location_sort: The location_sort of this FulfillmentPlan.  # noqa: E501
        :type: str
        """

        self._location_sort = location_sort

    @property
    def create_pick_list(self):
        """Gets the create_pick_list of this FulfillmentPlan.  # noqa: E501


        :return: The create_pick_list of this FulfillmentPlan.  # noqa: E501
        :rtype: bool
        """
        return self._create_pick_list

    @create_pick_list.setter
    def create_pick_list(self, create_pick_list):
        """Sets the create_pick_list of this FulfillmentPlan.


        :param create_pick_list: The create_pick_list of this FulfillmentPlan.  # noqa: E501
        :type: bool
        """

        self._create_pick_list = create_pick_list

    @property
    def pick_list_format(self):
        """Gets the pick_list_format of this FulfillmentPlan.  # noqa: E501


        :return: The pick_list_format of this FulfillmentPlan.  # noqa: E501
        :rtype: str
        """
        return self._pick_list_format

    @pick_list_format.setter
    def pick_list_format(self, pick_list_format):
        """Sets the pick_list_format of this FulfillmentPlan.


        :param pick_list_format: The pick_list_format of this FulfillmentPlan.  # noqa: E501
        :type: str
        """

        self._pick_list_format = pick_list_format

    @property
    def pick_list_layout(self):
        """Gets the pick_list_layout of this FulfillmentPlan.  # noqa: E501


        :return: The pick_list_layout of this FulfillmentPlan.  # noqa: E501
        :rtype: str
        """
        return self._pick_list_layout

    @pick_list_layout.setter
    def pick_list_layout(self, pick_list_layout):
        """Sets the pick_list_layout of this FulfillmentPlan.


        :param pick_list_layout: The pick_list_layout of this FulfillmentPlan.  # noqa: E501
        :type: str
        """

        self._pick_list_layout = pick_list_layout

    @property
    def pick_list_group(self):
        """Gets the pick_list_group of this FulfillmentPlan.  # noqa: E501


        :return: The pick_list_group of this FulfillmentPlan.  # noqa: E501
        :rtype: str
        """
        return self._pick_list_group

    @pick_list_group.setter
    def pick_list_group(self, pick_list_group):
        """Sets the pick_list_group of this FulfillmentPlan.


        :param pick_list_group: The pick_list_group of this FulfillmentPlan.  # noqa: E501
        :type: str
        """

        self._pick_list_group = pick_list_group

    @property
    def pick_list_sort(self):
        """Gets the pick_list_sort of this FulfillmentPlan.  # noqa: E501


        :return: The pick_list_sort of this FulfillmentPlan.  # noqa: E501
        :rtype: str
        """
        return self._pick_list_sort

    @pick_list_sort.setter
    def pick_list_sort(self, pick_list_sort):
        """Sets the pick_list_sort of this FulfillmentPlan.


        :param pick_list_sort: The pick_list_sort of this FulfillmentPlan.  # noqa: E501
        :type: str
        """

        self._pick_list_sort = pick_list_sort

    @property
    def pick_list_location_sort(self):
        """Gets the pick_list_location_sort of this FulfillmentPlan.  # noqa: E501


        :return: The pick_list_location_sort of this FulfillmentPlan.  # noqa: E501
        :rtype: str
        """
        return self._pick_list_location_sort

    @pick_list_location_sort.setter
    def pick_list_location_sort(self, pick_list_location_sort):
        """Sets the pick_list_location_sort of this FulfillmentPlan.


        :param pick_list_location_sort: The pick_list_location_sort of this FulfillmentPlan.  # noqa: E501
        :type: str
        """

        self._pick_list_location_sort = pick_list_location_sort

    @property
    def create_pick_summary(self):
        """Gets the create_pick_summary of this FulfillmentPlan.  # noqa: E501


        :return: The create_pick_summary of this FulfillmentPlan.  # noqa: E501
        :rtype: bool
        """
        return self._create_pick_summary

    @create_pick_summary.setter
    def create_pick_summary(self, create_pick_summary):
        """Sets the create_pick_summary of this FulfillmentPlan.


        :param create_pick_summary: The create_pick_summary of this FulfillmentPlan.  # noqa: E501
        :type: bool
        """

        self._create_pick_summary = create_pick_summary

    @property
    def pick_summary_format(self):
        """Gets the pick_summary_format of this FulfillmentPlan.  # noqa: E501


        :return: The pick_summary_format of this FulfillmentPlan.  # noqa: E501
        :rtype: str
        """
        return self._pick_summary_format

    @pick_summary_format.setter
    def pick_summary_format(self, pick_summary_format):
        """Sets the pick_summary_format of this FulfillmentPlan.


        :param pick_summary_format: The pick_summary_format of this FulfillmentPlan.  # noqa: E501
        :type: str
        """

        self._pick_summary_format = pick_summary_format

    @property
    def pick_summary_layout(self):
        """Gets the pick_summary_layout of this FulfillmentPlan.  # noqa: E501


        :return: The pick_summary_layout of this FulfillmentPlan.  # noqa: E501
        :rtype: str
        """
        return self._pick_summary_layout

    @pick_summary_layout.setter
    def pick_summary_layout(self, pick_summary_layout):
        """Sets the pick_summary_layout of this FulfillmentPlan.


        :param pick_summary_layout: The pick_summary_layout of this FulfillmentPlan.  # noqa: E501
        :type: str
        """

        self._pick_summary_layout = pick_summary_layout

    @property
    def pick_summary_sort(self):
        """Gets the pick_summary_sort of this FulfillmentPlan.  # noqa: E501


        :return: The pick_summary_sort of this FulfillmentPlan.  # noqa: E501
        :rtype: str
        """
        return self._pick_summary_sort

    @pick_summary_sort.setter
    def pick_summary_sort(self, pick_summary_sort):
        """Sets the pick_summary_sort of this FulfillmentPlan.


        :param pick_summary_sort: The pick_summary_sort of this FulfillmentPlan.  # noqa: E501
        :type: str
        """

        self._pick_summary_sort = pick_summary_sort

    @property
    def pick_scan_scheme_id(self):
        """Gets the pick_scan_scheme_id of this FulfillmentPlan.  # noqa: E501


        :return: The pick_scan_scheme_id of this FulfillmentPlan.  # noqa: E501
        :rtype: int
        """
        return self._pick_scan_scheme_id

    @pick_scan_scheme_id.setter
    def pick_scan_scheme_id(self, pick_scan_scheme_id):
        """Sets the pick_scan_scheme_id of this FulfillmentPlan.


        :param pick_scan_scheme_id: The pick_scan_scheme_id of this FulfillmentPlan.  # noqa: E501
        :type: int
        """
        if pick_scan_scheme_id is None:
            raise ValueError("Invalid value for `pick_scan_scheme_id`, must not be `None`")  # noqa: E501

        self._pick_scan_scheme_id = pick_scan_scheme_id

    @property
    def cartonize_orders(self):
        """Gets the cartonize_orders of this FulfillmentPlan.  # noqa: E501


        :return: The cartonize_orders of this FulfillmentPlan.  # noqa: E501
        :rtype: bool
        """
        return self._cartonize_orders

    @cartonize_orders.setter
    def cartonize_orders(self, cartonize_orders):
        """Sets the cartonize_orders of this FulfillmentPlan.


        :param cartonize_orders: The cartonize_orders of this FulfillmentPlan.  # noqa: E501
        :type: bool
        """
        if cartonize_orders is None:
            raise ValueError("Invalid value for `cartonize_orders`, must not be `None`")  # noqa: E501

        self._cartonize_orders = cartonize_orders

    @property
    def cartonization_script_id(self):
        """Gets the cartonization_script_id of this FulfillmentPlan.  # noqa: E501


        :return: The cartonization_script_id of this FulfillmentPlan.  # noqa: E501
        :rtype: int
        """
        return self._cartonization_script_id

    @cartonization_script_id.setter
    def cartonization_script_id(self, cartonization_script_id):
        """Sets the cartonization_script_id of this FulfillmentPlan.


        :param cartonization_script_id: The cartonization_script_id of this FulfillmentPlan.  # noqa: E501
        :type: int
        """

        self._cartonization_script_id = cartonization_script_id

    @property
    def auto_ship_casebreak_cartons(self):
        """Gets the auto_ship_casebreak_cartons of this FulfillmentPlan.  # noqa: E501


        :return: The auto_ship_casebreak_cartons of this FulfillmentPlan.  # noqa: E501
        :rtype: bool
        """
        return self._auto_ship_casebreak_cartons

    @auto_ship_casebreak_cartons.setter
    def auto_ship_casebreak_cartons(self, auto_ship_casebreak_cartons):
        """Sets the auto_ship_casebreak_cartons of this FulfillmentPlan.


        :param auto_ship_casebreak_cartons: The auto_ship_casebreak_cartons of this FulfillmentPlan.  # noqa: E501
        :type: bool
        """

        self._auto_ship_casebreak_cartons = auto_ship_casebreak_cartons

    @property
    def auto_ship_orders(self):
        """Gets the auto_ship_orders of this FulfillmentPlan.  # noqa: E501


        :return: The auto_ship_orders of this FulfillmentPlan.  # noqa: E501
        :rtype: bool
        """
        return self._auto_ship_orders

    @auto_ship_orders.setter
    def auto_ship_orders(self, auto_ship_orders):
        """Sets the auto_ship_orders of this FulfillmentPlan.


        :param auto_ship_orders: The auto_ship_orders of this FulfillmentPlan.  # noqa: E501
        :type: bool
        """

        self._auto_ship_orders = auto_ship_orders

    @property
    def pre_generate_parcel_labels(self):
        """Gets the pre_generate_parcel_labels of this FulfillmentPlan.  # noqa: E501


        :return: The pre_generate_parcel_labels of this FulfillmentPlan.  # noqa: E501
        :rtype: bool
        """
        return self._pre_generate_parcel_labels

    @pre_generate_parcel_labels.setter
    def pre_generate_parcel_labels(self, pre_generate_parcel_labels):
        """Sets the pre_generate_parcel_labels of this FulfillmentPlan.


        :param pre_generate_parcel_labels: The pre_generate_parcel_labels of this FulfillmentPlan.  # noqa: E501
        :type: bool
        """

        self._pre_generate_parcel_labels = pre_generate_parcel_labels

    @property
    def label_sort(self):
        """Gets the label_sort of this FulfillmentPlan.  # noqa: E501


        :return: The label_sort of this FulfillmentPlan.  # noqa: E501
        :rtype: str
        """
        return self._label_sort

    @label_sort.setter
    def label_sort(self, label_sort):
        """Sets the label_sort of this FulfillmentPlan.


        :param label_sort: The label_sort of this FulfillmentPlan.  # noqa: E501
        :type: str
        """

        self._label_sort = label_sort

    @property
    def create_packing_slip(self):
        """Gets the create_packing_slip of this FulfillmentPlan.  # noqa: E501


        :return: The create_packing_slip of this FulfillmentPlan.  # noqa: E501
        :rtype: str
        """
        return self._create_packing_slip

    @create_packing_slip.setter
    def create_packing_slip(self, create_packing_slip):
        """Sets the create_packing_slip of this FulfillmentPlan.


        :param create_packing_slip: The create_packing_slip of this FulfillmentPlan.  # noqa: E501
        :type: str
        """
        if create_packing_slip is None:
            raise ValueError("Invalid value for `create_packing_slip`, must not be `None`")  # noqa: E501

        self._create_packing_slip = create_packing_slip

    @property
    def override_packing_slip_template_id(self):
        """Gets the override_packing_slip_template_id of this FulfillmentPlan.  # noqa: E501


        :return: The override_packing_slip_template_id of this FulfillmentPlan.  # noqa: E501
        :rtype: int
        """
        return self._override_packing_slip_template_id

    @override_packing_slip_template_id.setter
    def override_packing_slip_template_id(self, override_packing_slip_template_id):
        """Sets the override_packing_slip_template_id of this FulfillmentPlan.


        :param override_packing_slip_template_id: The override_packing_slip_template_id of this FulfillmentPlan.  # noqa: E501
        :type: int
        """

        self._override_packing_slip_template_id = override_packing_slip_template_id

    @property
    def create_order_assembly_guide(self):
        """Gets the create_order_assembly_guide of this FulfillmentPlan.  # noqa: E501


        :return: The create_order_assembly_guide of this FulfillmentPlan.  # noqa: E501
        :rtype: bool
        """
        return self._create_order_assembly_guide

    @create_order_assembly_guide.setter
    def create_order_assembly_guide(self, create_order_assembly_guide):
        """Sets the create_order_assembly_guide of this FulfillmentPlan.


        :param create_order_assembly_guide: The create_order_assembly_guide of this FulfillmentPlan.  # noqa: E501
        :type: bool
        """

        self._create_order_assembly_guide = create_order_assembly_guide

    @property
    def order_assembly_guide_layout(self):
        """Gets the order_assembly_guide_layout of this FulfillmentPlan.  # noqa: E501


        :return: The order_assembly_guide_layout of this FulfillmentPlan.  # noqa: E501
        :rtype: str
        """
        return self._order_assembly_guide_layout

    @order_assembly_guide_layout.setter
    def order_assembly_guide_layout(self, order_assembly_guide_layout):
        """Sets the order_assembly_guide_layout of this FulfillmentPlan.


        :param order_assembly_guide_layout: The order_assembly_guide_layout of this FulfillmentPlan.  # noqa: E501
        :type: str
        """

        self._order_assembly_guide_layout = order_assembly_guide_layout

    @property
    def create_order_invoice(self):
        """Gets the create_order_invoice of this FulfillmentPlan.  # noqa: E501


        :return: The create_order_invoice of this FulfillmentPlan.  # noqa: E501
        :rtype: str
        """
        return self._create_order_invoice

    @create_order_invoice.setter
    def create_order_invoice(self, create_order_invoice):
        """Sets the create_order_invoice of this FulfillmentPlan.


        :param create_order_invoice: The create_order_invoice of this FulfillmentPlan.  # noqa: E501
        :type: str
        """
        if create_order_invoice is None:
            raise ValueError("Invalid value for `create_order_invoice`, must not be `None`")  # noqa: E501

        self._create_order_invoice = create_order_invoice

    @property
    def override_order_invoice_template_id(self):
        """Gets the override_order_invoice_template_id of this FulfillmentPlan.  # noqa: E501


        :return: The override_order_invoice_template_id of this FulfillmentPlan.  # noqa: E501
        :rtype: int
        """
        return self._override_order_invoice_template_id

    @override_order_invoice_template_id.setter
    def override_order_invoice_template_id(self, override_order_invoice_template_id):
        """Sets the override_order_invoice_template_id of this FulfillmentPlan.


        :param override_order_invoice_template_id: The override_order_invoice_template_id of this FulfillmentPlan.  # noqa: E501
        :type: int
        """

        self._override_order_invoice_template_id = override_order_invoice_template_id

    @property
    def create_carton_gs1128_labels(self):
        """Gets the create_carton_gs1128_labels of this FulfillmentPlan.  # noqa: E501


        :return: The create_carton_gs1128_labels of this FulfillmentPlan.  # noqa: E501
        :rtype: str
        """
        return self._create_carton_gs1128_labels

    @create_carton_gs1128_labels.setter
    def create_carton_gs1128_labels(self, create_carton_gs1128_labels):
        """Sets the create_carton_gs1128_labels of this FulfillmentPlan.


        :param create_carton_gs1128_labels: The create_carton_gs1128_labels of this FulfillmentPlan.  # noqa: E501
        :type: str
        """

        self._create_carton_gs1128_labels = create_carton_gs1128_labels

    @property
    def create_line_item_each_gs1128_labels(self):
        """Gets the create_line_item_each_gs1128_labels of this FulfillmentPlan.  # noqa: E501


        :return: The create_line_item_each_gs1128_labels of this FulfillmentPlan.  # noqa: E501
        :rtype: str
        """
        return self._create_line_item_each_gs1128_labels

    @create_line_item_each_gs1128_labels.setter
    def create_line_item_each_gs1128_labels(self, create_line_item_each_gs1128_labels):
        """Sets the create_line_item_each_gs1128_labels of this FulfillmentPlan.


        :param create_line_item_each_gs1128_labels: The create_line_item_each_gs1128_labels of this FulfillmentPlan.  # noqa: E501
        :type: str
        """

        self._create_line_item_each_gs1128_labels = create_line_item_each_gs1128_labels

    @property
    def send_to_external_shipping_system(self):
        """Gets the send_to_external_shipping_system of this FulfillmentPlan.  # noqa: E501


        :return: The send_to_external_shipping_system of this FulfillmentPlan.  # noqa: E501
        :rtype: bool
        """
        return self._send_to_external_shipping_system

    @send_to_external_shipping_system.setter
    def send_to_external_shipping_system(self, send_to_external_shipping_system):
        """Sets the send_to_external_shipping_system of this FulfillmentPlan.


        :param send_to_external_shipping_system: The send_to_external_shipping_system of this FulfillmentPlan.  # noqa: E501
        :type: bool
        """
        if send_to_external_shipping_system is None:
            raise ValueError("Invalid value for `send_to_external_shipping_system`, must not be `None`")  # noqa: E501

        self._send_to_external_shipping_system = send_to_external_shipping_system

    @property
    def external_shipping_system_id(self):
        """Gets the external_shipping_system_id of this FulfillmentPlan.  # noqa: E501


        :return: The external_shipping_system_id of this FulfillmentPlan.  # noqa: E501
        :rtype: int
        """
        return self._external_shipping_system_id

    @external_shipping_system_id.setter
    def external_shipping_system_id(self, external_shipping_system_id):
        """Sets the external_shipping_system_id of this FulfillmentPlan.


        :param external_shipping_system_id: The external_shipping_system_id of this FulfillmentPlan.  # noqa: E501
        :type: int
        """

        self._external_shipping_system_id = external_shipping_system_id

    @property
    def custom_fields(self):
        """Gets the custom_fields of this FulfillmentPlan.  # noqa: E501


        :return: The custom_fields of this FulfillmentPlan.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this FulfillmentPlan.


        :param custom_fields: The custom_fields of this FulfillmentPlan.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FulfillmentPlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
