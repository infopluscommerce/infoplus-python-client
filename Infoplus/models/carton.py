# coding: utf-8

"""
    Infoplus API

    Infoplus API.  # noqa: E501

    OpenAPI spec version: beta
    Contact: api@infopluscommerce.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Carton(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'order_no': 'float',
        'carton_no': 'int',
        'carton_type_id': 'int',
        'carton_lpn': 'str',
        'weight_lbs': 'float',
        'layout_position': 'str',
        'lob_id': 'int',
        'custom_fields': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'order_no': 'orderNo',
        'carton_no': 'cartonNo',
        'carton_type_id': 'cartonTypeId',
        'carton_lpn': 'cartonLPN',
        'weight_lbs': 'weightLbs',
        'layout_position': 'layoutPosition',
        'lob_id': 'lobId',
        'custom_fields': 'customFields'
    }

    def __init__(self, id=None, order_no=None, carton_no=None, carton_type_id=None, carton_lpn=None, weight_lbs=None, layout_position=None, lob_id=None, custom_fields=None):  # noqa: E501
        """Carton - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._order_no = None
        self._carton_no = None
        self._carton_type_id = None
        self._carton_lpn = None
        self._weight_lbs = None
        self._layout_position = None
        self._lob_id = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.order_no = order_no
        self.carton_no = carton_no
        self.carton_type_id = carton_type_id
        if carton_lpn is not None:
            self.carton_lpn = carton_lpn
        if weight_lbs is not None:
            self.weight_lbs = weight_lbs
        if layout_position is not None:
            self.layout_position = layout_position
        self.lob_id = lob_id
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this Carton.  # noqa: E501


        :return: The id of this Carton.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Carton.


        :param id: The id of this Carton.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def order_no(self):
        """Gets the order_no of this Carton.  # noqa: E501


        :return: The order_no of this Carton.  # noqa: E501
        :rtype: float
        """
        return self._order_no

    @order_no.setter
    def order_no(self, order_no):
        """Sets the order_no of this Carton.


        :param order_no: The order_no of this Carton.  # noqa: E501
        :type: float
        """
        if order_no is None:
            raise ValueError("Invalid value for `order_no`, must not be `None`")  # noqa: E501

        self._order_no = order_no

    @property
    def carton_no(self):
        """Gets the carton_no of this Carton.  # noqa: E501


        :return: The carton_no of this Carton.  # noqa: E501
        :rtype: int
        """
        return self._carton_no

    @carton_no.setter
    def carton_no(self, carton_no):
        """Sets the carton_no of this Carton.


        :param carton_no: The carton_no of this Carton.  # noqa: E501
        :type: int
        """
        if carton_no is None:
            raise ValueError("Invalid value for `carton_no`, must not be `None`")  # noqa: E501

        self._carton_no = carton_no

    @property
    def carton_type_id(self):
        """Gets the carton_type_id of this Carton.  # noqa: E501


        :return: The carton_type_id of this Carton.  # noqa: E501
        :rtype: int
        """
        return self._carton_type_id

    @carton_type_id.setter
    def carton_type_id(self, carton_type_id):
        """Sets the carton_type_id of this Carton.


        :param carton_type_id: The carton_type_id of this Carton.  # noqa: E501
        :type: int
        """
        if carton_type_id is None:
            raise ValueError("Invalid value for `carton_type_id`, must not be `None`")  # noqa: E501

        self._carton_type_id = carton_type_id

    @property
    def carton_lpn(self):
        """Gets the carton_lpn of this Carton.  # noqa: E501


        :return: The carton_lpn of this Carton.  # noqa: E501
        :rtype: str
        """
        return self._carton_lpn

    @carton_lpn.setter
    def carton_lpn(self, carton_lpn):
        """Sets the carton_lpn of this Carton.


        :param carton_lpn: The carton_lpn of this Carton.  # noqa: E501
        :type: str
        """

        self._carton_lpn = carton_lpn

    @property
    def weight_lbs(self):
        """Gets the weight_lbs of this Carton.  # noqa: E501


        :return: The weight_lbs of this Carton.  # noqa: E501
        :rtype: float
        """
        return self._weight_lbs

    @weight_lbs.setter
    def weight_lbs(self, weight_lbs):
        """Sets the weight_lbs of this Carton.


        :param weight_lbs: The weight_lbs of this Carton.  # noqa: E501
        :type: float
        """

        self._weight_lbs = weight_lbs

    @property
    def layout_position(self):
        """Gets the layout_position of this Carton.  # noqa: E501


        :return: The layout_position of this Carton.  # noqa: E501
        :rtype: str
        """
        return self._layout_position

    @layout_position.setter
    def layout_position(self, layout_position):
        """Sets the layout_position of this Carton.


        :param layout_position: The layout_position of this Carton.  # noqa: E501
        :type: str
        """

        self._layout_position = layout_position

    @property
    def lob_id(self):
        """Gets the lob_id of this Carton.  # noqa: E501


        :return: The lob_id of this Carton.  # noqa: E501
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """Sets the lob_id of this Carton.


        :param lob_id: The lob_id of this Carton.  # noqa: E501
        :type: int
        """
        if lob_id is None:
            raise ValueError("Invalid value for `lob_id`, must not be `None`")  # noqa: E501

        self._lob_id = lob_id

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Carton.  # noqa: E501


        :return: The custom_fields of this Carton.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Carton.


        :param custom_fields: The custom_fields of this Carton.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Carton):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
