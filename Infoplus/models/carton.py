# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Carton(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Carton - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'order_no': 'float',
            'carton_no': 'int',
            'carton_type_id': 'int',
            'carton_lpn': 'str',
            'weight_lbs': 'float',
            'custom_fields': 'dict(str, object)'
        }

        self.attribute_map = {
            'id': 'id',
            'order_no': 'orderNo',
            'carton_no': 'cartonNo',
            'carton_type_id': 'cartonTypeId',
            'carton_lpn': 'cartonLPN',
            'weight_lbs': 'weightLbs',
            'custom_fields': 'customFields'
        }

        self._id = None
        self._order_no = None
        self._carton_no = None
        self._carton_type_id = None
        self._carton_lpn = None
        self._weight_lbs = None
        self._custom_fields = None

    @property
    def id(self):
        """
        Gets the id of this Carton.


        :return: The id of this Carton.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Carton.


        :param id: The id of this Carton.
        :type: int
        """
        self._id = id

    @property
    def order_no(self):
        """
        Gets the order_no of this Carton.


        :return: The order_no of this Carton.
        :rtype: float
        """
        return self._order_no

    @order_no.setter
    def order_no(self, order_no):
        """
        Sets the order_no of this Carton.


        :param order_no: The order_no of this Carton.
        :type: float
        """
        self._order_no = order_no

    @property
    def carton_no(self):
        """
        Gets the carton_no of this Carton.


        :return: The carton_no of this Carton.
        :rtype: int
        """
        return self._carton_no

    @carton_no.setter
    def carton_no(self, carton_no):
        """
        Sets the carton_no of this Carton.


        :param carton_no: The carton_no of this Carton.
        :type: int
        """
        self._carton_no = carton_no

    @property
    def carton_type_id(self):
        """
        Gets the carton_type_id of this Carton.


        :return: The carton_type_id of this Carton.
        :rtype: int
        """
        return self._carton_type_id

    @carton_type_id.setter
    def carton_type_id(self, carton_type_id):
        """
        Sets the carton_type_id of this Carton.


        :param carton_type_id: The carton_type_id of this Carton.
        :type: int
        """
        self._carton_type_id = carton_type_id

    @property
    def carton_lpn(self):
        """
        Gets the carton_lpn of this Carton.


        :return: The carton_lpn of this Carton.
        :rtype: str
        """
        return self._carton_lpn

    @carton_lpn.setter
    def carton_lpn(self, carton_lpn):
        """
        Sets the carton_lpn of this Carton.


        :param carton_lpn: The carton_lpn of this Carton.
        :type: str
        """
        self._carton_lpn = carton_lpn

    @property
    def weight_lbs(self):
        """
        Gets the weight_lbs of this Carton.


        :return: The weight_lbs of this Carton.
        :rtype: float
        """
        return self._weight_lbs

    @weight_lbs.setter
    def weight_lbs(self, weight_lbs):
        """
        Sets the weight_lbs of this Carton.


        :param weight_lbs: The weight_lbs of this Carton.
        :type: float
        """
        self._weight_lbs = weight_lbs

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this Carton.


        :return: The custom_fields of this Carton.
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this Carton.


        :param custom_fields: The custom_fields of this Carton.
        :type: dict(str, object)
        """
        self._custom_fields = custom_fields

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

