# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class OrderSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        OrderSource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'lob_id': 'int',
            'name': 'str',
            'create_date': 'datetime',
            'modify_date': 'datetime',
            'packing_notes': 'str',
            'require_cartonized_asn': 'bool',
            'require_gs1128_label': 'bool',
            'shipping_notes': 'str',
            'packing_slip_id': 'int',
            'order_confirmation_email_id': 'int',
            'shipment_confirmation_email_id': 'int',
            'custom_fields': 'dict(str, object)'
        }

        self.attribute_map = {
            'id': 'id',
            'lob_id': 'lobId',
            'name': 'name',
            'create_date': 'createDate',
            'modify_date': 'modifyDate',
            'packing_notes': 'packingNotes',
            'require_cartonized_asn': 'requireCartonizedASN',
            'require_gs1128_label': 'requireGS1128Label',
            'shipping_notes': 'shippingNotes',
            'packing_slip_id': 'packingSlipId',
            'order_confirmation_email_id': 'orderConfirmationEmailId',
            'shipment_confirmation_email_id': 'shipmentConfirmationEmailId',
            'custom_fields': 'customFields'
        }

        self._id = None
        self._lob_id = None
        self._name = None
        self._create_date = None
        self._modify_date = None
        self._packing_notes = None
        self._require_cartonized_asn = False
        self._require_gs1128_label = False
        self._shipping_notes = None
        self._packing_slip_id = None
        self._order_confirmation_email_id = None
        self._shipment_confirmation_email_id = None
        self._custom_fields = None

    @property
    def id(self):
        """
        Gets the id of this OrderSource.


        :return: The id of this OrderSource.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this OrderSource.


        :param id: The id of this OrderSource.
        :type: int
        """
        self._id = id

    @property
    def lob_id(self):
        """
        Gets the lob_id of this OrderSource.


        :return: The lob_id of this OrderSource.
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """
        Sets the lob_id of this OrderSource.


        :param lob_id: The lob_id of this OrderSource.
        :type: int
        """
        self._lob_id = lob_id

    @property
    def name(self):
        """
        Gets the name of this OrderSource.


        :return: The name of this OrderSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this OrderSource.


        :param name: The name of this OrderSource.
        :type: str
        """
        self._name = name

    @property
    def create_date(self):
        """
        Gets the create_date of this OrderSource.


        :return: The create_date of this OrderSource.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """
        Sets the create_date of this OrderSource.


        :param create_date: The create_date of this OrderSource.
        :type: datetime
        """
        self._create_date = create_date

    @property
    def modify_date(self):
        """
        Gets the modify_date of this OrderSource.


        :return: The modify_date of this OrderSource.
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """
        Sets the modify_date of this OrderSource.


        :param modify_date: The modify_date of this OrderSource.
        :type: datetime
        """
        self._modify_date = modify_date

    @property
    def packing_notes(self):
        """
        Gets the packing_notes of this OrderSource.


        :return: The packing_notes of this OrderSource.
        :rtype: str
        """
        return self._packing_notes

    @packing_notes.setter
    def packing_notes(self, packing_notes):
        """
        Sets the packing_notes of this OrderSource.


        :param packing_notes: The packing_notes of this OrderSource.
        :type: str
        """
        self._packing_notes = packing_notes

    @property
    def require_cartonized_asn(self):
        """
        Gets the require_cartonized_asn of this OrderSource.


        :return: The require_cartonized_asn of this OrderSource.
        :rtype: bool
        """
        return self._require_cartonized_asn

    @require_cartonized_asn.setter
    def require_cartonized_asn(self, require_cartonized_asn):
        """
        Sets the require_cartonized_asn of this OrderSource.


        :param require_cartonized_asn: The require_cartonized_asn of this OrderSource.
        :type: bool
        """
        self._require_cartonized_asn = require_cartonized_asn

    @property
    def require_gs1128_label(self):
        """
        Gets the require_gs1128_label of this OrderSource.


        :return: The require_gs1128_label of this OrderSource.
        :rtype: bool
        """
        return self._require_gs1128_label

    @require_gs1128_label.setter
    def require_gs1128_label(self, require_gs1128_label):
        """
        Sets the require_gs1128_label of this OrderSource.


        :param require_gs1128_label: The require_gs1128_label of this OrderSource.
        :type: bool
        """
        self._require_gs1128_label = require_gs1128_label

    @property
    def shipping_notes(self):
        """
        Gets the shipping_notes of this OrderSource.


        :return: The shipping_notes of this OrderSource.
        :rtype: str
        """
        return self._shipping_notes

    @shipping_notes.setter
    def shipping_notes(self, shipping_notes):
        """
        Sets the shipping_notes of this OrderSource.


        :param shipping_notes: The shipping_notes of this OrderSource.
        :type: str
        """
        self._shipping_notes = shipping_notes

    @property
    def packing_slip_id(self):
        """
        Gets the packing_slip_id of this OrderSource.


        :return: The packing_slip_id of this OrderSource.
        :rtype: int
        """
        return self._packing_slip_id

    @packing_slip_id.setter
    def packing_slip_id(self, packing_slip_id):
        """
        Sets the packing_slip_id of this OrderSource.


        :param packing_slip_id: The packing_slip_id of this OrderSource.
        :type: int
        """
        self._packing_slip_id = packing_slip_id

    @property
    def order_confirmation_email_id(self):
        """
        Gets the order_confirmation_email_id of this OrderSource.


        :return: The order_confirmation_email_id of this OrderSource.
        :rtype: int
        """
        return self._order_confirmation_email_id

    @order_confirmation_email_id.setter
    def order_confirmation_email_id(self, order_confirmation_email_id):
        """
        Sets the order_confirmation_email_id of this OrderSource.


        :param order_confirmation_email_id: The order_confirmation_email_id of this OrderSource.
        :type: int
        """
        self._order_confirmation_email_id = order_confirmation_email_id

    @property
    def shipment_confirmation_email_id(self):
        """
        Gets the shipment_confirmation_email_id of this OrderSource.


        :return: The shipment_confirmation_email_id of this OrderSource.
        :rtype: int
        """
        return self._shipment_confirmation_email_id

    @shipment_confirmation_email_id.setter
    def shipment_confirmation_email_id(self, shipment_confirmation_email_id):
        """
        Sets the shipment_confirmation_email_id of this OrderSource.


        :param shipment_confirmation_email_id: The shipment_confirmation_email_id of this OrderSource.
        :type: int
        """
        self._shipment_confirmation_email_id = shipment_confirmation_email_id

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this OrderSource.


        :return: The custom_fields of this OrderSource.
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this OrderSource.


        :param custom_fields: The custom_fields of this OrderSource.
        :type: dict(str, object)
        """
        self._custom_fields = custom_fields

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

