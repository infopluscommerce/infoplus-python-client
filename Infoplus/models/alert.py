# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Alert(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Alert - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'type': 'str',
            'level': 'str',
            'message': 'str',
            'link': 'str',
            'link_text': 'str',
            'create_date': 'datetime',
            'modify_date': 'datetime',
            'expiration_date': 'datetime',
            'acknowledge_date': 'datetime',
            'custom_fields': 'dict(str, object)'
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'level': 'level',
            'message': 'message',
            'link': 'link',
            'link_text': 'linkText',
            'create_date': 'createDate',
            'modify_date': 'modifyDate',
            'expiration_date': 'expirationDate',
            'acknowledge_date': 'acknowledgeDate',
            'custom_fields': 'customFields'
        }

        self._id = None
        self._type = None
        self._level = None
        self._message = None
        self._link = None
        self._link_text = None
        self._create_date = None
        self._modify_date = None
        self._expiration_date = None
        self._acknowledge_date = None
        self._custom_fields = None

    @property
    def id(self):
        """
        Gets the id of this Alert.


        :return: The id of this Alert.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Alert.


        :param id: The id of this Alert.
        :type: int
        """
        self._id = id

    @property
    def type(self):
        """
        Gets the type of this Alert.


        :return: The type of this Alert.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Alert.


        :param type: The type of this Alert.
        :type: str
        """
        self._type = type

    @property
    def level(self):
        """
        Gets the level of this Alert.


        :return: The level of this Alert.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """
        Sets the level of this Alert.


        :param level: The level of this Alert.
        :type: str
        """
        self._level = level

    @property
    def message(self):
        """
        Gets the message of this Alert.


        :return: The message of this Alert.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this Alert.


        :param message: The message of this Alert.
        :type: str
        """
        self._message = message

    @property
    def link(self):
        """
        Gets the link of this Alert.


        :return: The link of this Alert.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """
        Sets the link of this Alert.


        :param link: The link of this Alert.
        :type: str
        """
        self._link = link

    @property
    def link_text(self):
        """
        Gets the link_text of this Alert.


        :return: The link_text of this Alert.
        :rtype: str
        """
        return self._link_text

    @link_text.setter
    def link_text(self, link_text):
        """
        Sets the link_text of this Alert.


        :param link_text: The link_text of this Alert.
        :type: str
        """
        self._link_text = link_text

    @property
    def create_date(self):
        """
        Gets the create_date of this Alert.


        :return: The create_date of this Alert.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """
        Sets the create_date of this Alert.


        :param create_date: The create_date of this Alert.
        :type: datetime
        """
        self._create_date = create_date

    @property
    def modify_date(self):
        """
        Gets the modify_date of this Alert.


        :return: The modify_date of this Alert.
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """
        Sets the modify_date of this Alert.


        :param modify_date: The modify_date of this Alert.
        :type: datetime
        """
        self._modify_date = modify_date

    @property
    def expiration_date(self):
        """
        Gets the expiration_date of this Alert.


        :return: The expiration_date of this Alert.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """
        Sets the expiration_date of this Alert.


        :param expiration_date: The expiration_date of this Alert.
        :type: datetime
        """
        self._expiration_date = expiration_date

    @property
    def acknowledge_date(self):
        """
        Gets the acknowledge_date of this Alert.


        :return: The acknowledge_date of this Alert.
        :rtype: datetime
        """
        return self._acknowledge_date

    @acknowledge_date.setter
    def acknowledge_date(self, acknowledge_date):
        """
        Sets the acknowledge_date of this Alert.


        :param acknowledge_date: The acknowledge_date of this Alert.
        :type: datetime
        """
        self._acknowledge_date = acknowledge_date

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this Alert.


        :return: The custom_fields of this Alert.
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this Alert.


        :param custom_fields: The custom_fields of this Alert.
        :type: dict(str, object)
        """
        self._custom_fields = custom_fields

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

