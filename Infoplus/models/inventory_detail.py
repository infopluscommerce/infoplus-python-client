# coding: utf-8

"""
    Infoplus API

    Infoplus API.  # noqa: E501

    OpenAPI spec version: beta
    Contact: api@infopluscommerce.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InventoryDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'warehouse_location_id': 'int',
        'lob_id': 'int',
        'sku': 'str',
        'quantity': 'int',
        'outstanding_pick_quantity': 'int',
        'distribution_date': 'datetime',
        'expiration_date': 'datetime',
        'quantity_per_inner_pack': 'int',
        'quantity_per_case': 'int',
        'quantity_per_pallet': 'int',
        'estimated_inner_packs': 'int',
        'estimated_cases': 'int',
        'estimated_pallets': 'int',
        'units_per_wrap': 'int',
        'revision_date': 'str',
        'production_lot': 'str',
        'oldest_receipt_date': 'datetime',
        'create_date': 'datetime',
        'modify_date': 'datetime',
        'po_no': 'str',
        'custom_fields': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'warehouse_location_id': 'warehouseLocationId',
        'lob_id': 'lobId',
        'sku': 'sku',
        'quantity': 'quantity',
        'outstanding_pick_quantity': 'outstandingPickQuantity',
        'distribution_date': 'distributionDate',
        'expiration_date': 'expirationDate',
        'quantity_per_inner_pack': 'quantityPerInnerPack',
        'quantity_per_case': 'quantityPerCase',
        'quantity_per_pallet': 'quantityPerPallet',
        'estimated_inner_packs': 'estimatedInnerPacks',
        'estimated_cases': 'estimatedCases',
        'estimated_pallets': 'estimatedPallets',
        'units_per_wrap': 'unitsPerWrap',
        'revision_date': 'revisionDate',
        'production_lot': 'productionLot',
        'oldest_receipt_date': 'oldestReceiptDate',
        'create_date': 'createDate',
        'modify_date': 'modifyDate',
        'po_no': 'poNo',
        'custom_fields': 'customFields'
    }

    def __init__(self, id=None, warehouse_location_id=None, lob_id=None, sku=None, quantity=None, outstanding_pick_quantity=None, distribution_date=None, expiration_date=None, quantity_per_inner_pack=None, quantity_per_case=None, quantity_per_pallet=None, estimated_inner_packs=None, estimated_cases=None, estimated_pallets=None, units_per_wrap=None, revision_date=None, production_lot=None, oldest_receipt_date=None, create_date=None, modify_date=None, po_no=None, custom_fields=None):  # noqa: E501
        """InventoryDetail - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._warehouse_location_id = None
        self._lob_id = None
        self._sku = None
        self._quantity = None
        self._outstanding_pick_quantity = None
        self._distribution_date = None
        self._expiration_date = None
        self._quantity_per_inner_pack = None
        self._quantity_per_case = None
        self._quantity_per_pallet = None
        self._estimated_inner_packs = None
        self._estimated_cases = None
        self._estimated_pallets = None
        self._units_per_wrap = None
        self._revision_date = None
        self._production_lot = None
        self._oldest_receipt_date = None
        self._create_date = None
        self._modify_date = None
        self._po_no = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.warehouse_location_id = warehouse_location_id
        if lob_id is not None:
            self.lob_id = lob_id
        if sku is not None:
            self.sku = sku
        if quantity is not None:
            self.quantity = quantity
        if outstanding_pick_quantity is not None:
            self.outstanding_pick_quantity = outstanding_pick_quantity
        if distribution_date is not None:
            self.distribution_date = distribution_date
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if quantity_per_inner_pack is not None:
            self.quantity_per_inner_pack = quantity_per_inner_pack
        if quantity_per_case is not None:
            self.quantity_per_case = quantity_per_case
        if quantity_per_pallet is not None:
            self.quantity_per_pallet = quantity_per_pallet
        if estimated_inner_packs is not None:
            self.estimated_inner_packs = estimated_inner_packs
        if estimated_cases is not None:
            self.estimated_cases = estimated_cases
        if estimated_pallets is not None:
            self.estimated_pallets = estimated_pallets
        if units_per_wrap is not None:
            self.units_per_wrap = units_per_wrap
        if revision_date is not None:
            self.revision_date = revision_date
        if production_lot is not None:
            self.production_lot = production_lot
        if oldest_receipt_date is not None:
            self.oldest_receipt_date = oldest_receipt_date
        if create_date is not None:
            self.create_date = create_date
        if modify_date is not None:
            self.modify_date = modify_date
        if po_no is not None:
            self.po_no = po_no
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this InventoryDetail.  # noqa: E501


        :return: The id of this InventoryDetail.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InventoryDetail.


        :param id: The id of this InventoryDetail.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def warehouse_location_id(self):
        """Gets the warehouse_location_id of this InventoryDetail.  # noqa: E501


        :return: The warehouse_location_id of this InventoryDetail.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_location_id

    @warehouse_location_id.setter
    def warehouse_location_id(self, warehouse_location_id):
        """Sets the warehouse_location_id of this InventoryDetail.


        :param warehouse_location_id: The warehouse_location_id of this InventoryDetail.  # noqa: E501
        :type: int
        """
        if warehouse_location_id is None:
            raise ValueError("Invalid value for `warehouse_location_id`, must not be `None`")  # noqa: E501

        self._warehouse_location_id = warehouse_location_id

    @property
    def lob_id(self):
        """Gets the lob_id of this InventoryDetail.  # noqa: E501


        :return: The lob_id of this InventoryDetail.  # noqa: E501
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """Sets the lob_id of this InventoryDetail.


        :param lob_id: The lob_id of this InventoryDetail.  # noqa: E501
        :type: int
        """

        self._lob_id = lob_id

    @property
    def sku(self):
        """Gets the sku of this InventoryDetail.  # noqa: E501


        :return: The sku of this InventoryDetail.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this InventoryDetail.


        :param sku: The sku of this InventoryDetail.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def quantity(self):
        """Gets the quantity of this InventoryDetail.  # noqa: E501


        :return: The quantity of this InventoryDetail.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this InventoryDetail.


        :param quantity: The quantity of this InventoryDetail.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def outstanding_pick_quantity(self):
        """Gets the outstanding_pick_quantity of this InventoryDetail.  # noqa: E501


        :return: The outstanding_pick_quantity of this InventoryDetail.  # noqa: E501
        :rtype: int
        """
        return self._outstanding_pick_quantity

    @outstanding_pick_quantity.setter
    def outstanding_pick_quantity(self, outstanding_pick_quantity):
        """Sets the outstanding_pick_quantity of this InventoryDetail.


        :param outstanding_pick_quantity: The outstanding_pick_quantity of this InventoryDetail.  # noqa: E501
        :type: int
        """

        self._outstanding_pick_quantity = outstanding_pick_quantity

    @property
    def distribution_date(self):
        """Gets the distribution_date of this InventoryDetail.  # noqa: E501


        :return: The distribution_date of this InventoryDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._distribution_date

    @distribution_date.setter
    def distribution_date(self, distribution_date):
        """Sets the distribution_date of this InventoryDetail.


        :param distribution_date: The distribution_date of this InventoryDetail.  # noqa: E501
        :type: datetime
        """

        self._distribution_date = distribution_date

    @property
    def expiration_date(self):
        """Gets the expiration_date of this InventoryDetail.  # noqa: E501


        :return: The expiration_date of this InventoryDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this InventoryDetail.


        :param expiration_date: The expiration_date of this InventoryDetail.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def quantity_per_inner_pack(self):
        """Gets the quantity_per_inner_pack of this InventoryDetail.  # noqa: E501


        :return: The quantity_per_inner_pack of this InventoryDetail.  # noqa: E501
        :rtype: int
        """
        return self._quantity_per_inner_pack

    @quantity_per_inner_pack.setter
    def quantity_per_inner_pack(self, quantity_per_inner_pack):
        """Sets the quantity_per_inner_pack of this InventoryDetail.


        :param quantity_per_inner_pack: The quantity_per_inner_pack of this InventoryDetail.  # noqa: E501
        :type: int
        """

        self._quantity_per_inner_pack = quantity_per_inner_pack

    @property
    def quantity_per_case(self):
        """Gets the quantity_per_case of this InventoryDetail.  # noqa: E501


        :return: The quantity_per_case of this InventoryDetail.  # noqa: E501
        :rtype: int
        """
        return self._quantity_per_case

    @quantity_per_case.setter
    def quantity_per_case(self, quantity_per_case):
        """Sets the quantity_per_case of this InventoryDetail.


        :param quantity_per_case: The quantity_per_case of this InventoryDetail.  # noqa: E501
        :type: int
        """

        self._quantity_per_case = quantity_per_case

    @property
    def quantity_per_pallet(self):
        """Gets the quantity_per_pallet of this InventoryDetail.  # noqa: E501


        :return: The quantity_per_pallet of this InventoryDetail.  # noqa: E501
        :rtype: int
        """
        return self._quantity_per_pallet

    @quantity_per_pallet.setter
    def quantity_per_pallet(self, quantity_per_pallet):
        """Sets the quantity_per_pallet of this InventoryDetail.


        :param quantity_per_pallet: The quantity_per_pallet of this InventoryDetail.  # noqa: E501
        :type: int
        """

        self._quantity_per_pallet = quantity_per_pallet

    @property
    def estimated_inner_packs(self):
        """Gets the estimated_inner_packs of this InventoryDetail.  # noqa: E501


        :return: The estimated_inner_packs of this InventoryDetail.  # noqa: E501
        :rtype: int
        """
        return self._estimated_inner_packs

    @estimated_inner_packs.setter
    def estimated_inner_packs(self, estimated_inner_packs):
        """Sets the estimated_inner_packs of this InventoryDetail.


        :param estimated_inner_packs: The estimated_inner_packs of this InventoryDetail.  # noqa: E501
        :type: int
        """

        self._estimated_inner_packs = estimated_inner_packs

    @property
    def estimated_cases(self):
        """Gets the estimated_cases of this InventoryDetail.  # noqa: E501


        :return: The estimated_cases of this InventoryDetail.  # noqa: E501
        :rtype: int
        """
        return self._estimated_cases

    @estimated_cases.setter
    def estimated_cases(self, estimated_cases):
        """Sets the estimated_cases of this InventoryDetail.


        :param estimated_cases: The estimated_cases of this InventoryDetail.  # noqa: E501
        :type: int
        """

        self._estimated_cases = estimated_cases

    @property
    def estimated_pallets(self):
        """Gets the estimated_pallets of this InventoryDetail.  # noqa: E501


        :return: The estimated_pallets of this InventoryDetail.  # noqa: E501
        :rtype: int
        """
        return self._estimated_pallets

    @estimated_pallets.setter
    def estimated_pallets(self, estimated_pallets):
        """Sets the estimated_pallets of this InventoryDetail.


        :param estimated_pallets: The estimated_pallets of this InventoryDetail.  # noqa: E501
        :type: int
        """

        self._estimated_pallets = estimated_pallets

    @property
    def units_per_wrap(self):
        """Gets the units_per_wrap of this InventoryDetail.  # noqa: E501


        :return: The units_per_wrap of this InventoryDetail.  # noqa: E501
        :rtype: int
        """
        return self._units_per_wrap

    @units_per_wrap.setter
    def units_per_wrap(self, units_per_wrap):
        """Sets the units_per_wrap of this InventoryDetail.


        :param units_per_wrap: The units_per_wrap of this InventoryDetail.  # noqa: E501
        :type: int
        """

        self._units_per_wrap = units_per_wrap

    @property
    def revision_date(self):
        """Gets the revision_date of this InventoryDetail.  # noqa: E501


        :return: The revision_date of this InventoryDetail.  # noqa: E501
        :rtype: str
        """
        return self._revision_date

    @revision_date.setter
    def revision_date(self, revision_date):
        """Sets the revision_date of this InventoryDetail.


        :param revision_date: The revision_date of this InventoryDetail.  # noqa: E501
        :type: str
        """

        self._revision_date = revision_date

    @property
    def production_lot(self):
        """Gets the production_lot of this InventoryDetail.  # noqa: E501


        :return: The production_lot of this InventoryDetail.  # noqa: E501
        :rtype: str
        """
        return self._production_lot

    @production_lot.setter
    def production_lot(self, production_lot):
        """Sets the production_lot of this InventoryDetail.


        :param production_lot: The production_lot of this InventoryDetail.  # noqa: E501
        :type: str
        """

        self._production_lot = production_lot

    @property
    def oldest_receipt_date(self):
        """Gets the oldest_receipt_date of this InventoryDetail.  # noqa: E501


        :return: The oldest_receipt_date of this InventoryDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._oldest_receipt_date

    @oldest_receipt_date.setter
    def oldest_receipt_date(self, oldest_receipt_date):
        """Sets the oldest_receipt_date of this InventoryDetail.


        :param oldest_receipt_date: The oldest_receipt_date of this InventoryDetail.  # noqa: E501
        :type: datetime
        """

        self._oldest_receipt_date = oldest_receipt_date

    @property
    def create_date(self):
        """Gets the create_date of this InventoryDetail.  # noqa: E501


        :return: The create_date of this InventoryDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this InventoryDetail.


        :param create_date: The create_date of this InventoryDetail.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def modify_date(self):
        """Gets the modify_date of this InventoryDetail.  # noqa: E501


        :return: The modify_date of this InventoryDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """Sets the modify_date of this InventoryDetail.


        :param modify_date: The modify_date of this InventoryDetail.  # noqa: E501
        :type: datetime
        """

        self._modify_date = modify_date

    @property
    def po_no(self):
        """Gets the po_no of this InventoryDetail.  # noqa: E501


        :return: The po_no of this InventoryDetail.  # noqa: E501
        :rtype: str
        """
        return self._po_no

    @po_no.setter
    def po_no(self, po_no):
        """Sets the po_no of this InventoryDetail.


        :param po_no: The po_no of this InventoryDetail.  # noqa: E501
        :type: str
        """

        self._po_no = po_no

    @property
    def custom_fields(self):
        """Gets the custom_fields of this InventoryDetail.  # noqa: E501


        :return: The custom_fields of this InventoryDetail.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this InventoryDetail.


        :param custom_fields: The custom_fields of this InventoryDetail.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InventoryDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
