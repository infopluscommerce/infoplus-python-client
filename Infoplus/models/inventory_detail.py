# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class InventoryDetail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        InventoryDetail - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'warehouse_location_id': 'int',
            'quantity': 'int',
            'distribution_date': 'datetime',
            'units_per_case': 'int',
            'units_per_wrap': 'int',
            'revision_date': 'str',
            'production_lot': 'str',
            'oldest_receipt_date': 'datetime',
            'lob_id': 'int',
            'po_no': 'str',
            'custom_fields': 'dict(str, object)',
            'sku': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'warehouse_location_id': 'warehouseLocationId',
            'quantity': 'quantity',
            'distribution_date': 'distributionDate',
            'units_per_case': 'unitsPerCase',
            'units_per_wrap': 'unitsPerWrap',
            'revision_date': 'revisionDate',
            'production_lot': 'productionLot',
            'oldest_receipt_date': 'oldestReceiptDate',
            'lob_id': 'lobId',
            'po_no': 'poNo',
            'custom_fields': 'customFields',
            'sku': 'sku'
        }

        self._id = None
        self._warehouse_location_id = None
        self._quantity = None
        self._distribution_date = None
        self._units_per_case = None
        self._units_per_wrap = None
        self._revision_date = None
        self._production_lot = None
        self._oldest_receipt_date = None
        self._lob_id = None
        self._po_no = None
        self._custom_fields = None
        self._sku = None

    @property
    def id(self):
        """
        Gets the id of this InventoryDetail.


        :return: The id of this InventoryDetail.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this InventoryDetail.


        :param id: The id of this InventoryDetail.
        :type: int
        """
        self._id = id

    @property
    def warehouse_location_id(self):
        """
        Gets the warehouse_location_id of this InventoryDetail.


        :return: The warehouse_location_id of this InventoryDetail.
        :rtype: int
        """
        return self._warehouse_location_id

    @warehouse_location_id.setter
    def warehouse_location_id(self, warehouse_location_id):
        """
        Sets the warehouse_location_id of this InventoryDetail.


        :param warehouse_location_id: The warehouse_location_id of this InventoryDetail.
        :type: int
        """
        self._warehouse_location_id = warehouse_location_id

    @property
    def quantity(self):
        """
        Gets the quantity of this InventoryDetail.


        :return: The quantity of this InventoryDetail.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this InventoryDetail.


        :param quantity: The quantity of this InventoryDetail.
        :type: int
        """
        self._quantity = quantity

    @property
    def distribution_date(self):
        """
        Gets the distribution_date of this InventoryDetail.


        :return: The distribution_date of this InventoryDetail.
        :rtype: datetime
        """
        return self._distribution_date

    @distribution_date.setter
    def distribution_date(self, distribution_date):
        """
        Sets the distribution_date of this InventoryDetail.


        :param distribution_date: The distribution_date of this InventoryDetail.
        :type: datetime
        """
        self._distribution_date = distribution_date

    @property
    def units_per_case(self):
        """
        Gets the units_per_case of this InventoryDetail.


        :return: The units_per_case of this InventoryDetail.
        :rtype: int
        """
        return self._units_per_case

    @units_per_case.setter
    def units_per_case(self, units_per_case):
        """
        Sets the units_per_case of this InventoryDetail.


        :param units_per_case: The units_per_case of this InventoryDetail.
        :type: int
        """
        self._units_per_case = units_per_case

    @property
    def units_per_wrap(self):
        """
        Gets the units_per_wrap of this InventoryDetail.


        :return: The units_per_wrap of this InventoryDetail.
        :rtype: int
        """
        return self._units_per_wrap

    @units_per_wrap.setter
    def units_per_wrap(self, units_per_wrap):
        """
        Sets the units_per_wrap of this InventoryDetail.


        :param units_per_wrap: The units_per_wrap of this InventoryDetail.
        :type: int
        """
        self._units_per_wrap = units_per_wrap

    @property
    def revision_date(self):
        """
        Gets the revision_date of this InventoryDetail.


        :return: The revision_date of this InventoryDetail.
        :rtype: str
        """
        return self._revision_date

    @revision_date.setter
    def revision_date(self, revision_date):
        """
        Sets the revision_date of this InventoryDetail.


        :param revision_date: The revision_date of this InventoryDetail.
        :type: str
        """
        self._revision_date = revision_date

    @property
    def production_lot(self):
        """
        Gets the production_lot of this InventoryDetail.


        :return: The production_lot of this InventoryDetail.
        :rtype: str
        """
        return self._production_lot

    @production_lot.setter
    def production_lot(self, production_lot):
        """
        Sets the production_lot of this InventoryDetail.


        :param production_lot: The production_lot of this InventoryDetail.
        :type: str
        """
        self._production_lot = production_lot

    @property
    def oldest_receipt_date(self):
        """
        Gets the oldest_receipt_date of this InventoryDetail.


        :return: The oldest_receipt_date of this InventoryDetail.
        :rtype: datetime
        """
        return self._oldest_receipt_date

    @oldest_receipt_date.setter
    def oldest_receipt_date(self, oldest_receipt_date):
        """
        Sets the oldest_receipt_date of this InventoryDetail.


        :param oldest_receipt_date: The oldest_receipt_date of this InventoryDetail.
        :type: datetime
        """
        self._oldest_receipt_date = oldest_receipt_date

    @property
    def lob_id(self):
        """
        Gets the lob_id of this InventoryDetail.


        :return: The lob_id of this InventoryDetail.
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """
        Sets the lob_id of this InventoryDetail.


        :param lob_id: The lob_id of this InventoryDetail.
        :type: int
        """
        self._lob_id = lob_id

    @property
    def po_no(self):
        """
        Gets the po_no of this InventoryDetail.


        :return: The po_no of this InventoryDetail.
        :rtype: str
        """
        return self._po_no

    @po_no.setter
    def po_no(self, po_no):
        """
        Sets the po_no of this InventoryDetail.


        :param po_no: The po_no of this InventoryDetail.
        :type: str
        """
        self._po_no = po_no

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this InventoryDetail.


        :return: The custom_fields of this InventoryDetail.
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this InventoryDetail.


        :param custom_fields: The custom_fields of this InventoryDetail.
        :type: dict(str, object)
        """
        self._custom_fields = custom_fields

    @property
    def sku(self):
        """
        Gets the sku of this InventoryDetail.


        :return: The sku of this InventoryDetail.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this InventoryDetail.


        :param sku: The sku of this InventoryDetail.
        :type: str
        """
        self._sku = sku

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

