# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Asn(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Asn - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'create_date': 'datetime',
            'modify_date': 'datetime',
            'lob_id': 'int',
            'po_no': 'str',
            'vendor_id': 'int',
            'warehouse_id': 'int',
            'order_date': 'datetime',
            'type': 'str',
            'billing_name': 'str',
            'billing_attention': 'str',
            'billing_street1': 'str',
            'billing_street2': 'str',
            'billing_city': 'str',
            'billing_state': 'str',
            'billing_zip_code': 'str',
            'billing_phone': 'str',
            'ship_to_name': 'str',
            'ship_to_address': 'str',
            'ship_to_street1': 'str',
            'ship_to_street2': 'str',
            'ship_to_city': 'str',
            'ship_to_state': 'str',
            'ship_to_zip_code': 'str',
            'ship_to_phone': 'str',
            'corporate_name': 'str',
            'corporate_attention': 'str',
            'corporate_street1': 'str',
            'corporate_street2': 'str',
            'corporate_city': 'str',
            'corporate_state': 'str',
            'corporate_zip_code': 'str',
            'account_code': 'str',
            'buyer': 'int',
            'carrier': 'int',
            'conf_to': 'str',
            'fob': 'str',
            'printed': 'str',
            'project_no': 'int',
            'remarks': 'str',
            'request_by': 'str',
            'terms': 'str',
            'used_by': 'str',
            'line_items': 'list[ItemReceipt]',
            'status': 'str',
            'transfer_order_id': 'float',
            'custom_fields': 'dict(str, object)'
        }

        self.attribute_map = {
            'id': 'id',
            'create_date': 'createDate',
            'modify_date': 'modifyDate',
            'lob_id': 'lobId',
            'po_no': 'poNo',
            'vendor_id': 'vendorId',
            'warehouse_id': 'warehouseId',
            'order_date': 'orderDate',
            'type': 'type',
            'billing_name': 'billingName',
            'billing_attention': 'billingAttention',
            'billing_street1': 'billingStreet1',
            'billing_street2': 'billingStreet2',
            'billing_city': 'billingCity',
            'billing_state': 'billingState',
            'billing_zip_code': 'billingZipCode',
            'billing_phone': 'billingPhone',
            'ship_to_name': 'shipToName',
            'ship_to_address': 'shipToAddress',
            'ship_to_street1': 'shipToStreet1',
            'ship_to_street2': 'shipToStreet2',
            'ship_to_city': 'shipToCity',
            'ship_to_state': 'shipToState',
            'ship_to_zip_code': 'shipToZipCode',
            'ship_to_phone': 'shipToPhone',
            'corporate_name': 'corporateName',
            'corporate_attention': 'corporateAttention',
            'corporate_street1': 'corporateStreet1',
            'corporate_street2': 'corporateStreet2',
            'corporate_city': 'corporateCity',
            'corporate_state': 'corporateState',
            'corporate_zip_code': 'corporateZipCode',
            'account_code': 'accountCode',
            'buyer': 'buyer',
            'carrier': 'carrier',
            'conf_to': 'confTo',
            'fob': 'fob',
            'printed': 'printed',
            'project_no': 'projectNo',
            'remarks': 'remarks',
            'request_by': 'requestBy',
            'terms': 'terms',
            'used_by': 'usedBy',
            'line_items': 'lineItems',
            'status': 'status',
            'transfer_order_id': 'transferOrderId',
            'custom_fields': 'customFields'
        }

        self._id = None
        self._create_date = None
        self._modify_date = None
        self._lob_id = None
        self._po_no = None
        self._vendor_id = None
        self._warehouse_id = None
        self._order_date = None
        self._type = None
        self._billing_name = None
        self._billing_attention = None
        self._billing_street1 = None
        self._billing_street2 = None
        self._billing_city = None
        self._billing_state = None
        self._billing_zip_code = None
        self._billing_phone = None
        self._ship_to_name = None
        self._ship_to_address = None
        self._ship_to_street1 = None
        self._ship_to_street2 = None
        self._ship_to_city = None
        self._ship_to_state = None
        self._ship_to_zip_code = None
        self._ship_to_phone = None
        self._corporate_name = None
        self._corporate_attention = None
        self._corporate_street1 = None
        self._corporate_street2 = None
        self._corporate_city = None
        self._corporate_state = None
        self._corporate_zip_code = None
        self._account_code = None
        self._buyer = None
        self._carrier = None
        self._conf_to = None
        self._fob = None
        self._printed = None
        self._project_no = None
        self._remarks = None
        self._request_by = None
        self._terms = None
        self._used_by = None
        self._line_items = None
        self._status = None
        self._transfer_order_id = None
        self._custom_fields = None

    @property
    def id(self):
        """
        Gets the id of this Asn.


        :return: The id of this Asn.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Asn.


        :param id: The id of this Asn.
        :type: int
        """
        self._id = id

    @property
    def create_date(self):
        """
        Gets the create_date of this Asn.


        :return: The create_date of this Asn.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """
        Sets the create_date of this Asn.


        :param create_date: The create_date of this Asn.
        :type: datetime
        """
        self._create_date = create_date

    @property
    def modify_date(self):
        """
        Gets the modify_date of this Asn.


        :return: The modify_date of this Asn.
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """
        Sets the modify_date of this Asn.


        :param modify_date: The modify_date of this Asn.
        :type: datetime
        """
        self._modify_date = modify_date

    @property
    def lob_id(self):
        """
        Gets the lob_id of this Asn.


        :return: The lob_id of this Asn.
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """
        Sets the lob_id of this Asn.


        :param lob_id: The lob_id of this Asn.
        :type: int
        """
        self._lob_id = lob_id

    @property
    def po_no(self):
        """
        Gets the po_no of this Asn.


        :return: The po_no of this Asn.
        :rtype: str
        """
        return self._po_no

    @po_no.setter
    def po_no(self, po_no):
        """
        Sets the po_no of this Asn.


        :param po_no: The po_no of this Asn.
        :type: str
        """
        self._po_no = po_no

    @property
    def vendor_id(self):
        """
        Gets the vendor_id of this Asn.


        :return: The vendor_id of this Asn.
        :rtype: int
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """
        Sets the vendor_id of this Asn.


        :param vendor_id: The vendor_id of this Asn.
        :type: int
        """
        self._vendor_id = vendor_id

    @property
    def warehouse_id(self):
        """
        Gets the warehouse_id of this Asn.


        :return: The warehouse_id of this Asn.
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """
        Sets the warehouse_id of this Asn.


        :param warehouse_id: The warehouse_id of this Asn.
        :type: int
        """
        self._warehouse_id = warehouse_id

    @property
    def order_date(self):
        """
        Gets the order_date of this Asn.


        :return: The order_date of this Asn.
        :rtype: datetime
        """
        return self._order_date

    @order_date.setter
    def order_date(self, order_date):
        """
        Sets the order_date of this Asn.


        :param order_date: The order_date of this Asn.
        :type: datetime
        """
        self._order_date = order_date

    @property
    def type(self):
        """
        Gets the type of this Asn.


        :return: The type of this Asn.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Asn.


        :param type: The type of this Asn.
        :type: str
        """
        self._type = type

    @property
    def billing_name(self):
        """
        Gets the billing_name of this Asn.


        :return: The billing_name of this Asn.
        :rtype: str
        """
        return self._billing_name

    @billing_name.setter
    def billing_name(self, billing_name):
        """
        Sets the billing_name of this Asn.


        :param billing_name: The billing_name of this Asn.
        :type: str
        """
        self._billing_name = billing_name

    @property
    def billing_attention(self):
        """
        Gets the billing_attention of this Asn.


        :return: The billing_attention of this Asn.
        :rtype: str
        """
        return self._billing_attention

    @billing_attention.setter
    def billing_attention(self, billing_attention):
        """
        Sets the billing_attention of this Asn.


        :param billing_attention: The billing_attention of this Asn.
        :type: str
        """
        self._billing_attention = billing_attention

    @property
    def billing_street1(self):
        """
        Gets the billing_street1 of this Asn.


        :return: The billing_street1 of this Asn.
        :rtype: str
        """
        return self._billing_street1

    @billing_street1.setter
    def billing_street1(self, billing_street1):
        """
        Sets the billing_street1 of this Asn.


        :param billing_street1: The billing_street1 of this Asn.
        :type: str
        """
        self._billing_street1 = billing_street1

    @property
    def billing_street2(self):
        """
        Gets the billing_street2 of this Asn.


        :return: The billing_street2 of this Asn.
        :rtype: str
        """
        return self._billing_street2

    @billing_street2.setter
    def billing_street2(self, billing_street2):
        """
        Sets the billing_street2 of this Asn.


        :param billing_street2: The billing_street2 of this Asn.
        :type: str
        """
        self._billing_street2 = billing_street2

    @property
    def billing_city(self):
        """
        Gets the billing_city of this Asn.


        :return: The billing_city of this Asn.
        :rtype: str
        """
        return self._billing_city

    @billing_city.setter
    def billing_city(self, billing_city):
        """
        Sets the billing_city of this Asn.


        :param billing_city: The billing_city of this Asn.
        :type: str
        """
        self._billing_city = billing_city

    @property
    def billing_state(self):
        """
        Gets the billing_state of this Asn.


        :return: The billing_state of this Asn.
        :rtype: str
        """
        return self._billing_state

    @billing_state.setter
    def billing_state(self, billing_state):
        """
        Sets the billing_state of this Asn.


        :param billing_state: The billing_state of this Asn.
        :type: str
        """
        self._billing_state = billing_state

    @property
    def billing_zip_code(self):
        """
        Gets the billing_zip_code of this Asn.


        :return: The billing_zip_code of this Asn.
        :rtype: str
        """
        return self._billing_zip_code

    @billing_zip_code.setter
    def billing_zip_code(self, billing_zip_code):
        """
        Sets the billing_zip_code of this Asn.


        :param billing_zip_code: The billing_zip_code of this Asn.
        :type: str
        """
        self._billing_zip_code = billing_zip_code

    @property
    def billing_phone(self):
        """
        Gets the billing_phone of this Asn.


        :return: The billing_phone of this Asn.
        :rtype: str
        """
        return self._billing_phone

    @billing_phone.setter
    def billing_phone(self, billing_phone):
        """
        Sets the billing_phone of this Asn.


        :param billing_phone: The billing_phone of this Asn.
        :type: str
        """
        self._billing_phone = billing_phone

    @property
    def ship_to_name(self):
        """
        Gets the ship_to_name of this Asn.


        :return: The ship_to_name of this Asn.
        :rtype: str
        """
        return self._ship_to_name

    @ship_to_name.setter
    def ship_to_name(self, ship_to_name):
        """
        Sets the ship_to_name of this Asn.


        :param ship_to_name: The ship_to_name of this Asn.
        :type: str
        """
        self._ship_to_name = ship_to_name

    @property
    def ship_to_address(self):
        """
        Gets the ship_to_address of this Asn.


        :return: The ship_to_address of this Asn.
        :rtype: str
        """
        return self._ship_to_address

    @ship_to_address.setter
    def ship_to_address(self, ship_to_address):
        """
        Sets the ship_to_address of this Asn.


        :param ship_to_address: The ship_to_address of this Asn.
        :type: str
        """
        self._ship_to_address = ship_to_address

    @property
    def ship_to_street1(self):
        """
        Gets the ship_to_street1 of this Asn.


        :return: The ship_to_street1 of this Asn.
        :rtype: str
        """
        return self._ship_to_street1

    @ship_to_street1.setter
    def ship_to_street1(self, ship_to_street1):
        """
        Sets the ship_to_street1 of this Asn.


        :param ship_to_street1: The ship_to_street1 of this Asn.
        :type: str
        """
        self._ship_to_street1 = ship_to_street1

    @property
    def ship_to_street2(self):
        """
        Gets the ship_to_street2 of this Asn.


        :return: The ship_to_street2 of this Asn.
        :rtype: str
        """
        return self._ship_to_street2

    @ship_to_street2.setter
    def ship_to_street2(self, ship_to_street2):
        """
        Sets the ship_to_street2 of this Asn.


        :param ship_to_street2: The ship_to_street2 of this Asn.
        :type: str
        """
        self._ship_to_street2 = ship_to_street2

    @property
    def ship_to_city(self):
        """
        Gets the ship_to_city of this Asn.


        :return: The ship_to_city of this Asn.
        :rtype: str
        """
        return self._ship_to_city

    @ship_to_city.setter
    def ship_to_city(self, ship_to_city):
        """
        Sets the ship_to_city of this Asn.


        :param ship_to_city: The ship_to_city of this Asn.
        :type: str
        """
        self._ship_to_city = ship_to_city

    @property
    def ship_to_state(self):
        """
        Gets the ship_to_state of this Asn.


        :return: The ship_to_state of this Asn.
        :rtype: str
        """
        return self._ship_to_state

    @ship_to_state.setter
    def ship_to_state(self, ship_to_state):
        """
        Sets the ship_to_state of this Asn.


        :param ship_to_state: The ship_to_state of this Asn.
        :type: str
        """
        self._ship_to_state = ship_to_state

    @property
    def ship_to_zip_code(self):
        """
        Gets the ship_to_zip_code of this Asn.


        :return: The ship_to_zip_code of this Asn.
        :rtype: str
        """
        return self._ship_to_zip_code

    @ship_to_zip_code.setter
    def ship_to_zip_code(self, ship_to_zip_code):
        """
        Sets the ship_to_zip_code of this Asn.


        :param ship_to_zip_code: The ship_to_zip_code of this Asn.
        :type: str
        """
        self._ship_to_zip_code = ship_to_zip_code

    @property
    def ship_to_phone(self):
        """
        Gets the ship_to_phone of this Asn.


        :return: The ship_to_phone of this Asn.
        :rtype: str
        """
        return self._ship_to_phone

    @ship_to_phone.setter
    def ship_to_phone(self, ship_to_phone):
        """
        Sets the ship_to_phone of this Asn.


        :param ship_to_phone: The ship_to_phone of this Asn.
        :type: str
        """
        self._ship_to_phone = ship_to_phone

    @property
    def corporate_name(self):
        """
        Gets the corporate_name of this Asn.


        :return: The corporate_name of this Asn.
        :rtype: str
        """
        return self._corporate_name

    @corporate_name.setter
    def corporate_name(self, corporate_name):
        """
        Sets the corporate_name of this Asn.


        :param corporate_name: The corporate_name of this Asn.
        :type: str
        """
        self._corporate_name = corporate_name

    @property
    def corporate_attention(self):
        """
        Gets the corporate_attention of this Asn.


        :return: The corporate_attention of this Asn.
        :rtype: str
        """
        return self._corporate_attention

    @corporate_attention.setter
    def corporate_attention(self, corporate_attention):
        """
        Sets the corporate_attention of this Asn.


        :param corporate_attention: The corporate_attention of this Asn.
        :type: str
        """
        self._corporate_attention = corporate_attention

    @property
    def corporate_street1(self):
        """
        Gets the corporate_street1 of this Asn.


        :return: The corporate_street1 of this Asn.
        :rtype: str
        """
        return self._corporate_street1

    @corporate_street1.setter
    def corporate_street1(self, corporate_street1):
        """
        Sets the corporate_street1 of this Asn.


        :param corporate_street1: The corporate_street1 of this Asn.
        :type: str
        """
        self._corporate_street1 = corporate_street1

    @property
    def corporate_street2(self):
        """
        Gets the corporate_street2 of this Asn.


        :return: The corporate_street2 of this Asn.
        :rtype: str
        """
        return self._corporate_street2

    @corporate_street2.setter
    def corporate_street2(self, corporate_street2):
        """
        Sets the corporate_street2 of this Asn.


        :param corporate_street2: The corporate_street2 of this Asn.
        :type: str
        """
        self._corporate_street2 = corporate_street2

    @property
    def corporate_city(self):
        """
        Gets the corporate_city of this Asn.


        :return: The corporate_city of this Asn.
        :rtype: str
        """
        return self._corporate_city

    @corporate_city.setter
    def corporate_city(self, corporate_city):
        """
        Sets the corporate_city of this Asn.


        :param corporate_city: The corporate_city of this Asn.
        :type: str
        """
        self._corporate_city = corporate_city

    @property
    def corporate_state(self):
        """
        Gets the corporate_state of this Asn.


        :return: The corporate_state of this Asn.
        :rtype: str
        """
        return self._corporate_state

    @corporate_state.setter
    def corporate_state(self, corporate_state):
        """
        Sets the corporate_state of this Asn.


        :param corporate_state: The corporate_state of this Asn.
        :type: str
        """
        self._corporate_state = corporate_state

    @property
    def corporate_zip_code(self):
        """
        Gets the corporate_zip_code of this Asn.


        :return: The corporate_zip_code of this Asn.
        :rtype: str
        """
        return self._corporate_zip_code

    @corporate_zip_code.setter
    def corporate_zip_code(self, corporate_zip_code):
        """
        Sets the corporate_zip_code of this Asn.


        :param corporate_zip_code: The corporate_zip_code of this Asn.
        :type: str
        """
        self._corporate_zip_code = corporate_zip_code

    @property
    def account_code(self):
        """
        Gets the account_code of this Asn.


        :return: The account_code of this Asn.
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """
        Sets the account_code of this Asn.


        :param account_code: The account_code of this Asn.
        :type: str
        """
        self._account_code = account_code

    @property
    def buyer(self):
        """
        Gets the buyer of this Asn.


        :return: The buyer of this Asn.
        :rtype: int
        """
        return self._buyer

    @buyer.setter
    def buyer(self, buyer):
        """
        Sets the buyer of this Asn.


        :param buyer: The buyer of this Asn.
        :type: int
        """
        self._buyer = buyer

    @property
    def carrier(self):
        """
        Gets the carrier of this Asn.


        :return: The carrier of this Asn.
        :rtype: int
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """
        Sets the carrier of this Asn.


        :param carrier: The carrier of this Asn.
        :type: int
        """
        self._carrier = carrier

    @property
    def conf_to(self):
        """
        Gets the conf_to of this Asn.


        :return: The conf_to of this Asn.
        :rtype: str
        """
        return self._conf_to

    @conf_to.setter
    def conf_to(self, conf_to):
        """
        Sets the conf_to of this Asn.


        :param conf_to: The conf_to of this Asn.
        :type: str
        """
        self._conf_to = conf_to

    @property
    def fob(self):
        """
        Gets the fob of this Asn.


        :return: The fob of this Asn.
        :rtype: str
        """
        return self._fob

    @fob.setter
    def fob(self, fob):
        """
        Sets the fob of this Asn.


        :param fob: The fob of this Asn.
        :type: str
        """
        self._fob = fob

    @property
    def printed(self):
        """
        Gets the printed of this Asn.


        :return: The printed of this Asn.
        :rtype: str
        """
        return self._printed

    @printed.setter
    def printed(self, printed):
        """
        Sets the printed of this Asn.


        :param printed: The printed of this Asn.
        :type: str
        """
        self._printed = printed

    @property
    def project_no(self):
        """
        Gets the project_no of this Asn.


        :return: The project_no of this Asn.
        :rtype: int
        """
        return self._project_no

    @project_no.setter
    def project_no(self, project_no):
        """
        Sets the project_no of this Asn.


        :param project_no: The project_no of this Asn.
        :type: int
        """
        self._project_no = project_no

    @property
    def remarks(self):
        """
        Gets the remarks of this Asn.


        :return: The remarks of this Asn.
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """
        Sets the remarks of this Asn.


        :param remarks: The remarks of this Asn.
        :type: str
        """
        self._remarks = remarks

    @property
    def request_by(self):
        """
        Gets the request_by of this Asn.


        :return: The request_by of this Asn.
        :rtype: str
        """
        return self._request_by

    @request_by.setter
    def request_by(self, request_by):
        """
        Sets the request_by of this Asn.


        :param request_by: The request_by of this Asn.
        :type: str
        """
        self._request_by = request_by

    @property
    def terms(self):
        """
        Gets the terms of this Asn.


        :return: The terms of this Asn.
        :rtype: str
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """
        Sets the terms of this Asn.


        :param terms: The terms of this Asn.
        :type: str
        """
        self._terms = terms

    @property
    def used_by(self):
        """
        Gets the used_by of this Asn.


        :return: The used_by of this Asn.
        :rtype: str
        """
        return self._used_by

    @used_by.setter
    def used_by(self, used_by):
        """
        Sets the used_by of this Asn.


        :param used_by: The used_by of this Asn.
        :type: str
        """
        self._used_by = used_by

    @property
    def line_items(self):
        """
        Gets the line_items of this Asn.


        :return: The line_items of this Asn.
        :rtype: list[ItemReceipt]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """
        Sets the line_items of this Asn.


        :param line_items: The line_items of this Asn.
        :type: list[ItemReceipt]
        """
        self._line_items = line_items

    @property
    def status(self):
        """
        Gets the status of this Asn.


        :return: The status of this Asn.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Asn.


        :param status: The status of this Asn.
        :type: str
        """
        self._status = status

    @property
    def transfer_order_id(self):
        """
        Gets the transfer_order_id of this Asn.


        :return: The transfer_order_id of this Asn.
        :rtype: float
        """
        return self._transfer_order_id

    @transfer_order_id.setter
    def transfer_order_id(self, transfer_order_id):
        """
        Sets the transfer_order_id of this Asn.


        :param transfer_order_id: The transfer_order_id of this Asn.
        :type: float
        """
        self._transfer_order_id = transfer_order_id

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this Asn.


        :return: The custom_fields of this Asn.
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this Asn.


        :param custom_fields: The custom_fields of this Asn.
        :type: dict(str, object)
        """
        self._custom_fields = custom_fields

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

