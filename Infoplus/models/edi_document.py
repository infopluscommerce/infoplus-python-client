# coding: utf-8

"""
    Infoplus API

    Infoplus API.  # noqa: E501

    OpenAPI spec version: beta
    Contact: api@infopluscommerce.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EdiDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'edi_connection_id': 'int',
        'as2_partner_id': 'int',
        'lob_id': 'int',
        'transaction_type': 'str',
        'direction': 'str',
        'document_type_id': 'int',
        'status': 'str',
        'interchange_index': 'int',
        'group_index': 'int',
        'transaction_index': 'int',
        'body': 'str',
        'json_body': 'str',
        'create_date': 'datetime',
        'modify_date': 'datetime',
        'custom_fields': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'edi_connection_id': 'ediConnectionId',
        'as2_partner_id': 'as2PartnerId',
        'lob_id': 'lobId',
        'transaction_type': 'transactionType',
        'direction': 'direction',
        'document_type_id': 'documentTypeId',
        'status': 'status',
        'interchange_index': 'interchangeIndex',
        'group_index': 'groupIndex',
        'transaction_index': 'transactionIndex',
        'body': 'body',
        'json_body': 'jsonBody',
        'create_date': 'createDate',
        'modify_date': 'modifyDate',
        'custom_fields': 'customFields'
    }

    def __init__(self, id=None, edi_connection_id=None, as2_partner_id=None, lob_id=None, transaction_type=None, direction=None, document_type_id=None, status=None, interchange_index=None, group_index=None, transaction_index=None, body=None, json_body=None, create_date=None, modify_date=None, custom_fields=None):  # noqa: E501
        """EdiDocument - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._edi_connection_id = None
        self._as2_partner_id = None
        self._lob_id = None
        self._transaction_type = None
        self._direction = None
        self._document_type_id = None
        self._status = None
        self._interchange_index = None
        self._group_index = None
        self._transaction_index = None
        self._body = None
        self._json_body = None
        self._create_date = None
        self._modify_date = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.edi_connection_id = edi_connection_id
        self.as2_partner_id = as2_partner_id
        if lob_id is not None:
            self.lob_id = lob_id
        self.transaction_type = transaction_type
        self.direction = direction
        self.document_type_id = document_type_id
        self.status = status
        if interchange_index is not None:
            self.interchange_index = interchange_index
        if group_index is not None:
            self.group_index = group_index
        if transaction_index is not None:
            self.transaction_index = transaction_index
        self.body = body
        self.json_body = json_body
        if create_date is not None:
            self.create_date = create_date
        if modify_date is not None:
            self.modify_date = modify_date
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this EdiDocument.  # noqa: E501


        :return: The id of this EdiDocument.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdiDocument.


        :param id: The id of this EdiDocument.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def edi_connection_id(self):
        """Gets the edi_connection_id of this EdiDocument.  # noqa: E501


        :return: The edi_connection_id of this EdiDocument.  # noqa: E501
        :rtype: int
        """
        return self._edi_connection_id

    @edi_connection_id.setter
    def edi_connection_id(self, edi_connection_id):
        """Sets the edi_connection_id of this EdiDocument.


        :param edi_connection_id: The edi_connection_id of this EdiDocument.  # noqa: E501
        :type: int
        """
        if edi_connection_id is None:
            raise ValueError("Invalid value for `edi_connection_id`, must not be `None`")  # noqa: E501

        self._edi_connection_id = edi_connection_id

    @property
    def as2_partner_id(self):
        """Gets the as2_partner_id of this EdiDocument.  # noqa: E501


        :return: The as2_partner_id of this EdiDocument.  # noqa: E501
        :rtype: int
        """
        return self._as2_partner_id

    @as2_partner_id.setter
    def as2_partner_id(self, as2_partner_id):
        """Sets the as2_partner_id of this EdiDocument.


        :param as2_partner_id: The as2_partner_id of this EdiDocument.  # noqa: E501
        :type: int
        """
        if as2_partner_id is None:
            raise ValueError("Invalid value for `as2_partner_id`, must not be `None`")  # noqa: E501

        self._as2_partner_id = as2_partner_id

    @property
    def lob_id(self):
        """Gets the lob_id of this EdiDocument.  # noqa: E501


        :return: The lob_id of this EdiDocument.  # noqa: E501
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """Sets the lob_id of this EdiDocument.


        :param lob_id: The lob_id of this EdiDocument.  # noqa: E501
        :type: int
        """

        self._lob_id = lob_id

    @property
    def transaction_type(self):
        """Gets the transaction_type of this EdiDocument.  # noqa: E501


        :return: The transaction_type of this EdiDocument.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this EdiDocument.


        :param transaction_type: The transaction_type of this EdiDocument.  # noqa: E501
        :type: str
        """
        if transaction_type is None:
            raise ValueError("Invalid value for `transaction_type`, must not be `None`")  # noqa: E501

        self._transaction_type = transaction_type

    @property
    def direction(self):
        """Gets the direction of this EdiDocument.  # noqa: E501


        :return: The direction of this EdiDocument.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this EdiDocument.


        :param direction: The direction of this EdiDocument.  # noqa: E501
        :type: str
        """
        if direction is None:
            raise ValueError("Invalid value for `direction`, must not be `None`")  # noqa: E501

        self._direction = direction

    @property
    def document_type_id(self):
        """Gets the document_type_id of this EdiDocument.  # noqa: E501


        :return: The document_type_id of this EdiDocument.  # noqa: E501
        :rtype: int
        """
        return self._document_type_id

    @document_type_id.setter
    def document_type_id(self, document_type_id):
        """Sets the document_type_id of this EdiDocument.


        :param document_type_id: The document_type_id of this EdiDocument.  # noqa: E501
        :type: int
        """
        if document_type_id is None:
            raise ValueError("Invalid value for `document_type_id`, must not be `None`")  # noqa: E501

        self._document_type_id = document_type_id

    @property
    def status(self):
        """Gets the status of this EdiDocument.  # noqa: E501


        :return: The status of this EdiDocument.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EdiDocument.


        :param status: The status of this EdiDocument.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def interchange_index(self):
        """Gets the interchange_index of this EdiDocument.  # noqa: E501


        :return: The interchange_index of this EdiDocument.  # noqa: E501
        :rtype: int
        """
        return self._interchange_index

    @interchange_index.setter
    def interchange_index(self, interchange_index):
        """Sets the interchange_index of this EdiDocument.


        :param interchange_index: The interchange_index of this EdiDocument.  # noqa: E501
        :type: int
        """

        self._interchange_index = interchange_index

    @property
    def group_index(self):
        """Gets the group_index of this EdiDocument.  # noqa: E501


        :return: The group_index of this EdiDocument.  # noqa: E501
        :rtype: int
        """
        return self._group_index

    @group_index.setter
    def group_index(self, group_index):
        """Sets the group_index of this EdiDocument.


        :param group_index: The group_index of this EdiDocument.  # noqa: E501
        :type: int
        """

        self._group_index = group_index

    @property
    def transaction_index(self):
        """Gets the transaction_index of this EdiDocument.  # noqa: E501


        :return: The transaction_index of this EdiDocument.  # noqa: E501
        :rtype: int
        """
        return self._transaction_index

    @transaction_index.setter
    def transaction_index(self, transaction_index):
        """Sets the transaction_index of this EdiDocument.


        :param transaction_index: The transaction_index of this EdiDocument.  # noqa: E501
        :type: int
        """

        self._transaction_index = transaction_index

    @property
    def body(self):
        """Gets the body of this EdiDocument.  # noqa: E501


        :return: The body of this EdiDocument.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this EdiDocument.


        :param body: The body of this EdiDocument.  # noqa: E501
        :type: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def json_body(self):
        """Gets the json_body of this EdiDocument.  # noqa: E501


        :return: The json_body of this EdiDocument.  # noqa: E501
        :rtype: str
        """
        return self._json_body

    @json_body.setter
    def json_body(self, json_body):
        """Sets the json_body of this EdiDocument.


        :param json_body: The json_body of this EdiDocument.  # noqa: E501
        :type: str
        """
        if json_body is None:
            raise ValueError("Invalid value for `json_body`, must not be `None`")  # noqa: E501

        self._json_body = json_body

    @property
    def create_date(self):
        """Gets the create_date of this EdiDocument.  # noqa: E501


        :return: The create_date of this EdiDocument.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this EdiDocument.


        :param create_date: The create_date of this EdiDocument.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def modify_date(self):
        """Gets the modify_date of this EdiDocument.  # noqa: E501


        :return: The modify_date of this EdiDocument.  # noqa: E501
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """Sets the modify_date of this EdiDocument.


        :param modify_date: The modify_date of this EdiDocument.  # noqa: E501
        :type: datetime
        """

        self._modify_date = modify_date

    @property
    def custom_fields(self):
        """Gets the custom_fields of this EdiDocument.  # noqa: E501


        :return: The custom_fields of this EdiDocument.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this EdiDocument.


        :param custom_fields: The custom_fields of this EdiDocument.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdiDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
