# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class QuickReceipt(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        QuickReceipt - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'created_by': 'int',
            'create_date': 'datetime',
            'modify_date': 'datetime',
            'warehouse_id': 'int',
            'lob_id': 'int',
            'location_id': 'int',
            'quantity': 'int',
            'vendor_id': 'int',
            'carrier': 'str',
            'status': 'str',
            'unit_code': 'str',
            'wrap_code': 'str',
            'weight_per_wrap': 'float',
            'units_per_wrap': 'int',
            'units_per_case': 'int',
            'cases_per_pallet': 'int',
            'case_weight': 'float',
            'production_lot': 'str',
            'revision_date': 'str',
            'origin': 'str',
            'carton_length': 'float',
            'carton_width': 'float',
            'carton_height': 'float',
            'cost': 'float',
            'sell': 'float',
            'pricing_per': 'str',
            'generated_item_receipt_id': 'int',
            'generated_asn_id': 'int',
            'dock_date': 'datetime',
            'product_id_tag': 'str',
            'custom_fields': 'dict(str, object)',
            'sku': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'created_by': 'createdBy',
            'create_date': 'createDate',
            'modify_date': 'modifyDate',
            'warehouse_id': 'warehouseId',
            'lob_id': 'lobId',
            'location_id': 'locationId',
            'quantity': 'quantity',
            'vendor_id': 'vendorId',
            'carrier': 'carrier',
            'status': 'status',
            'unit_code': 'unitCode',
            'wrap_code': 'wrapCode',
            'weight_per_wrap': 'weightPerWrap',
            'units_per_wrap': 'unitsPerWrap',
            'units_per_case': 'unitsPerCase',
            'cases_per_pallet': 'casesPerPallet',
            'case_weight': 'caseWeight',
            'production_lot': 'productionLot',
            'revision_date': 'revisionDate',
            'origin': 'origin',
            'carton_length': 'cartonLength',
            'carton_width': 'cartonWidth',
            'carton_height': 'cartonHeight',
            'cost': 'cost',
            'sell': 'sell',
            'pricing_per': 'pricingPer',
            'generated_item_receipt_id': 'generatedItemReceiptId',
            'generated_asn_id': 'generatedASNId',
            'dock_date': 'dockDate',
            'product_id_tag': 'productIdTag',
            'custom_fields': 'customFields',
            'sku': 'sku'
        }

        self._id = None
        self._created_by = None
        self._create_date = None
        self._modify_date = None
        self._warehouse_id = None
        self._lob_id = None
        self._location_id = None
        self._quantity = None
        self._vendor_id = None
        self._carrier = None
        self._status = None
        self._unit_code = None
        self._wrap_code = None
        self._weight_per_wrap = None
        self._units_per_wrap = None
        self._units_per_case = None
        self._cases_per_pallet = None
        self._case_weight = None
        self._production_lot = None
        self._revision_date = None
        self._origin = None
        self._carton_length = None
        self._carton_width = None
        self._carton_height = None
        self._cost = None
        self._sell = None
        self._pricing_per = None
        self._generated_item_receipt_id = None
        self._generated_asn_id = None
        self._dock_date = None
        self._product_id_tag = None
        self._custom_fields = None
        self._sku = None

    @property
    def id(self):
        """
        Gets the id of this QuickReceipt.


        :return: The id of this QuickReceipt.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this QuickReceipt.


        :param id: The id of this QuickReceipt.
        :type: int
        """
        self._id = id

    @property
    def created_by(self):
        """
        Gets the created_by of this QuickReceipt.


        :return: The created_by of this QuickReceipt.
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Sets the created_by of this QuickReceipt.


        :param created_by: The created_by of this QuickReceipt.
        :type: int
        """
        self._created_by = created_by

    @property
    def create_date(self):
        """
        Gets the create_date of this QuickReceipt.


        :return: The create_date of this QuickReceipt.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """
        Sets the create_date of this QuickReceipt.


        :param create_date: The create_date of this QuickReceipt.
        :type: datetime
        """
        self._create_date = create_date

    @property
    def modify_date(self):
        """
        Gets the modify_date of this QuickReceipt.


        :return: The modify_date of this QuickReceipt.
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """
        Sets the modify_date of this QuickReceipt.


        :param modify_date: The modify_date of this QuickReceipt.
        :type: datetime
        """
        self._modify_date = modify_date

    @property
    def warehouse_id(self):
        """
        Gets the warehouse_id of this QuickReceipt.


        :return: The warehouse_id of this QuickReceipt.
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """
        Sets the warehouse_id of this QuickReceipt.


        :param warehouse_id: The warehouse_id of this QuickReceipt.
        :type: int
        """
        self._warehouse_id = warehouse_id

    @property
    def lob_id(self):
        """
        Gets the lob_id of this QuickReceipt.


        :return: The lob_id of this QuickReceipt.
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """
        Sets the lob_id of this QuickReceipt.


        :param lob_id: The lob_id of this QuickReceipt.
        :type: int
        """
        self._lob_id = lob_id

    @property
    def location_id(self):
        """
        Gets the location_id of this QuickReceipt.


        :return: The location_id of this QuickReceipt.
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """
        Sets the location_id of this QuickReceipt.


        :param location_id: The location_id of this QuickReceipt.
        :type: int
        """
        self._location_id = location_id

    @property
    def quantity(self):
        """
        Gets the quantity of this QuickReceipt.


        :return: The quantity of this QuickReceipt.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this QuickReceipt.


        :param quantity: The quantity of this QuickReceipt.
        :type: int
        """
        self._quantity = quantity

    @property
    def vendor_id(self):
        """
        Gets the vendor_id of this QuickReceipt.


        :return: The vendor_id of this QuickReceipt.
        :rtype: int
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """
        Sets the vendor_id of this QuickReceipt.


        :param vendor_id: The vendor_id of this QuickReceipt.
        :type: int
        """
        self._vendor_id = vendor_id

    @property
    def carrier(self):
        """
        Gets the carrier of this QuickReceipt.


        :return: The carrier of this QuickReceipt.
        :rtype: str
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """
        Sets the carrier of this QuickReceipt.


        :param carrier: The carrier of this QuickReceipt.
        :type: str
        """
        self._carrier = carrier

    @property
    def status(self):
        """
        Gets the status of this QuickReceipt.


        :return: The status of this QuickReceipt.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this QuickReceipt.


        :param status: The status of this QuickReceipt.
        :type: str
        """
        self._status = status

    @property
    def unit_code(self):
        """
        Gets the unit_code of this QuickReceipt.


        :return: The unit_code of this QuickReceipt.
        :rtype: str
        """
        return self._unit_code

    @unit_code.setter
    def unit_code(self, unit_code):
        """
        Sets the unit_code of this QuickReceipt.


        :param unit_code: The unit_code of this QuickReceipt.
        :type: str
        """
        self._unit_code = unit_code

    @property
    def wrap_code(self):
        """
        Gets the wrap_code of this QuickReceipt.


        :return: The wrap_code of this QuickReceipt.
        :rtype: str
        """
        return self._wrap_code

    @wrap_code.setter
    def wrap_code(self, wrap_code):
        """
        Sets the wrap_code of this QuickReceipt.


        :param wrap_code: The wrap_code of this QuickReceipt.
        :type: str
        """
        self._wrap_code = wrap_code

    @property
    def weight_per_wrap(self):
        """
        Gets the weight_per_wrap of this QuickReceipt.


        :return: The weight_per_wrap of this QuickReceipt.
        :rtype: float
        """
        return self._weight_per_wrap

    @weight_per_wrap.setter
    def weight_per_wrap(self, weight_per_wrap):
        """
        Sets the weight_per_wrap of this QuickReceipt.


        :param weight_per_wrap: The weight_per_wrap of this QuickReceipt.
        :type: float
        """
        self._weight_per_wrap = weight_per_wrap

    @property
    def units_per_wrap(self):
        """
        Gets the units_per_wrap of this QuickReceipt.


        :return: The units_per_wrap of this QuickReceipt.
        :rtype: int
        """
        return self._units_per_wrap

    @units_per_wrap.setter
    def units_per_wrap(self, units_per_wrap):
        """
        Sets the units_per_wrap of this QuickReceipt.


        :param units_per_wrap: The units_per_wrap of this QuickReceipt.
        :type: int
        """
        self._units_per_wrap = units_per_wrap

    @property
    def units_per_case(self):
        """
        Gets the units_per_case of this QuickReceipt.


        :return: The units_per_case of this QuickReceipt.
        :rtype: int
        """
        return self._units_per_case

    @units_per_case.setter
    def units_per_case(self, units_per_case):
        """
        Sets the units_per_case of this QuickReceipt.


        :param units_per_case: The units_per_case of this QuickReceipt.
        :type: int
        """
        self._units_per_case = units_per_case

    @property
    def cases_per_pallet(self):
        """
        Gets the cases_per_pallet of this QuickReceipt.


        :return: The cases_per_pallet of this QuickReceipt.
        :rtype: int
        """
        return self._cases_per_pallet

    @cases_per_pallet.setter
    def cases_per_pallet(self, cases_per_pallet):
        """
        Sets the cases_per_pallet of this QuickReceipt.


        :param cases_per_pallet: The cases_per_pallet of this QuickReceipt.
        :type: int
        """
        self._cases_per_pallet = cases_per_pallet

    @property
    def case_weight(self):
        """
        Gets the case_weight of this QuickReceipt.


        :return: The case_weight of this QuickReceipt.
        :rtype: float
        """
        return self._case_weight

    @case_weight.setter
    def case_weight(self, case_weight):
        """
        Sets the case_weight of this QuickReceipt.


        :param case_weight: The case_weight of this QuickReceipt.
        :type: float
        """
        self._case_weight = case_weight

    @property
    def production_lot(self):
        """
        Gets the production_lot of this QuickReceipt.


        :return: The production_lot of this QuickReceipt.
        :rtype: str
        """
        return self._production_lot

    @production_lot.setter
    def production_lot(self, production_lot):
        """
        Sets the production_lot of this QuickReceipt.


        :param production_lot: The production_lot of this QuickReceipt.
        :type: str
        """
        self._production_lot = production_lot

    @property
    def revision_date(self):
        """
        Gets the revision_date of this QuickReceipt.


        :return: The revision_date of this QuickReceipt.
        :rtype: str
        """
        return self._revision_date

    @revision_date.setter
    def revision_date(self, revision_date):
        """
        Sets the revision_date of this QuickReceipt.


        :param revision_date: The revision_date of this QuickReceipt.
        :type: str
        """
        self._revision_date = revision_date

    @property
    def origin(self):
        """
        Gets the origin of this QuickReceipt.


        :return: The origin of this QuickReceipt.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """
        Sets the origin of this QuickReceipt.


        :param origin: The origin of this QuickReceipt.
        :type: str
        """
        self._origin = origin

    @property
    def carton_length(self):
        """
        Gets the carton_length of this QuickReceipt.


        :return: The carton_length of this QuickReceipt.
        :rtype: float
        """
        return self._carton_length

    @carton_length.setter
    def carton_length(self, carton_length):
        """
        Sets the carton_length of this QuickReceipt.


        :param carton_length: The carton_length of this QuickReceipt.
        :type: float
        """
        self._carton_length = carton_length

    @property
    def carton_width(self):
        """
        Gets the carton_width of this QuickReceipt.


        :return: The carton_width of this QuickReceipt.
        :rtype: float
        """
        return self._carton_width

    @carton_width.setter
    def carton_width(self, carton_width):
        """
        Sets the carton_width of this QuickReceipt.


        :param carton_width: The carton_width of this QuickReceipt.
        :type: float
        """
        self._carton_width = carton_width

    @property
    def carton_height(self):
        """
        Gets the carton_height of this QuickReceipt.


        :return: The carton_height of this QuickReceipt.
        :rtype: float
        """
        return self._carton_height

    @carton_height.setter
    def carton_height(self, carton_height):
        """
        Sets the carton_height of this QuickReceipt.


        :param carton_height: The carton_height of this QuickReceipt.
        :type: float
        """
        self._carton_height = carton_height

    @property
    def cost(self):
        """
        Gets the cost of this QuickReceipt.


        :return: The cost of this QuickReceipt.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """
        Sets the cost of this QuickReceipt.


        :param cost: The cost of this QuickReceipt.
        :type: float
        """
        self._cost = cost

    @property
    def sell(self):
        """
        Gets the sell of this QuickReceipt.


        :return: The sell of this QuickReceipt.
        :rtype: float
        """
        return self._sell

    @sell.setter
    def sell(self, sell):
        """
        Sets the sell of this QuickReceipt.


        :param sell: The sell of this QuickReceipt.
        :type: float
        """
        self._sell = sell

    @property
    def pricing_per(self):
        """
        Gets the pricing_per of this QuickReceipt.


        :return: The pricing_per of this QuickReceipt.
        :rtype: str
        """
        return self._pricing_per

    @pricing_per.setter
    def pricing_per(self, pricing_per):
        """
        Sets the pricing_per of this QuickReceipt.


        :param pricing_per: The pricing_per of this QuickReceipt.
        :type: str
        """
        self._pricing_per = pricing_per

    @property
    def generated_item_receipt_id(self):
        """
        Gets the generated_item_receipt_id of this QuickReceipt.


        :return: The generated_item_receipt_id of this QuickReceipt.
        :rtype: int
        """
        return self._generated_item_receipt_id

    @generated_item_receipt_id.setter
    def generated_item_receipt_id(self, generated_item_receipt_id):
        """
        Sets the generated_item_receipt_id of this QuickReceipt.


        :param generated_item_receipt_id: The generated_item_receipt_id of this QuickReceipt.
        :type: int
        """
        self._generated_item_receipt_id = generated_item_receipt_id

    @property
    def generated_asn_id(self):
        """
        Gets the generated_asn_id of this QuickReceipt.


        :return: The generated_asn_id of this QuickReceipt.
        :rtype: int
        """
        return self._generated_asn_id

    @generated_asn_id.setter
    def generated_asn_id(self, generated_asn_id):
        """
        Sets the generated_asn_id of this QuickReceipt.


        :param generated_asn_id: The generated_asn_id of this QuickReceipt.
        :type: int
        """
        self._generated_asn_id = generated_asn_id

    @property
    def dock_date(self):
        """
        Gets the dock_date of this QuickReceipt.


        :return: The dock_date of this QuickReceipt.
        :rtype: datetime
        """
        return self._dock_date

    @dock_date.setter
    def dock_date(self, dock_date):
        """
        Sets the dock_date of this QuickReceipt.


        :param dock_date: The dock_date of this QuickReceipt.
        :type: datetime
        """
        self._dock_date = dock_date

    @property
    def product_id_tag(self):
        """
        Gets the product_id_tag of this QuickReceipt.


        :return: The product_id_tag of this QuickReceipt.
        :rtype: str
        """
        return self._product_id_tag

    @product_id_tag.setter
    def product_id_tag(self, product_id_tag):
        """
        Sets the product_id_tag of this QuickReceipt.


        :param product_id_tag: The product_id_tag of this QuickReceipt.
        :type: str
        """
        self._product_id_tag = product_id_tag

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this QuickReceipt.


        :return: The custom_fields of this QuickReceipt.
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this QuickReceipt.


        :param custom_fields: The custom_fields of this QuickReceipt.
        :type: dict(str, object)
        """
        self._custom_fields = custom_fields

    @property
    def sku(self):
        """
        Gets the sku of this QuickReceipt.


        :return: The sku of this QuickReceipt.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this QuickReceipt.


        :param sku: The sku of this QuickReceipt.
        :type: str
        """
        self._sku = sku

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

