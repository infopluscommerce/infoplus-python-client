# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ShoppingCartConnection(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ShoppingCartConnection - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'create_date': 'datetime',
            'modify_date': 'datetime',
            'client_id': 'int',
            'nonce': 'str',
            'lob_id': 'int',
            'order_source_id': 'int',
            'integration_partner_id': 'int',
            'connection_type': 'str',
            'item_filter_id': 'int',
            'infoplus_sku_field_to_map': 'str',
            'shopping_cart_sku_field_to_map': 'str',
            'name': 'str',
            'shopping_cart_store_url': 'str',
            'access_code': 'str',
            'access_token': 'str',
            'username': 'str',
            'password': 'str',
            'sync_orders': 'bool',
            'sync_inventory': 'bool',
            'sync_tracking_data': 'bool',
            'sync_inventory_levels_last_run_time': 'datetime',
            'custom_fields': 'dict(str, object)'
        }

        self.attribute_map = {
            'id': 'id',
            'create_date': 'createDate',
            'modify_date': 'modifyDate',
            'client_id': 'clientId',
            'nonce': 'nonce',
            'lob_id': 'lobId',
            'order_source_id': 'orderSourceId',
            'integration_partner_id': 'integrationPartnerId',
            'connection_type': 'connectionType',
            'item_filter_id': 'itemFilterId',
            'infoplus_sku_field_to_map': 'infoplusSKUFieldToMap',
            'shopping_cart_sku_field_to_map': 'shoppingCartSKUFieldToMap',
            'name': 'name',
            'shopping_cart_store_url': 'shoppingCartStoreURL',
            'access_code': 'accessCode',
            'access_token': 'accessToken',
            'username': 'username',
            'password': 'password',
            'sync_orders': 'syncOrders',
            'sync_inventory': 'syncInventory',
            'sync_tracking_data': 'syncTrackingData',
            'sync_inventory_levels_last_run_time': 'syncInventoryLevelsLastRunTime',
            'custom_fields': 'customFields'
        }

        self._id = None
        self._create_date = None
        self._modify_date = None
        self._client_id = None
        self._nonce = None
        self._lob_id = None
        self._order_source_id = None
        self._integration_partner_id = None
        self._connection_type = None
        self._item_filter_id = None
        self._infoplus_sku_field_to_map = None
        self._shopping_cart_sku_field_to_map = None
        self._name = None
        self._shopping_cart_store_url = None
        self._access_code = None
        self._access_token = None
        self._username = None
        self._password = None
        self._sync_orders = False
        self._sync_inventory = False
        self._sync_tracking_data = False
        self._sync_inventory_levels_last_run_time = None
        self._custom_fields = None

    @property
    def id(self):
        """
        Gets the id of this ShoppingCartConnection.


        :return: The id of this ShoppingCartConnection.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ShoppingCartConnection.


        :param id: The id of this ShoppingCartConnection.
        :type: int
        """
        self._id = id

    @property
    def create_date(self):
        """
        Gets the create_date of this ShoppingCartConnection.


        :return: The create_date of this ShoppingCartConnection.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """
        Sets the create_date of this ShoppingCartConnection.


        :param create_date: The create_date of this ShoppingCartConnection.
        :type: datetime
        """
        self._create_date = create_date

    @property
    def modify_date(self):
        """
        Gets the modify_date of this ShoppingCartConnection.


        :return: The modify_date of this ShoppingCartConnection.
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """
        Sets the modify_date of this ShoppingCartConnection.


        :param modify_date: The modify_date of this ShoppingCartConnection.
        :type: datetime
        """
        self._modify_date = modify_date

    @property
    def client_id(self):
        """
        Gets the client_id of this ShoppingCartConnection.


        :return: The client_id of this ShoppingCartConnection.
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this ShoppingCartConnection.


        :param client_id: The client_id of this ShoppingCartConnection.
        :type: int
        """
        self._client_id = client_id

    @property
    def nonce(self):
        """
        Gets the nonce of this ShoppingCartConnection.


        :return: The nonce of this ShoppingCartConnection.
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """
        Sets the nonce of this ShoppingCartConnection.


        :param nonce: The nonce of this ShoppingCartConnection.
        :type: str
        """
        self._nonce = nonce

    @property
    def lob_id(self):
        """
        Gets the lob_id of this ShoppingCartConnection.


        :return: The lob_id of this ShoppingCartConnection.
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """
        Sets the lob_id of this ShoppingCartConnection.


        :param lob_id: The lob_id of this ShoppingCartConnection.
        :type: int
        """
        self._lob_id = lob_id

    @property
    def order_source_id(self):
        """
        Gets the order_source_id of this ShoppingCartConnection.


        :return: The order_source_id of this ShoppingCartConnection.
        :rtype: int
        """
        return self._order_source_id

    @order_source_id.setter
    def order_source_id(self, order_source_id):
        """
        Sets the order_source_id of this ShoppingCartConnection.


        :param order_source_id: The order_source_id of this ShoppingCartConnection.
        :type: int
        """
        self._order_source_id = order_source_id

    @property
    def integration_partner_id(self):
        """
        Gets the integration_partner_id of this ShoppingCartConnection.


        :return: The integration_partner_id of this ShoppingCartConnection.
        :rtype: int
        """
        return self._integration_partner_id

    @integration_partner_id.setter
    def integration_partner_id(self, integration_partner_id):
        """
        Sets the integration_partner_id of this ShoppingCartConnection.


        :param integration_partner_id: The integration_partner_id of this ShoppingCartConnection.
        :type: int
        """
        self._integration_partner_id = integration_partner_id

    @property
    def connection_type(self):
        """
        Gets the connection_type of this ShoppingCartConnection.


        :return: The connection_type of this ShoppingCartConnection.
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """
        Sets the connection_type of this ShoppingCartConnection.


        :param connection_type: The connection_type of this ShoppingCartConnection.
        :type: str
        """
        self._connection_type = connection_type

    @property
    def item_filter_id(self):
        """
        Gets the item_filter_id of this ShoppingCartConnection.


        :return: The item_filter_id of this ShoppingCartConnection.
        :rtype: int
        """
        return self._item_filter_id

    @item_filter_id.setter
    def item_filter_id(self, item_filter_id):
        """
        Sets the item_filter_id of this ShoppingCartConnection.


        :param item_filter_id: The item_filter_id of this ShoppingCartConnection.
        :type: int
        """
        self._item_filter_id = item_filter_id

    @property
    def infoplus_sku_field_to_map(self):
        """
        Gets the infoplus_sku_field_to_map of this ShoppingCartConnection.


        :return: The infoplus_sku_field_to_map of this ShoppingCartConnection.
        :rtype: str
        """
        return self._infoplus_sku_field_to_map

    @infoplus_sku_field_to_map.setter
    def infoplus_sku_field_to_map(self, infoplus_sku_field_to_map):
        """
        Sets the infoplus_sku_field_to_map of this ShoppingCartConnection.


        :param infoplus_sku_field_to_map: The infoplus_sku_field_to_map of this ShoppingCartConnection.
        :type: str
        """
        self._infoplus_sku_field_to_map = infoplus_sku_field_to_map

    @property
    def shopping_cart_sku_field_to_map(self):
        """
        Gets the shopping_cart_sku_field_to_map of this ShoppingCartConnection.


        :return: The shopping_cart_sku_field_to_map of this ShoppingCartConnection.
        :rtype: str
        """
        return self._shopping_cart_sku_field_to_map

    @shopping_cart_sku_field_to_map.setter
    def shopping_cart_sku_field_to_map(self, shopping_cart_sku_field_to_map):
        """
        Sets the shopping_cart_sku_field_to_map of this ShoppingCartConnection.


        :param shopping_cart_sku_field_to_map: The shopping_cart_sku_field_to_map of this ShoppingCartConnection.
        :type: str
        """
        self._shopping_cart_sku_field_to_map = shopping_cart_sku_field_to_map

    @property
    def name(self):
        """
        Gets the name of this ShoppingCartConnection.


        :return: The name of this ShoppingCartConnection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ShoppingCartConnection.


        :param name: The name of this ShoppingCartConnection.
        :type: str
        """
        self._name = name

    @property
    def shopping_cart_store_url(self):
        """
        Gets the shopping_cart_store_url of this ShoppingCartConnection.


        :return: The shopping_cart_store_url of this ShoppingCartConnection.
        :rtype: str
        """
        return self._shopping_cart_store_url

    @shopping_cart_store_url.setter
    def shopping_cart_store_url(self, shopping_cart_store_url):
        """
        Sets the shopping_cart_store_url of this ShoppingCartConnection.


        :param shopping_cart_store_url: The shopping_cart_store_url of this ShoppingCartConnection.
        :type: str
        """
        self._shopping_cart_store_url = shopping_cart_store_url

    @property
    def access_code(self):
        """
        Gets the access_code of this ShoppingCartConnection.


        :return: The access_code of this ShoppingCartConnection.
        :rtype: str
        """
        return self._access_code

    @access_code.setter
    def access_code(self, access_code):
        """
        Sets the access_code of this ShoppingCartConnection.


        :param access_code: The access_code of this ShoppingCartConnection.
        :type: str
        """
        self._access_code = access_code

    @property
    def access_token(self):
        """
        Gets the access_token of this ShoppingCartConnection.


        :return: The access_token of this ShoppingCartConnection.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """
        Sets the access_token of this ShoppingCartConnection.


        :param access_token: The access_token of this ShoppingCartConnection.
        :type: str
        """
        self._access_token = access_token

    @property
    def username(self):
        """
        Gets the username of this ShoppingCartConnection.


        :return: The username of this ShoppingCartConnection.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this ShoppingCartConnection.


        :param username: The username of this ShoppingCartConnection.
        :type: str
        """
        self._username = username

    @property
    def password(self):
        """
        Gets the password of this ShoppingCartConnection.


        :return: The password of this ShoppingCartConnection.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this ShoppingCartConnection.


        :param password: The password of this ShoppingCartConnection.
        :type: str
        """
        self._password = password

    @property
    def sync_orders(self):
        """
        Gets the sync_orders of this ShoppingCartConnection.


        :return: The sync_orders of this ShoppingCartConnection.
        :rtype: bool
        """
        return self._sync_orders

    @sync_orders.setter
    def sync_orders(self, sync_orders):
        """
        Sets the sync_orders of this ShoppingCartConnection.


        :param sync_orders: The sync_orders of this ShoppingCartConnection.
        :type: bool
        """
        self._sync_orders = sync_orders

    @property
    def sync_inventory(self):
        """
        Gets the sync_inventory of this ShoppingCartConnection.


        :return: The sync_inventory of this ShoppingCartConnection.
        :rtype: bool
        """
        return self._sync_inventory

    @sync_inventory.setter
    def sync_inventory(self, sync_inventory):
        """
        Sets the sync_inventory of this ShoppingCartConnection.


        :param sync_inventory: The sync_inventory of this ShoppingCartConnection.
        :type: bool
        """
        self._sync_inventory = sync_inventory

    @property
    def sync_tracking_data(self):
        """
        Gets the sync_tracking_data of this ShoppingCartConnection.


        :return: The sync_tracking_data of this ShoppingCartConnection.
        :rtype: bool
        """
        return self._sync_tracking_data

    @sync_tracking_data.setter
    def sync_tracking_data(self, sync_tracking_data):
        """
        Sets the sync_tracking_data of this ShoppingCartConnection.


        :param sync_tracking_data: The sync_tracking_data of this ShoppingCartConnection.
        :type: bool
        """
        self._sync_tracking_data = sync_tracking_data

    @property
    def sync_inventory_levels_last_run_time(self):
        """
        Gets the sync_inventory_levels_last_run_time of this ShoppingCartConnection.


        :return: The sync_inventory_levels_last_run_time of this ShoppingCartConnection.
        :rtype: datetime
        """
        return self._sync_inventory_levels_last_run_time

    @sync_inventory_levels_last_run_time.setter
    def sync_inventory_levels_last_run_time(self, sync_inventory_levels_last_run_time):
        """
        Sets the sync_inventory_levels_last_run_time of this ShoppingCartConnection.


        :param sync_inventory_levels_last_run_time: The sync_inventory_levels_last_run_time of this ShoppingCartConnection.
        :type: datetime
        """
        self._sync_inventory_levels_last_run_time = sync_inventory_levels_last_run_time

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this ShoppingCartConnection.


        :return: The custom_fields of this ShoppingCartConnection.
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this ShoppingCartConnection.


        :param custom_fields: The custom_fields of this ShoppingCartConnection.
        :type: dict(str, object)
        """
        self._custom_fields = custom_fields

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

