# coding: utf-8

"""
    Infoplus API

    Infoplus API.  # noqa: E501

    OpenAPI spec version: beta
    Contact: api@infopluscommerce.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Infoplus.models.store import Store  # noqa: F401,E501
from Infoplus.models.warehouse import Warehouse  # noqa: F401,E501


class ShoppingCartConnection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'create_date': 'datetime',
        'modify_date': 'datetime',
        'client_id': 'int',
        'nonce': 'str',
        'lob_id': 'int',
        'order_source_id': 'int',
        'integration_partner_id': 'int',
        'connection_type': 'str',
        'item_filter_id': 'int',
        'infoplus_sku_field_to_map': 'str',
        'shopping_cart_sku_field_to_map': 'str',
        'script_id': 'int',
        'name': 'str',
        'shopping_cart_store_url': 'str',
        'access_code': 'str',
        'access_token': 'str',
        'username': 'str',
        'password': 'str',
        'default_carrier_id': 'int',
        'order_shipment_level': 'str',
        'create_invoices': 'bool',
        'sync_orders': 'bool',
        'sync_inventory': 'bool',
        'sync_tracking_data': 'bool',
        'sync_inventory_cron_string': 'str',
        'fulfill_all_items': 'bool',
        'sync_inventory_levels_last_run_time': 'datetime',
        'sync_orders_last_run_time': 'datetime',
        'inventory_level_warehouse_controls': 'str',
        'warehouse_list': 'list[Warehouse]',
        'inventory_level_store_controls': 'str',
        'store_list': 'list[Store]',
        'custom_fields': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'create_date': 'createDate',
        'modify_date': 'modifyDate',
        'client_id': 'clientId',
        'nonce': 'nonce',
        'lob_id': 'lobId',
        'order_source_id': 'orderSourceId',
        'integration_partner_id': 'integrationPartnerId',
        'connection_type': 'connectionType',
        'item_filter_id': 'itemFilterId',
        'infoplus_sku_field_to_map': 'infoplusSKUFieldToMap',
        'shopping_cart_sku_field_to_map': 'shoppingCartSKUFieldToMap',
        'script_id': 'scriptId',
        'name': 'name',
        'shopping_cart_store_url': 'shoppingCartStoreURL',
        'access_code': 'accessCode',
        'access_token': 'accessToken',
        'username': 'username',
        'password': 'password',
        'default_carrier_id': 'defaultCarrierId',
        'order_shipment_level': 'orderShipmentLevel',
        'create_invoices': 'createInvoices',
        'sync_orders': 'syncOrders',
        'sync_inventory': 'syncInventory',
        'sync_tracking_data': 'syncTrackingData',
        'sync_inventory_cron_string': 'syncInventoryCronString',
        'fulfill_all_items': 'fulfillAllItems',
        'sync_inventory_levels_last_run_time': 'syncInventoryLevelsLastRunTime',
        'sync_orders_last_run_time': 'syncOrdersLastRunTime',
        'inventory_level_warehouse_controls': 'inventoryLevelWarehouseControls',
        'warehouse_list': 'warehouseList',
        'inventory_level_store_controls': 'inventoryLevelStoreControls',
        'store_list': 'storeList',
        'custom_fields': 'customFields'
    }

    def __init__(self, id=None, create_date=None, modify_date=None, client_id=None, nonce=None, lob_id=None, order_source_id=None, integration_partner_id=None, connection_type=None, item_filter_id=None, infoplus_sku_field_to_map=None, shopping_cart_sku_field_to_map=None, script_id=None, name=None, shopping_cart_store_url=None, access_code=None, access_token=None, username=None, password=None, default_carrier_id=None, order_shipment_level=None, create_invoices=False, sync_orders=False, sync_inventory=False, sync_tracking_data=False, sync_inventory_cron_string=None, fulfill_all_items=False, sync_inventory_levels_last_run_time=None, sync_orders_last_run_time=None, inventory_level_warehouse_controls=None, warehouse_list=None, inventory_level_store_controls=None, store_list=None, custom_fields=None):  # noqa: E501
        """ShoppingCartConnection - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._create_date = None
        self._modify_date = None
        self._client_id = None
        self._nonce = None
        self._lob_id = None
        self._order_source_id = None
        self._integration_partner_id = None
        self._connection_type = None
        self._item_filter_id = None
        self._infoplus_sku_field_to_map = None
        self._shopping_cart_sku_field_to_map = None
        self._script_id = None
        self._name = None
        self._shopping_cart_store_url = None
        self._access_code = None
        self._access_token = None
        self._username = None
        self._password = None
        self._default_carrier_id = None
        self._order_shipment_level = None
        self._create_invoices = None
        self._sync_orders = None
        self._sync_inventory = None
        self._sync_tracking_data = None
        self._sync_inventory_cron_string = None
        self._fulfill_all_items = None
        self._sync_inventory_levels_last_run_time = None
        self._sync_orders_last_run_time = None
        self._inventory_level_warehouse_controls = None
        self._warehouse_list = None
        self._inventory_level_store_controls = None
        self._store_list = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if create_date is not None:
            self.create_date = create_date
        if modify_date is not None:
            self.modify_date = modify_date
        if client_id is not None:
            self.client_id = client_id
        if nonce is not None:
            self.nonce = nonce
        self.lob_id = lob_id
        self.order_source_id = order_source_id
        self.integration_partner_id = integration_partner_id
        self.connection_type = connection_type
        if item_filter_id is not None:
            self.item_filter_id = item_filter_id
        self.infoplus_sku_field_to_map = infoplus_sku_field_to_map
        self.shopping_cart_sku_field_to_map = shopping_cart_sku_field_to_map
        if script_id is not None:
            self.script_id = script_id
        self.name = name
        self.shopping_cart_store_url = shopping_cart_store_url
        self.access_code = access_code
        self.access_token = access_token
        self.username = username
        self.password = password
        if default_carrier_id is not None:
            self.default_carrier_id = default_carrier_id
        self.order_shipment_level = order_shipment_level
        if create_invoices is not None:
            self.create_invoices = create_invoices
        self.sync_orders = sync_orders
        self.sync_inventory = sync_inventory
        self.sync_tracking_data = sync_tracking_data
        if sync_inventory_cron_string is not None:
            self.sync_inventory_cron_string = sync_inventory_cron_string
        self.fulfill_all_items = fulfill_all_items
        if sync_inventory_levels_last_run_time is not None:
            self.sync_inventory_levels_last_run_time = sync_inventory_levels_last_run_time
        if sync_orders_last_run_time is not None:
            self.sync_orders_last_run_time = sync_orders_last_run_time
        self.inventory_level_warehouse_controls = inventory_level_warehouse_controls
        if warehouse_list is not None:
            self.warehouse_list = warehouse_list
        self.inventory_level_store_controls = inventory_level_store_controls
        if store_list is not None:
            self.store_list = store_list
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this ShoppingCartConnection.  # noqa: E501


        :return: The id of this ShoppingCartConnection.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ShoppingCartConnection.


        :param id: The id of this ShoppingCartConnection.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def create_date(self):
        """Gets the create_date of this ShoppingCartConnection.  # noqa: E501


        :return: The create_date of this ShoppingCartConnection.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this ShoppingCartConnection.


        :param create_date: The create_date of this ShoppingCartConnection.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def modify_date(self):
        """Gets the modify_date of this ShoppingCartConnection.  # noqa: E501


        :return: The modify_date of this ShoppingCartConnection.  # noqa: E501
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """Sets the modify_date of this ShoppingCartConnection.


        :param modify_date: The modify_date of this ShoppingCartConnection.  # noqa: E501
        :type: datetime
        """

        self._modify_date = modify_date

    @property
    def client_id(self):
        """Gets the client_id of this ShoppingCartConnection.  # noqa: E501


        :return: The client_id of this ShoppingCartConnection.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ShoppingCartConnection.


        :param client_id: The client_id of this ShoppingCartConnection.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def nonce(self):
        """Gets the nonce of this ShoppingCartConnection.  # noqa: E501


        :return: The nonce of this ShoppingCartConnection.  # noqa: E501
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this ShoppingCartConnection.


        :param nonce: The nonce of this ShoppingCartConnection.  # noqa: E501
        :type: str
        """

        self._nonce = nonce

    @property
    def lob_id(self):
        """Gets the lob_id of this ShoppingCartConnection.  # noqa: E501


        :return: The lob_id of this ShoppingCartConnection.  # noqa: E501
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """Sets the lob_id of this ShoppingCartConnection.


        :param lob_id: The lob_id of this ShoppingCartConnection.  # noqa: E501
        :type: int
        """
        if lob_id is None:
            raise ValueError("Invalid value for `lob_id`, must not be `None`")  # noqa: E501

        self._lob_id = lob_id

    @property
    def order_source_id(self):
        """Gets the order_source_id of this ShoppingCartConnection.  # noqa: E501


        :return: The order_source_id of this ShoppingCartConnection.  # noqa: E501
        :rtype: int
        """
        return self._order_source_id

    @order_source_id.setter
    def order_source_id(self, order_source_id):
        """Sets the order_source_id of this ShoppingCartConnection.


        :param order_source_id: The order_source_id of this ShoppingCartConnection.  # noqa: E501
        :type: int
        """
        if order_source_id is None:
            raise ValueError("Invalid value for `order_source_id`, must not be `None`")  # noqa: E501

        self._order_source_id = order_source_id

    @property
    def integration_partner_id(self):
        """Gets the integration_partner_id of this ShoppingCartConnection.  # noqa: E501


        :return: The integration_partner_id of this ShoppingCartConnection.  # noqa: E501
        :rtype: int
        """
        return self._integration_partner_id

    @integration_partner_id.setter
    def integration_partner_id(self, integration_partner_id):
        """Sets the integration_partner_id of this ShoppingCartConnection.


        :param integration_partner_id: The integration_partner_id of this ShoppingCartConnection.  # noqa: E501
        :type: int
        """
        if integration_partner_id is None:
            raise ValueError("Invalid value for `integration_partner_id`, must not be `None`")  # noqa: E501

        self._integration_partner_id = integration_partner_id

    @property
    def connection_type(self):
        """Gets the connection_type of this ShoppingCartConnection.  # noqa: E501


        :return: The connection_type of this ShoppingCartConnection.  # noqa: E501
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this ShoppingCartConnection.


        :param connection_type: The connection_type of this ShoppingCartConnection.  # noqa: E501
        :type: str
        """
        if connection_type is None:
            raise ValueError("Invalid value for `connection_type`, must not be `None`")  # noqa: E501

        self._connection_type = connection_type

    @property
    def item_filter_id(self):
        """Gets the item_filter_id of this ShoppingCartConnection.  # noqa: E501


        :return: The item_filter_id of this ShoppingCartConnection.  # noqa: E501
        :rtype: int
        """
        return self._item_filter_id

    @item_filter_id.setter
    def item_filter_id(self, item_filter_id):
        """Sets the item_filter_id of this ShoppingCartConnection.


        :param item_filter_id: The item_filter_id of this ShoppingCartConnection.  # noqa: E501
        :type: int
        """

        self._item_filter_id = item_filter_id

    @property
    def infoplus_sku_field_to_map(self):
        """Gets the infoplus_sku_field_to_map of this ShoppingCartConnection.  # noqa: E501


        :return: The infoplus_sku_field_to_map of this ShoppingCartConnection.  # noqa: E501
        :rtype: str
        """
        return self._infoplus_sku_field_to_map

    @infoplus_sku_field_to_map.setter
    def infoplus_sku_field_to_map(self, infoplus_sku_field_to_map):
        """Sets the infoplus_sku_field_to_map of this ShoppingCartConnection.


        :param infoplus_sku_field_to_map: The infoplus_sku_field_to_map of this ShoppingCartConnection.  # noqa: E501
        :type: str
        """
        if infoplus_sku_field_to_map is None:
            raise ValueError("Invalid value for `infoplus_sku_field_to_map`, must not be `None`")  # noqa: E501

        self._infoplus_sku_field_to_map = infoplus_sku_field_to_map

    @property
    def shopping_cart_sku_field_to_map(self):
        """Gets the shopping_cart_sku_field_to_map of this ShoppingCartConnection.  # noqa: E501


        :return: The shopping_cart_sku_field_to_map of this ShoppingCartConnection.  # noqa: E501
        :rtype: str
        """
        return self._shopping_cart_sku_field_to_map

    @shopping_cart_sku_field_to_map.setter
    def shopping_cart_sku_field_to_map(self, shopping_cart_sku_field_to_map):
        """Sets the shopping_cart_sku_field_to_map of this ShoppingCartConnection.


        :param shopping_cart_sku_field_to_map: The shopping_cart_sku_field_to_map of this ShoppingCartConnection.  # noqa: E501
        :type: str
        """
        if shopping_cart_sku_field_to_map is None:
            raise ValueError("Invalid value for `shopping_cart_sku_field_to_map`, must not be `None`")  # noqa: E501

        self._shopping_cart_sku_field_to_map = shopping_cart_sku_field_to_map

    @property
    def script_id(self):
        """Gets the script_id of this ShoppingCartConnection.  # noqa: E501


        :return: The script_id of this ShoppingCartConnection.  # noqa: E501
        :rtype: int
        """
        return self._script_id

    @script_id.setter
    def script_id(self, script_id):
        """Sets the script_id of this ShoppingCartConnection.


        :param script_id: The script_id of this ShoppingCartConnection.  # noqa: E501
        :type: int
        """

        self._script_id = script_id

    @property
    def name(self):
        """Gets the name of this ShoppingCartConnection.  # noqa: E501


        :return: The name of this ShoppingCartConnection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ShoppingCartConnection.


        :param name: The name of this ShoppingCartConnection.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def shopping_cart_store_url(self):
        """Gets the shopping_cart_store_url of this ShoppingCartConnection.  # noqa: E501


        :return: The shopping_cart_store_url of this ShoppingCartConnection.  # noqa: E501
        :rtype: str
        """
        return self._shopping_cart_store_url

    @shopping_cart_store_url.setter
    def shopping_cart_store_url(self, shopping_cart_store_url):
        """Sets the shopping_cart_store_url of this ShoppingCartConnection.


        :param shopping_cart_store_url: The shopping_cart_store_url of this ShoppingCartConnection.  # noqa: E501
        :type: str
        """
        if shopping_cart_store_url is None:
            raise ValueError("Invalid value for `shopping_cart_store_url`, must not be `None`")  # noqa: E501

        self._shopping_cart_store_url = shopping_cart_store_url

    @property
    def access_code(self):
        """Gets the access_code of this ShoppingCartConnection.  # noqa: E501


        :return: The access_code of this ShoppingCartConnection.  # noqa: E501
        :rtype: str
        """
        return self._access_code

    @access_code.setter
    def access_code(self, access_code):
        """Sets the access_code of this ShoppingCartConnection.


        :param access_code: The access_code of this ShoppingCartConnection.  # noqa: E501
        :type: str
        """
        if access_code is None:
            raise ValueError("Invalid value for `access_code`, must not be `None`")  # noqa: E501

        self._access_code = access_code

    @property
    def access_token(self):
        """Gets the access_token of this ShoppingCartConnection.  # noqa: E501


        :return: The access_token of this ShoppingCartConnection.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this ShoppingCartConnection.


        :param access_token: The access_token of this ShoppingCartConnection.  # noqa: E501
        :type: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")  # noqa: E501

        self._access_token = access_token

    @property
    def username(self):
        """Gets the username of this ShoppingCartConnection.  # noqa: E501


        :return: The username of this ShoppingCartConnection.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ShoppingCartConnection.


        :param username: The username of this ShoppingCartConnection.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this ShoppingCartConnection.  # noqa: E501


        :return: The password of this ShoppingCartConnection.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ShoppingCartConnection.


        :param password: The password of this ShoppingCartConnection.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def default_carrier_id(self):
        """Gets the default_carrier_id of this ShoppingCartConnection.  # noqa: E501


        :return: The default_carrier_id of this ShoppingCartConnection.  # noqa: E501
        :rtype: int
        """
        return self._default_carrier_id

    @default_carrier_id.setter
    def default_carrier_id(self, default_carrier_id):
        """Sets the default_carrier_id of this ShoppingCartConnection.


        :param default_carrier_id: The default_carrier_id of this ShoppingCartConnection.  # noqa: E501
        :type: int
        """

        self._default_carrier_id = default_carrier_id

    @property
    def order_shipment_level(self):
        """Gets the order_shipment_level of this ShoppingCartConnection.  # noqa: E501


        :return: The order_shipment_level of this ShoppingCartConnection.  # noqa: E501
        :rtype: str
        """
        return self._order_shipment_level

    @order_shipment_level.setter
    def order_shipment_level(self, order_shipment_level):
        """Sets the order_shipment_level of this ShoppingCartConnection.


        :param order_shipment_level: The order_shipment_level of this ShoppingCartConnection.  # noqa: E501
        :type: str
        """
        if order_shipment_level is None:
            raise ValueError("Invalid value for `order_shipment_level`, must not be `None`")  # noqa: E501

        self._order_shipment_level = order_shipment_level

    @property
    def create_invoices(self):
        """Gets the create_invoices of this ShoppingCartConnection.  # noqa: E501


        :return: The create_invoices of this ShoppingCartConnection.  # noqa: E501
        :rtype: bool
        """
        return self._create_invoices

    @create_invoices.setter
    def create_invoices(self, create_invoices):
        """Sets the create_invoices of this ShoppingCartConnection.


        :param create_invoices: The create_invoices of this ShoppingCartConnection.  # noqa: E501
        :type: bool
        """

        self._create_invoices = create_invoices

    @property
    def sync_orders(self):
        """Gets the sync_orders of this ShoppingCartConnection.  # noqa: E501


        :return: The sync_orders of this ShoppingCartConnection.  # noqa: E501
        :rtype: bool
        """
        return self._sync_orders

    @sync_orders.setter
    def sync_orders(self, sync_orders):
        """Sets the sync_orders of this ShoppingCartConnection.


        :param sync_orders: The sync_orders of this ShoppingCartConnection.  # noqa: E501
        :type: bool
        """
        if sync_orders is None:
            raise ValueError("Invalid value for `sync_orders`, must not be `None`")  # noqa: E501

        self._sync_orders = sync_orders

    @property
    def sync_inventory(self):
        """Gets the sync_inventory of this ShoppingCartConnection.  # noqa: E501


        :return: The sync_inventory of this ShoppingCartConnection.  # noqa: E501
        :rtype: bool
        """
        return self._sync_inventory

    @sync_inventory.setter
    def sync_inventory(self, sync_inventory):
        """Sets the sync_inventory of this ShoppingCartConnection.


        :param sync_inventory: The sync_inventory of this ShoppingCartConnection.  # noqa: E501
        :type: bool
        """
        if sync_inventory is None:
            raise ValueError("Invalid value for `sync_inventory`, must not be `None`")  # noqa: E501

        self._sync_inventory = sync_inventory

    @property
    def sync_tracking_data(self):
        """Gets the sync_tracking_data of this ShoppingCartConnection.  # noqa: E501


        :return: The sync_tracking_data of this ShoppingCartConnection.  # noqa: E501
        :rtype: bool
        """
        return self._sync_tracking_data

    @sync_tracking_data.setter
    def sync_tracking_data(self, sync_tracking_data):
        """Sets the sync_tracking_data of this ShoppingCartConnection.


        :param sync_tracking_data: The sync_tracking_data of this ShoppingCartConnection.  # noqa: E501
        :type: bool
        """
        if sync_tracking_data is None:
            raise ValueError("Invalid value for `sync_tracking_data`, must not be `None`")  # noqa: E501

        self._sync_tracking_data = sync_tracking_data

    @property
    def sync_inventory_cron_string(self):
        """Gets the sync_inventory_cron_string of this ShoppingCartConnection.  # noqa: E501


        :return: The sync_inventory_cron_string of this ShoppingCartConnection.  # noqa: E501
        :rtype: str
        """
        return self._sync_inventory_cron_string

    @sync_inventory_cron_string.setter
    def sync_inventory_cron_string(self, sync_inventory_cron_string):
        """Sets the sync_inventory_cron_string of this ShoppingCartConnection.


        :param sync_inventory_cron_string: The sync_inventory_cron_string of this ShoppingCartConnection.  # noqa: E501
        :type: str
        """

        self._sync_inventory_cron_string = sync_inventory_cron_string

    @property
    def fulfill_all_items(self):
        """Gets the fulfill_all_items of this ShoppingCartConnection.  # noqa: E501


        :return: The fulfill_all_items of this ShoppingCartConnection.  # noqa: E501
        :rtype: bool
        """
        return self._fulfill_all_items

    @fulfill_all_items.setter
    def fulfill_all_items(self, fulfill_all_items):
        """Sets the fulfill_all_items of this ShoppingCartConnection.


        :param fulfill_all_items: The fulfill_all_items of this ShoppingCartConnection.  # noqa: E501
        :type: bool
        """
        if fulfill_all_items is None:
            raise ValueError("Invalid value for `fulfill_all_items`, must not be `None`")  # noqa: E501

        self._fulfill_all_items = fulfill_all_items

    @property
    def sync_inventory_levels_last_run_time(self):
        """Gets the sync_inventory_levels_last_run_time of this ShoppingCartConnection.  # noqa: E501


        :return: The sync_inventory_levels_last_run_time of this ShoppingCartConnection.  # noqa: E501
        :rtype: datetime
        """
        return self._sync_inventory_levels_last_run_time

    @sync_inventory_levels_last_run_time.setter
    def sync_inventory_levels_last_run_time(self, sync_inventory_levels_last_run_time):
        """Sets the sync_inventory_levels_last_run_time of this ShoppingCartConnection.


        :param sync_inventory_levels_last_run_time: The sync_inventory_levels_last_run_time of this ShoppingCartConnection.  # noqa: E501
        :type: datetime
        """

        self._sync_inventory_levels_last_run_time = sync_inventory_levels_last_run_time

    @property
    def sync_orders_last_run_time(self):
        """Gets the sync_orders_last_run_time of this ShoppingCartConnection.  # noqa: E501


        :return: The sync_orders_last_run_time of this ShoppingCartConnection.  # noqa: E501
        :rtype: datetime
        """
        return self._sync_orders_last_run_time

    @sync_orders_last_run_time.setter
    def sync_orders_last_run_time(self, sync_orders_last_run_time):
        """Sets the sync_orders_last_run_time of this ShoppingCartConnection.


        :param sync_orders_last_run_time: The sync_orders_last_run_time of this ShoppingCartConnection.  # noqa: E501
        :type: datetime
        """

        self._sync_orders_last_run_time = sync_orders_last_run_time

    @property
    def inventory_level_warehouse_controls(self):
        """Gets the inventory_level_warehouse_controls of this ShoppingCartConnection.  # noqa: E501


        :return: The inventory_level_warehouse_controls of this ShoppingCartConnection.  # noqa: E501
        :rtype: str
        """
        return self._inventory_level_warehouse_controls

    @inventory_level_warehouse_controls.setter
    def inventory_level_warehouse_controls(self, inventory_level_warehouse_controls):
        """Sets the inventory_level_warehouse_controls of this ShoppingCartConnection.


        :param inventory_level_warehouse_controls: The inventory_level_warehouse_controls of this ShoppingCartConnection.  # noqa: E501
        :type: str
        """
        if inventory_level_warehouse_controls is None:
            raise ValueError("Invalid value for `inventory_level_warehouse_controls`, must not be `None`")  # noqa: E501

        self._inventory_level_warehouse_controls = inventory_level_warehouse_controls

    @property
    def warehouse_list(self):
        """Gets the warehouse_list of this ShoppingCartConnection.  # noqa: E501


        :return: The warehouse_list of this ShoppingCartConnection.  # noqa: E501
        :rtype: list[Warehouse]
        """
        return self._warehouse_list

    @warehouse_list.setter
    def warehouse_list(self, warehouse_list):
        """Sets the warehouse_list of this ShoppingCartConnection.


        :param warehouse_list: The warehouse_list of this ShoppingCartConnection.  # noqa: E501
        :type: list[Warehouse]
        """

        self._warehouse_list = warehouse_list

    @property
    def inventory_level_store_controls(self):
        """Gets the inventory_level_store_controls of this ShoppingCartConnection.  # noqa: E501


        :return: The inventory_level_store_controls of this ShoppingCartConnection.  # noqa: E501
        :rtype: str
        """
        return self._inventory_level_store_controls

    @inventory_level_store_controls.setter
    def inventory_level_store_controls(self, inventory_level_store_controls):
        """Sets the inventory_level_store_controls of this ShoppingCartConnection.


        :param inventory_level_store_controls: The inventory_level_store_controls of this ShoppingCartConnection.  # noqa: E501
        :type: str
        """
        if inventory_level_store_controls is None:
            raise ValueError("Invalid value for `inventory_level_store_controls`, must not be `None`")  # noqa: E501

        self._inventory_level_store_controls = inventory_level_store_controls

    @property
    def store_list(self):
        """Gets the store_list of this ShoppingCartConnection.  # noqa: E501


        :return: The store_list of this ShoppingCartConnection.  # noqa: E501
        :rtype: list[Store]
        """
        return self._store_list

    @store_list.setter
    def store_list(self, store_list):
        """Sets the store_list of this ShoppingCartConnection.


        :param store_list: The store_list of this ShoppingCartConnection.  # noqa: E501
        :type: list[Store]
        """

        self._store_list = store_list

    @property
    def custom_fields(self):
        """Gets the custom_fields of this ShoppingCartConnection.  # noqa: E501


        :return: The custom_fields of this ShoppingCartConnection.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this ShoppingCartConnection.


        :param custom_fields: The custom_fields of this ShoppingCartConnection.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShoppingCartConnection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
