# coding: utf-8

"""
    Infoplus API

    Infoplus API.  # noqa: E501

    OpenAPI spec version: v3.0
    Contact: api@infopluscommerce.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LocationAddressScheme(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'client_id': 'int',
        'name': 'str',
        'format_string': 'str',
        'location_naming_scheme': 'str',
        'location_number_zero_padded': 'bool',
        'location_number_minimum_number_of_digits': 'int',
        'level_naming_scheme': 'str',
        'level_number_zero_padded': 'bool',
        'level_number_minimum_number_of_digits': 'int',
        'aisle_naming_scheme': 'str',
        'aisle_number_zero_padded': 'bool',
        'aisle_number_minimum_number_of_digits': 'int',
        'bay_naming_scheme': 'str',
        'bay_number_zero_padded': 'bool',
        'bay_number_minimum_number_of_digits': 'int',
        'create_date': 'datetime',
        'modify_date': 'datetime',
        'custom_fields': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'client_id': 'clientId',
        'name': 'name',
        'format_string': 'formatString',
        'location_naming_scheme': 'locationNamingScheme',
        'location_number_zero_padded': 'locationNumberZeroPadded',
        'location_number_minimum_number_of_digits': 'locationNumberMinimumNumberOfDigits',
        'level_naming_scheme': 'levelNamingScheme',
        'level_number_zero_padded': 'levelNumberZeroPadded',
        'level_number_minimum_number_of_digits': 'levelNumberMinimumNumberOfDigits',
        'aisle_naming_scheme': 'aisleNamingScheme',
        'aisle_number_zero_padded': 'aisleNumberZeroPadded',
        'aisle_number_minimum_number_of_digits': 'aisleNumberMinimumNumberOfDigits',
        'bay_naming_scheme': 'bayNamingScheme',
        'bay_number_zero_padded': 'bayNumberZeroPadded',
        'bay_number_minimum_number_of_digits': 'bayNumberMinimumNumberOfDigits',
        'create_date': 'createDate',
        'modify_date': 'modifyDate',
        'custom_fields': 'customFields'
    }

    def __init__(self, id=None, client_id=None, name=None, format_string=None, location_naming_scheme=None, location_number_zero_padded=False, location_number_minimum_number_of_digits=None, level_naming_scheme=None, level_number_zero_padded=False, level_number_minimum_number_of_digits=None, aisle_naming_scheme=None, aisle_number_zero_padded=False, aisle_number_minimum_number_of_digits=None, bay_naming_scheme=None, bay_number_zero_padded=False, bay_number_minimum_number_of_digits=None, create_date=None, modify_date=None, custom_fields=None):  # noqa: E501
        """LocationAddressScheme - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._client_id = None
        self._name = None
        self._format_string = None
        self._location_naming_scheme = None
        self._location_number_zero_padded = None
        self._location_number_minimum_number_of_digits = None
        self._level_naming_scheme = None
        self._level_number_zero_padded = None
        self._level_number_minimum_number_of_digits = None
        self._aisle_naming_scheme = None
        self._aisle_number_zero_padded = None
        self._aisle_number_minimum_number_of_digits = None
        self._bay_naming_scheme = None
        self._bay_number_zero_padded = None
        self._bay_number_minimum_number_of_digits = None
        self._create_date = None
        self._modify_date = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.client_id = client_id
        self.name = name
        self.format_string = format_string
        self.location_naming_scheme = location_naming_scheme
        self.location_number_zero_padded = location_number_zero_padded
        if location_number_minimum_number_of_digits is not None:
            self.location_number_minimum_number_of_digits = location_number_minimum_number_of_digits
        self.level_naming_scheme = level_naming_scheme
        self.level_number_zero_padded = level_number_zero_padded
        if level_number_minimum_number_of_digits is not None:
            self.level_number_minimum_number_of_digits = level_number_minimum_number_of_digits
        self.aisle_naming_scheme = aisle_naming_scheme
        self.aisle_number_zero_padded = aisle_number_zero_padded
        if aisle_number_minimum_number_of_digits is not None:
            self.aisle_number_minimum_number_of_digits = aisle_number_minimum_number_of_digits
        if bay_naming_scheme is not None:
            self.bay_naming_scheme = bay_naming_scheme
        if bay_number_zero_padded is not None:
            self.bay_number_zero_padded = bay_number_zero_padded
        if bay_number_minimum_number_of_digits is not None:
            self.bay_number_minimum_number_of_digits = bay_number_minimum_number_of_digits
        if create_date is not None:
            self.create_date = create_date
        if modify_date is not None:
            self.modify_date = modify_date
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this LocationAddressScheme.  # noqa: E501


        :return: The id of this LocationAddressScheme.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LocationAddressScheme.


        :param id: The id of this LocationAddressScheme.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def client_id(self):
        """Gets the client_id of this LocationAddressScheme.  # noqa: E501


        :return: The client_id of this LocationAddressScheme.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this LocationAddressScheme.


        :param client_id: The client_id of this LocationAddressScheme.  # noqa: E501
        :type: int
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def name(self):
        """Gets the name of this LocationAddressScheme.  # noqa: E501


        :return: The name of this LocationAddressScheme.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LocationAddressScheme.


        :param name: The name of this LocationAddressScheme.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def format_string(self):
        """Gets the format_string of this LocationAddressScheme.  # noqa: E501


        :return: The format_string of this LocationAddressScheme.  # noqa: E501
        :rtype: str
        """
        return self._format_string

    @format_string.setter
    def format_string(self, format_string):
        """Sets the format_string of this LocationAddressScheme.


        :param format_string: The format_string of this LocationAddressScheme.  # noqa: E501
        :type: str
        """
        if format_string is None:
            raise ValueError("Invalid value for `format_string`, must not be `None`")  # noqa: E501

        self._format_string = format_string

    @property
    def location_naming_scheme(self):
        """Gets the location_naming_scheme of this LocationAddressScheme.  # noqa: E501


        :return: The location_naming_scheme of this LocationAddressScheme.  # noqa: E501
        :rtype: str
        """
        return self._location_naming_scheme

    @location_naming_scheme.setter
    def location_naming_scheme(self, location_naming_scheme):
        """Sets the location_naming_scheme of this LocationAddressScheme.


        :param location_naming_scheme: The location_naming_scheme of this LocationAddressScheme.  # noqa: E501
        :type: str
        """
        if location_naming_scheme is None:
            raise ValueError("Invalid value for `location_naming_scheme`, must not be `None`")  # noqa: E501

        self._location_naming_scheme = location_naming_scheme

    @property
    def location_number_zero_padded(self):
        """Gets the location_number_zero_padded of this LocationAddressScheme.  # noqa: E501


        :return: The location_number_zero_padded of this LocationAddressScheme.  # noqa: E501
        :rtype: bool
        """
        return self._location_number_zero_padded

    @location_number_zero_padded.setter
    def location_number_zero_padded(self, location_number_zero_padded):
        """Sets the location_number_zero_padded of this LocationAddressScheme.


        :param location_number_zero_padded: The location_number_zero_padded of this LocationAddressScheme.  # noqa: E501
        :type: bool
        """
        if location_number_zero_padded is None:
            raise ValueError("Invalid value for `location_number_zero_padded`, must not be `None`")  # noqa: E501

        self._location_number_zero_padded = location_number_zero_padded

    @property
    def location_number_minimum_number_of_digits(self):
        """Gets the location_number_minimum_number_of_digits of this LocationAddressScheme.  # noqa: E501


        :return: The location_number_minimum_number_of_digits of this LocationAddressScheme.  # noqa: E501
        :rtype: int
        """
        return self._location_number_minimum_number_of_digits

    @location_number_minimum_number_of_digits.setter
    def location_number_minimum_number_of_digits(self, location_number_minimum_number_of_digits):
        """Sets the location_number_minimum_number_of_digits of this LocationAddressScheme.


        :param location_number_minimum_number_of_digits: The location_number_minimum_number_of_digits of this LocationAddressScheme.  # noqa: E501
        :type: int
        """

        self._location_number_minimum_number_of_digits = location_number_minimum_number_of_digits

    @property
    def level_naming_scheme(self):
        """Gets the level_naming_scheme of this LocationAddressScheme.  # noqa: E501


        :return: The level_naming_scheme of this LocationAddressScheme.  # noqa: E501
        :rtype: str
        """
        return self._level_naming_scheme

    @level_naming_scheme.setter
    def level_naming_scheme(self, level_naming_scheme):
        """Sets the level_naming_scheme of this LocationAddressScheme.


        :param level_naming_scheme: The level_naming_scheme of this LocationAddressScheme.  # noqa: E501
        :type: str
        """
        if level_naming_scheme is None:
            raise ValueError("Invalid value for `level_naming_scheme`, must not be `None`")  # noqa: E501

        self._level_naming_scheme = level_naming_scheme

    @property
    def level_number_zero_padded(self):
        """Gets the level_number_zero_padded of this LocationAddressScheme.  # noqa: E501


        :return: The level_number_zero_padded of this LocationAddressScheme.  # noqa: E501
        :rtype: bool
        """
        return self._level_number_zero_padded

    @level_number_zero_padded.setter
    def level_number_zero_padded(self, level_number_zero_padded):
        """Sets the level_number_zero_padded of this LocationAddressScheme.


        :param level_number_zero_padded: The level_number_zero_padded of this LocationAddressScheme.  # noqa: E501
        :type: bool
        """
        if level_number_zero_padded is None:
            raise ValueError("Invalid value for `level_number_zero_padded`, must not be `None`")  # noqa: E501

        self._level_number_zero_padded = level_number_zero_padded

    @property
    def level_number_minimum_number_of_digits(self):
        """Gets the level_number_minimum_number_of_digits of this LocationAddressScheme.  # noqa: E501


        :return: The level_number_minimum_number_of_digits of this LocationAddressScheme.  # noqa: E501
        :rtype: int
        """
        return self._level_number_minimum_number_of_digits

    @level_number_minimum_number_of_digits.setter
    def level_number_minimum_number_of_digits(self, level_number_minimum_number_of_digits):
        """Sets the level_number_minimum_number_of_digits of this LocationAddressScheme.


        :param level_number_minimum_number_of_digits: The level_number_minimum_number_of_digits of this LocationAddressScheme.  # noqa: E501
        :type: int
        """

        self._level_number_minimum_number_of_digits = level_number_minimum_number_of_digits

    @property
    def aisle_naming_scheme(self):
        """Gets the aisle_naming_scheme of this LocationAddressScheme.  # noqa: E501


        :return: The aisle_naming_scheme of this LocationAddressScheme.  # noqa: E501
        :rtype: str
        """
        return self._aisle_naming_scheme

    @aisle_naming_scheme.setter
    def aisle_naming_scheme(self, aisle_naming_scheme):
        """Sets the aisle_naming_scheme of this LocationAddressScheme.


        :param aisle_naming_scheme: The aisle_naming_scheme of this LocationAddressScheme.  # noqa: E501
        :type: str
        """
        if aisle_naming_scheme is None:
            raise ValueError("Invalid value for `aisle_naming_scheme`, must not be `None`")  # noqa: E501

        self._aisle_naming_scheme = aisle_naming_scheme

    @property
    def aisle_number_zero_padded(self):
        """Gets the aisle_number_zero_padded of this LocationAddressScheme.  # noqa: E501


        :return: The aisle_number_zero_padded of this LocationAddressScheme.  # noqa: E501
        :rtype: bool
        """
        return self._aisle_number_zero_padded

    @aisle_number_zero_padded.setter
    def aisle_number_zero_padded(self, aisle_number_zero_padded):
        """Sets the aisle_number_zero_padded of this LocationAddressScheme.


        :param aisle_number_zero_padded: The aisle_number_zero_padded of this LocationAddressScheme.  # noqa: E501
        :type: bool
        """
        if aisle_number_zero_padded is None:
            raise ValueError("Invalid value for `aisle_number_zero_padded`, must not be `None`")  # noqa: E501

        self._aisle_number_zero_padded = aisle_number_zero_padded

    @property
    def aisle_number_minimum_number_of_digits(self):
        """Gets the aisle_number_minimum_number_of_digits of this LocationAddressScheme.  # noqa: E501


        :return: The aisle_number_minimum_number_of_digits of this LocationAddressScheme.  # noqa: E501
        :rtype: int
        """
        return self._aisle_number_minimum_number_of_digits

    @aisle_number_minimum_number_of_digits.setter
    def aisle_number_minimum_number_of_digits(self, aisle_number_minimum_number_of_digits):
        """Sets the aisle_number_minimum_number_of_digits of this LocationAddressScheme.


        :param aisle_number_minimum_number_of_digits: The aisle_number_minimum_number_of_digits of this LocationAddressScheme.  # noqa: E501
        :type: int
        """

        self._aisle_number_minimum_number_of_digits = aisle_number_minimum_number_of_digits

    @property
    def bay_naming_scheme(self):
        """Gets the bay_naming_scheme of this LocationAddressScheme.  # noqa: E501


        :return: The bay_naming_scheme of this LocationAddressScheme.  # noqa: E501
        :rtype: str
        """
        return self._bay_naming_scheme

    @bay_naming_scheme.setter
    def bay_naming_scheme(self, bay_naming_scheme):
        """Sets the bay_naming_scheme of this LocationAddressScheme.


        :param bay_naming_scheme: The bay_naming_scheme of this LocationAddressScheme.  # noqa: E501
        :type: str
        """

        self._bay_naming_scheme = bay_naming_scheme

    @property
    def bay_number_zero_padded(self):
        """Gets the bay_number_zero_padded of this LocationAddressScheme.  # noqa: E501


        :return: The bay_number_zero_padded of this LocationAddressScheme.  # noqa: E501
        :rtype: bool
        """
        return self._bay_number_zero_padded

    @bay_number_zero_padded.setter
    def bay_number_zero_padded(self, bay_number_zero_padded):
        """Sets the bay_number_zero_padded of this LocationAddressScheme.


        :param bay_number_zero_padded: The bay_number_zero_padded of this LocationAddressScheme.  # noqa: E501
        :type: bool
        """

        self._bay_number_zero_padded = bay_number_zero_padded

    @property
    def bay_number_minimum_number_of_digits(self):
        """Gets the bay_number_minimum_number_of_digits of this LocationAddressScheme.  # noqa: E501


        :return: The bay_number_minimum_number_of_digits of this LocationAddressScheme.  # noqa: E501
        :rtype: int
        """
        return self._bay_number_minimum_number_of_digits

    @bay_number_minimum_number_of_digits.setter
    def bay_number_minimum_number_of_digits(self, bay_number_minimum_number_of_digits):
        """Sets the bay_number_minimum_number_of_digits of this LocationAddressScheme.


        :param bay_number_minimum_number_of_digits: The bay_number_minimum_number_of_digits of this LocationAddressScheme.  # noqa: E501
        :type: int
        """

        self._bay_number_minimum_number_of_digits = bay_number_minimum_number_of_digits

    @property
    def create_date(self):
        """Gets the create_date of this LocationAddressScheme.  # noqa: E501


        :return: The create_date of this LocationAddressScheme.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this LocationAddressScheme.


        :param create_date: The create_date of this LocationAddressScheme.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def modify_date(self):
        """Gets the modify_date of this LocationAddressScheme.  # noqa: E501


        :return: The modify_date of this LocationAddressScheme.  # noqa: E501
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """Sets the modify_date of this LocationAddressScheme.


        :param modify_date: The modify_date of this LocationAddressScheme.  # noqa: E501
        :type: datetime
        """

        self._modify_date = modify_date

    @property
    def custom_fields(self):
        """Gets the custom_fields of this LocationAddressScheme.  # noqa: E501


        :return: The custom_fields of this LocationAddressScheme.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this LocationAddressScheme.


        :param custom_fields: The custom_fields of this LocationAddressScheme.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationAddressScheme):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
