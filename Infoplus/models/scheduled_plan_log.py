# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ScheduledPlanLog(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ScheduledPlanLog - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'create_date': 'datetime',
            'modify_date': 'datetime',
            'scheduled_plan_id': 'int',
            'start_time': 'datetime',
            'end_time': 'datetime',
            'status': 'str',
            'message': 'str',
            'link_url': 'str',
            'link_text': 'str',
            'custom_fields': 'dict(str, object)'
        }

        self.attribute_map = {
            'id': 'id',
            'create_date': 'createDate',
            'modify_date': 'modifyDate',
            'scheduled_plan_id': 'scheduledPlanId',
            'start_time': 'startTime',
            'end_time': 'endTime',
            'status': 'status',
            'message': 'message',
            'link_url': 'linkURL',
            'link_text': 'linkText',
            'custom_fields': 'customFields'
        }

        self._id = None
        self._create_date = None
        self._modify_date = None
        self._scheduled_plan_id = None
        self._start_time = None
        self._end_time = None
        self._status = None
        self._message = None
        self._link_url = None
        self._link_text = None
        self._custom_fields = None

    @property
    def id(self):
        """
        Gets the id of this ScheduledPlanLog.


        :return: The id of this ScheduledPlanLog.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ScheduledPlanLog.


        :param id: The id of this ScheduledPlanLog.
        :type: int
        """
        self._id = id

    @property
    def create_date(self):
        """
        Gets the create_date of this ScheduledPlanLog.


        :return: The create_date of this ScheduledPlanLog.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """
        Sets the create_date of this ScheduledPlanLog.


        :param create_date: The create_date of this ScheduledPlanLog.
        :type: datetime
        """
        self._create_date = create_date

    @property
    def modify_date(self):
        """
        Gets the modify_date of this ScheduledPlanLog.


        :return: The modify_date of this ScheduledPlanLog.
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """
        Sets the modify_date of this ScheduledPlanLog.


        :param modify_date: The modify_date of this ScheduledPlanLog.
        :type: datetime
        """
        self._modify_date = modify_date

    @property
    def scheduled_plan_id(self):
        """
        Gets the scheduled_plan_id of this ScheduledPlanLog.


        :return: The scheduled_plan_id of this ScheduledPlanLog.
        :rtype: int
        """
        return self._scheduled_plan_id

    @scheduled_plan_id.setter
    def scheduled_plan_id(self, scheduled_plan_id):
        """
        Sets the scheduled_plan_id of this ScheduledPlanLog.


        :param scheduled_plan_id: The scheduled_plan_id of this ScheduledPlanLog.
        :type: int
        """
        self._scheduled_plan_id = scheduled_plan_id

    @property
    def start_time(self):
        """
        Gets the start_time of this ScheduledPlanLog.


        :return: The start_time of this ScheduledPlanLog.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this ScheduledPlanLog.


        :param start_time: The start_time of this ScheduledPlanLog.
        :type: datetime
        """
        self._start_time = start_time

    @property
    def end_time(self):
        """
        Gets the end_time of this ScheduledPlanLog.


        :return: The end_time of this ScheduledPlanLog.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this ScheduledPlanLog.


        :param end_time: The end_time of this ScheduledPlanLog.
        :type: datetime
        """
        self._end_time = end_time

    @property
    def status(self):
        """
        Gets the status of this ScheduledPlanLog.


        :return: The status of this ScheduledPlanLog.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ScheduledPlanLog.


        :param status: The status of this ScheduledPlanLog.
        :type: str
        """
        self._status = status

    @property
    def message(self):
        """
        Gets the message of this ScheduledPlanLog.


        :return: The message of this ScheduledPlanLog.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this ScheduledPlanLog.


        :param message: The message of this ScheduledPlanLog.
        :type: str
        """
        self._message = message

    @property
    def link_url(self):
        """
        Gets the link_url of this ScheduledPlanLog.


        :return: The link_url of this ScheduledPlanLog.
        :rtype: str
        """
        return self._link_url

    @link_url.setter
    def link_url(self, link_url):
        """
        Sets the link_url of this ScheduledPlanLog.


        :param link_url: The link_url of this ScheduledPlanLog.
        :type: str
        """
        self._link_url = link_url

    @property
    def link_text(self):
        """
        Gets the link_text of this ScheduledPlanLog.


        :return: The link_text of this ScheduledPlanLog.
        :rtype: str
        """
        return self._link_text

    @link_text.setter
    def link_text(self, link_text):
        """
        Sets the link_text of this ScheduledPlanLog.


        :param link_text: The link_text of this ScheduledPlanLog.
        :type: str
        """
        self._link_text = link_text

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this ScheduledPlanLog.


        :return: The custom_fields of this ScheduledPlanLog.
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this ScheduledPlanLog.


        :param custom_fields: The custom_fields of this ScheduledPlanLog.
        :type: dict(str, object)
        """
        self._custom_fields = custom_fields

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

