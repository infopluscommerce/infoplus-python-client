# coding: utf-8

"""
    Infoplus API

    Infoplus API.  # noqa: E501

    OpenAPI spec version: v3.0
    Contact: api@infopluscommerce.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Cart(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'create_date': 'datetime',
        'modify_date': 'datetime',
        'cart_id': 'str',
        'description': 'str',
        'current_fulfillment_process_id': 'int',
        'current_work_batch_id': 'int',
        'position_type': 'str',
        'custom_fields': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'create_date': 'createDate',
        'modify_date': 'modifyDate',
        'cart_id': 'cartId',
        'description': 'description',
        'current_fulfillment_process_id': 'currentFulfillmentProcessId',
        'current_work_batch_id': 'currentWorkBatchId',
        'position_type': 'positionType',
        'custom_fields': 'customFields'
    }

    def __init__(self, id=None, create_date=None, modify_date=None, cart_id=None, description=None, current_fulfillment_process_id=None, current_work_batch_id=None, position_type=None, custom_fields=None):  # noqa: E501
        """Cart - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._create_date = None
        self._modify_date = None
        self._cart_id = None
        self._description = None
        self._current_fulfillment_process_id = None
        self._current_work_batch_id = None
        self._position_type = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if create_date is not None:
            self.create_date = create_date
        if modify_date is not None:
            self.modify_date = modify_date
        self.cart_id = cart_id
        if description is not None:
            self.description = description
        if current_fulfillment_process_id is not None:
            self.current_fulfillment_process_id = current_fulfillment_process_id
        if current_work_batch_id is not None:
            self.current_work_batch_id = current_work_batch_id
        self.position_type = position_type
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this Cart.  # noqa: E501


        :return: The id of this Cart.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Cart.


        :param id: The id of this Cart.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def create_date(self):
        """Gets the create_date of this Cart.  # noqa: E501


        :return: The create_date of this Cart.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this Cart.


        :param create_date: The create_date of this Cart.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def modify_date(self):
        """Gets the modify_date of this Cart.  # noqa: E501


        :return: The modify_date of this Cart.  # noqa: E501
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """Sets the modify_date of this Cart.


        :param modify_date: The modify_date of this Cart.  # noqa: E501
        :type: datetime
        """

        self._modify_date = modify_date

    @property
    def cart_id(self):
        """Gets the cart_id of this Cart.  # noqa: E501


        :return: The cart_id of this Cart.  # noqa: E501
        :rtype: str
        """
        return self._cart_id

    @cart_id.setter
    def cart_id(self, cart_id):
        """Sets the cart_id of this Cart.


        :param cart_id: The cart_id of this Cart.  # noqa: E501
        :type: str
        """
        if cart_id is None:
            raise ValueError("Invalid value for `cart_id`, must not be `None`")  # noqa: E501

        self._cart_id = cart_id

    @property
    def description(self):
        """Gets the description of this Cart.  # noqa: E501


        :return: The description of this Cart.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Cart.


        :param description: The description of this Cart.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def current_fulfillment_process_id(self):
        """Gets the current_fulfillment_process_id of this Cart.  # noqa: E501


        :return: The current_fulfillment_process_id of this Cart.  # noqa: E501
        :rtype: int
        """
        return self._current_fulfillment_process_id

    @current_fulfillment_process_id.setter
    def current_fulfillment_process_id(self, current_fulfillment_process_id):
        """Sets the current_fulfillment_process_id of this Cart.


        :param current_fulfillment_process_id: The current_fulfillment_process_id of this Cart.  # noqa: E501
        :type: int
        """

        self._current_fulfillment_process_id = current_fulfillment_process_id

    @property
    def current_work_batch_id(self):
        """Gets the current_work_batch_id of this Cart.  # noqa: E501


        :return: The current_work_batch_id of this Cart.  # noqa: E501
        :rtype: int
        """
        return self._current_work_batch_id

    @current_work_batch_id.setter
    def current_work_batch_id(self, current_work_batch_id):
        """Sets the current_work_batch_id of this Cart.


        :param current_work_batch_id: The current_work_batch_id of this Cart.  # noqa: E501
        :type: int
        """

        self._current_work_batch_id = current_work_batch_id

    @property
    def position_type(self):
        """Gets the position_type of this Cart.  # noqa: E501


        :return: The position_type of this Cart.  # noqa: E501
        :rtype: str
        """
        return self._position_type

    @position_type.setter
    def position_type(self, position_type):
        """Sets the position_type of this Cart.


        :param position_type: The position_type of this Cart.  # noqa: E501
        :type: str
        """
        if position_type is None:
            raise ValueError("Invalid value for `position_type`, must not be `None`")  # noqa: E501

        self._position_type = position_type

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Cart.  # noqa: E501


        :return: The custom_fields of this Cart.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Cart.


        :param custom_fields: The custom_fields of this Cart.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cart):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
