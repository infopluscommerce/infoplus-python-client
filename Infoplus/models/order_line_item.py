# coding: utf-8

"""
    Infoplus API

    Infoplus API.  # noqa: E501

    OpenAPI spec version: beta
    Contact: api@infopluscommerce.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderLineItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'quantity': 'int',
        'price': 'float',
        'discount': 'float',
        'sub_total': 'float',
        'original_price': 'float',
        'id': 'int',
        'sku': 'str',
        'description': 'str',
        'major_group': 'str',
        'sub_group': 'str',
        'available': 'int',
        'on_hand': 'int',
        'on_order': 'int',
        'discount_type': 'str',
        'discount_percent': 'float',
        'custom_price': 'float',
        'discounted_price': 'float',
        'alternate_sku': 'str',
        'is_gift_card': 'bool',
        'gift_card_amount': 'float',
        'gift_card_to': 'str',
        'gift_card_email': 'str',
        'gift_card_message': 'str',
        'account': 'str',
        'custom_fields': 'dict(str, object)'
    }

    attribute_map = {
        'quantity': 'quantity',
        'price': 'price',
        'discount': 'discount',
        'sub_total': 'subTotal',
        'original_price': 'originalPrice',
        'id': 'id',
        'sku': 'sku',
        'description': 'description',
        'major_group': 'majorGroup',
        'sub_group': 'subGroup',
        'available': 'available',
        'on_hand': 'onHand',
        'on_order': 'onOrder',
        'discount_type': 'discountType',
        'discount_percent': 'discountPercent',
        'custom_price': 'customPrice',
        'discounted_price': 'discountedPrice',
        'alternate_sku': 'alternateSKU',
        'is_gift_card': 'isGiftCard',
        'gift_card_amount': 'giftCardAmount',
        'gift_card_to': 'giftCardTo',
        'gift_card_email': 'giftCardEmail',
        'gift_card_message': 'giftCardMessage',
        'account': 'account',
        'custom_fields': 'customFields'
    }

    def __init__(self, quantity=None, price=None, discount=None, sub_total=None, original_price=None, id=None, sku=None, description=None, major_group=None, sub_group=None, available=None, on_hand=None, on_order=None, discount_type=None, discount_percent=None, custom_price=None, discounted_price=None, alternate_sku=None, is_gift_card=False, gift_card_amount=None, gift_card_to=None, gift_card_email=None, gift_card_message=None, account=None, custom_fields=None):  # noqa: E501
        """OrderLineItem - a model defined in Swagger"""  # noqa: E501

        self._quantity = None
        self._price = None
        self._discount = None
        self._sub_total = None
        self._original_price = None
        self._id = None
        self._sku = None
        self._description = None
        self._major_group = None
        self._sub_group = None
        self._available = None
        self._on_hand = None
        self._on_order = None
        self._discount_type = None
        self._discount_percent = None
        self._custom_price = None
        self._discounted_price = None
        self._alternate_sku = None
        self._is_gift_card = None
        self._gift_card_amount = None
        self._gift_card_to = None
        self._gift_card_email = None
        self._gift_card_message = None
        self._account = None
        self._custom_fields = None
        self.discriminator = None

        self.quantity = quantity
        if price is not None:
            self.price = price
        if discount is not None:
            self.discount = discount
        if sub_total is not None:
            self.sub_total = sub_total
        if original_price is not None:
            self.original_price = original_price
        if id is not None:
            self.id = id
        if sku is not None:
            self.sku = sku
        if description is not None:
            self.description = description
        if major_group is not None:
            self.major_group = major_group
        if sub_group is not None:
            self.sub_group = sub_group
        if available is not None:
            self.available = available
        if on_hand is not None:
            self.on_hand = on_hand
        if on_order is not None:
            self.on_order = on_order
        if discount_type is not None:
            self.discount_type = discount_type
        if discount_percent is not None:
            self.discount_percent = discount_percent
        if custom_price is not None:
            self.custom_price = custom_price
        if discounted_price is not None:
            self.discounted_price = discounted_price
        if alternate_sku is not None:
            self.alternate_sku = alternate_sku
        if is_gift_card is not None:
            self.is_gift_card = is_gift_card
        self.gift_card_amount = gift_card_amount
        self.gift_card_to = gift_card_to
        self.gift_card_email = gift_card_email
        self.gift_card_message = gift_card_message
        self.account = account
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def quantity(self):
        """Gets the quantity of this OrderLineItem.  # noqa: E501


        :return: The quantity of this OrderLineItem.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OrderLineItem.


        :param quantity: The quantity of this OrderLineItem.  # noqa: E501
        :type: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def price(self):
        """Gets the price of this OrderLineItem.  # noqa: E501


        :return: The price of this OrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OrderLineItem.


        :param price: The price of this OrderLineItem.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def discount(self):
        """Gets the discount of this OrderLineItem.  # noqa: E501


        :return: The discount of this OrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this OrderLineItem.


        :param discount: The discount of this OrderLineItem.  # noqa: E501
        :type: float
        """

        self._discount = discount

    @property
    def sub_total(self):
        """Gets the sub_total of this OrderLineItem.  # noqa: E501


        :return: The sub_total of this OrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._sub_total

    @sub_total.setter
    def sub_total(self, sub_total):
        """Sets the sub_total of this OrderLineItem.


        :param sub_total: The sub_total of this OrderLineItem.  # noqa: E501
        :type: float
        """

        self._sub_total = sub_total

    @property
    def original_price(self):
        """Gets the original_price of this OrderLineItem.  # noqa: E501


        :return: The original_price of this OrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._original_price

    @original_price.setter
    def original_price(self, original_price):
        """Sets the original_price of this OrderLineItem.


        :param original_price: The original_price of this OrderLineItem.  # noqa: E501
        :type: float
        """

        self._original_price = original_price

    @property
    def id(self):
        """Gets the id of this OrderLineItem.  # noqa: E501


        :return: The id of this OrderLineItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderLineItem.


        :param id: The id of this OrderLineItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def sku(self):
        """Gets the sku of this OrderLineItem.  # noqa: E501


        :return: The sku of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this OrderLineItem.


        :param sku: The sku of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def description(self):
        """Gets the description of this OrderLineItem.  # noqa: E501


        :return: The description of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OrderLineItem.


        :param description: The description of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def major_group(self):
        """Gets the major_group of this OrderLineItem.  # noqa: E501


        :return: The major_group of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._major_group

    @major_group.setter
    def major_group(self, major_group):
        """Sets the major_group of this OrderLineItem.


        :param major_group: The major_group of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._major_group = major_group

    @property
    def sub_group(self):
        """Gets the sub_group of this OrderLineItem.  # noqa: E501


        :return: The sub_group of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._sub_group

    @sub_group.setter
    def sub_group(self, sub_group):
        """Sets the sub_group of this OrderLineItem.


        :param sub_group: The sub_group of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._sub_group = sub_group

    @property
    def available(self):
        """Gets the available of this OrderLineItem.  # noqa: E501


        :return: The available of this OrderLineItem.  # noqa: E501
        :rtype: int
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this OrderLineItem.


        :param available: The available of this OrderLineItem.  # noqa: E501
        :type: int
        """

        self._available = available

    @property
    def on_hand(self):
        """Gets the on_hand of this OrderLineItem.  # noqa: E501


        :return: The on_hand of this OrderLineItem.  # noqa: E501
        :rtype: int
        """
        return self._on_hand

    @on_hand.setter
    def on_hand(self, on_hand):
        """Sets the on_hand of this OrderLineItem.


        :param on_hand: The on_hand of this OrderLineItem.  # noqa: E501
        :type: int
        """

        self._on_hand = on_hand

    @property
    def on_order(self):
        """Gets the on_order of this OrderLineItem.  # noqa: E501


        :return: The on_order of this OrderLineItem.  # noqa: E501
        :rtype: int
        """
        return self._on_order

    @on_order.setter
    def on_order(self, on_order):
        """Sets the on_order of this OrderLineItem.


        :param on_order: The on_order of this OrderLineItem.  # noqa: E501
        :type: int
        """

        self._on_order = on_order

    @property
    def discount_type(self):
        """Gets the discount_type of this OrderLineItem.  # noqa: E501


        :return: The discount_type of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._discount_type

    @discount_type.setter
    def discount_type(self, discount_type):
        """Sets the discount_type of this OrderLineItem.


        :param discount_type: The discount_type of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._discount_type = discount_type

    @property
    def discount_percent(self):
        """Gets the discount_percent of this OrderLineItem.  # noqa: E501


        :return: The discount_percent of this OrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._discount_percent

    @discount_percent.setter
    def discount_percent(self, discount_percent):
        """Sets the discount_percent of this OrderLineItem.


        :param discount_percent: The discount_percent of this OrderLineItem.  # noqa: E501
        :type: float
        """

        self._discount_percent = discount_percent

    @property
    def custom_price(self):
        """Gets the custom_price of this OrderLineItem.  # noqa: E501


        :return: The custom_price of this OrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._custom_price

    @custom_price.setter
    def custom_price(self, custom_price):
        """Sets the custom_price of this OrderLineItem.


        :param custom_price: The custom_price of this OrderLineItem.  # noqa: E501
        :type: float
        """

        self._custom_price = custom_price

    @property
    def discounted_price(self):
        """Gets the discounted_price of this OrderLineItem.  # noqa: E501


        :return: The discounted_price of this OrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._discounted_price

    @discounted_price.setter
    def discounted_price(self, discounted_price):
        """Sets the discounted_price of this OrderLineItem.


        :param discounted_price: The discounted_price of this OrderLineItem.  # noqa: E501
        :type: float
        """

        self._discounted_price = discounted_price

    @property
    def alternate_sku(self):
        """Gets the alternate_sku of this OrderLineItem.  # noqa: E501


        :return: The alternate_sku of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._alternate_sku

    @alternate_sku.setter
    def alternate_sku(self, alternate_sku):
        """Sets the alternate_sku of this OrderLineItem.


        :param alternate_sku: The alternate_sku of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._alternate_sku = alternate_sku

    @property
    def is_gift_card(self):
        """Gets the is_gift_card of this OrderLineItem.  # noqa: E501


        :return: The is_gift_card of this OrderLineItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_gift_card

    @is_gift_card.setter
    def is_gift_card(self, is_gift_card):
        """Sets the is_gift_card of this OrderLineItem.


        :param is_gift_card: The is_gift_card of this OrderLineItem.  # noqa: E501
        :type: bool
        """

        self._is_gift_card = is_gift_card

    @property
    def gift_card_amount(self):
        """Gets the gift_card_amount of this OrderLineItem.  # noqa: E501


        :return: The gift_card_amount of this OrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._gift_card_amount

    @gift_card_amount.setter
    def gift_card_amount(self, gift_card_amount):
        """Sets the gift_card_amount of this OrderLineItem.


        :param gift_card_amount: The gift_card_amount of this OrderLineItem.  # noqa: E501
        :type: float
        """
        if gift_card_amount is None:
            raise ValueError("Invalid value for `gift_card_amount`, must not be `None`")  # noqa: E501

        self._gift_card_amount = gift_card_amount

    @property
    def gift_card_to(self):
        """Gets the gift_card_to of this OrderLineItem.  # noqa: E501


        :return: The gift_card_to of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._gift_card_to

    @gift_card_to.setter
    def gift_card_to(self, gift_card_to):
        """Sets the gift_card_to of this OrderLineItem.


        :param gift_card_to: The gift_card_to of this OrderLineItem.  # noqa: E501
        :type: str
        """
        if gift_card_to is None:
            raise ValueError("Invalid value for `gift_card_to`, must not be `None`")  # noqa: E501

        self._gift_card_to = gift_card_to

    @property
    def gift_card_email(self):
        """Gets the gift_card_email of this OrderLineItem.  # noqa: E501


        :return: The gift_card_email of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._gift_card_email

    @gift_card_email.setter
    def gift_card_email(self, gift_card_email):
        """Sets the gift_card_email of this OrderLineItem.


        :param gift_card_email: The gift_card_email of this OrderLineItem.  # noqa: E501
        :type: str
        """
        if gift_card_email is None:
            raise ValueError("Invalid value for `gift_card_email`, must not be `None`")  # noqa: E501

        self._gift_card_email = gift_card_email

    @property
    def gift_card_message(self):
        """Gets the gift_card_message of this OrderLineItem.  # noqa: E501


        :return: The gift_card_message of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._gift_card_message

    @gift_card_message.setter
    def gift_card_message(self, gift_card_message):
        """Sets the gift_card_message of this OrderLineItem.


        :param gift_card_message: The gift_card_message of this OrderLineItem.  # noqa: E501
        :type: str
        """
        if gift_card_message is None:
            raise ValueError("Invalid value for `gift_card_message`, must not be `None`")  # noqa: E501

        self._gift_card_message = gift_card_message

    @property
    def account(self):
        """Gets the account of this OrderLineItem.  # noqa: E501


        :return: The account of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this OrderLineItem.


        :param account: The account of this OrderLineItem.  # noqa: E501
        :type: str
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def custom_fields(self):
        """Gets the custom_fields of this OrderLineItem.  # noqa: E501


        :return: The custom_fields of this OrderLineItem.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this OrderLineItem.


        :param custom_fields: The custom_fields of this OrderLineItem.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderLineItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
