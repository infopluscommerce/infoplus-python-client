# coding: utf-8

"""
    Infoplus API

    Infoplus API.  # noqa: E501

    OpenAPI spec version: v3.0
    Contact: api@infopluscommerce.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ItemReceipt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'po_no_id': 'int',
        'lob_id': 'int',
        'legacy_po_no': 'str',
        'warehouse_id': 'int',
        'order_date': 'datetime',
        'full_description': 'str',
        'fact_cost': 'float',
        'ml_cost': 'float',
        'sku': 'str',
        'order_quantity': 'int',
        'requested_delivery_date': 'datetime',
        'unit_code': 'str',
        'wrap_code': 'str',
        'units_per_wrap': 'int',
        'cost': 'float',
        'sell_price': 'float',
        'pricing_per': 'str',
        'max_freight': 'float',
        'charge_freight': 'str',
        'max_other': 'float',
        'dist_date': 'datetime',
        'void_date': 'datetime',
        'freeze_action': 'str',
        'rev_date': 'str',
        'expiration_date': 'datetime',
        'art_back': 'str',
        'origin': 'str',
        'sample': 'int',
        'sample_to': 'str',
        'max_overs': 'int',
        'max_unders': 'int',
        'received_sfp': 'int',
        'budget_code': 'str',
        'accounting_code': 'str',
        'tax_exempt': 'str',
        'capitalize': 'str',
        'accrual': 'str',
        'odd_quantity': 'int',
        'freight_cost': 'float',
        'received_date': 'datetime',
        'received_quantity': 'int',
        'from_prod': 'int',
        'sfp_complete': 'str',
        'end_quantity': 'int',
        'end_val': 'float',
        'end_fact': 'float',
        'interim_quantity': 'int',
        'interim_val': 'float',
        'interim_fact': 'float',
        'last_act': 'datetime',
        'weight_per_wrap': 'float',
        'norcs': 'str',
        'vendor_id': 'int',
        'bs_vendor': 'int',
        'ml_vendor': 'int',
        'receipt_no': 'int',
        'paid_full': 'str',
        'entered_by': 'str',
        'received_by': 'str',
        'line_no': 'int',
        'prod_lot': 'str',
        'product_id_tag': 'str',
        'units_per_inner_pack': 'int',
        'units_per_case': 'int',
        'units_per_pallet': 'int',
        'case_weight': 'float',
        'height': 'float',
        'width': 'float',
        'length': 'float',
        'dock_date': 'datetime',
        'modify_date': 'datetime',
        'impressions': 'int',
        'asn_line': 'int',
        'upc': 'str',
        'vendor_sku': 'str',
        'custom_fields': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'po_no_id': 'poNoId',
        'lob_id': 'lobId',
        'legacy_po_no': 'legacyPoNo',
        'warehouse_id': 'warehouseId',
        'order_date': 'orderDate',
        'full_description': 'fullDescription',
        'fact_cost': 'factCost',
        'ml_cost': 'mlCost',
        'sku': 'sku',
        'order_quantity': 'orderQuantity',
        'requested_delivery_date': 'requestedDeliveryDate',
        'unit_code': 'unitCode',
        'wrap_code': 'wrapCode',
        'units_per_wrap': 'unitsPerWrap',
        'cost': 'cost',
        'sell_price': 'sellPrice',
        'pricing_per': 'pricingPer',
        'max_freight': 'maxFreight',
        'charge_freight': 'chargeFreight',
        'max_other': 'maxOther',
        'dist_date': 'distDate',
        'void_date': 'voidDate',
        'freeze_action': 'freezeAction',
        'rev_date': 'revDate',
        'expiration_date': 'expirationDate',
        'art_back': 'artBack',
        'origin': 'origin',
        'sample': 'sample',
        'sample_to': 'sampleTo',
        'max_overs': 'maxOvers',
        'max_unders': 'maxUnders',
        'received_sfp': 'receivedSfp',
        'budget_code': 'budgetCode',
        'accounting_code': 'accountingCode',
        'tax_exempt': 'taxExempt',
        'capitalize': 'capitalize',
        'accrual': 'accrual',
        'odd_quantity': 'oddQuantity',
        'freight_cost': 'freightCost',
        'received_date': 'receivedDate',
        'received_quantity': 'receivedQuantity',
        'from_prod': 'fromProd',
        'sfp_complete': 'sfpComplete',
        'end_quantity': 'endQuantity',
        'end_val': 'endVal',
        'end_fact': 'endFact',
        'interim_quantity': 'interimQuantity',
        'interim_val': 'interimVal',
        'interim_fact': 'interimFact',
        'last_act': 'lastAct',
        'weight_per_wrap': 'weightPerWrap',
        'norcs': 'norcs',
        'vendor_id': 'vendorId',
        'bs_vendor': 'bsVendor',
        'ml_vendor': 'mlVendor',
        'receipt_no': 'receiptNo',
        'paid_full': 'paidFull',
        'entered_by': 'enteredBy',
        'received_by': 'receivedBy',
        'line_no': 'lineNo',
        'prod_lot': 'prodLot',
        'product_id_tag': 'productIdTag',
        'units_per_inner_pack': 'unitsPerInnerPack',
        'units_per_case': 'unitsPerCase',
        'units_per_pallet': 'unitsPerPallet',
        'case_weight': 'caseWeight',
        'height': 'height',
        'width': 'width',
        'length': 'length',
        'dock_date': 'dockDate',
        'modify_date': 'modifyDate',
        'impressions': 'impressions',
        'asn_line': 'asnLine',
        'upc': 'upc',
        'vendor_sku': 'vendorSKU',
        'custom_fields': 'customFields'
    }

    def __init__(self, id=None, po_no_id=None, lob_id=None, legacy_po_no=None, warehouse_id=None, order_date=None, full_description=None, fact_cost=None, ml_cost=None, sku=None, order_quantity=None, requested_delivery_date=None, unit_code=None, wrap_code=None, units_per_wrap=None, cost=None, sell_price=None, pricing_per=None, max_freight=None, charge_freight=None, max_other=None, dist_date=None, void_date=None, freeze_action=None, rev_date=None, expiration_date=None, art_back=None, origin=None, sample=None, sample_to=None, max_overs=None, max_unders=None, received_sfp=None, budget_code=None, accounting_code=None, tax_exempt=None, capitalize=None, accrual=None, odd_quantity=None, freight_cost=None, received_date=None, received_quantity=None, from_prod=None, sfp_complete=None, end_quantity=None, end_val=None, end_fact=None, interim_quantity=None, interim_val=None, interim_fact=None, last_act=None, weight_per_wrap=None, norcs=None, vendor_id=None, bs_vendor=None, ml_vendor=None, receipt_no=None, paid_full=None, entered_by=None, received_by=None, line_no=None, prod_lot=None, product_id_tag=None, units_per_inner_pack=None, units_per_case=None, units_per_pallet=None, case_weight=None, height=None, width=None, length=None, dock_date=None, modify_date=None, impressions=None, asn_line=None, upc=None, vendor_sku=None, custom_fields=None):  # noqa: E501
        """ItemReceipt - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._po_no_id = None
        self._lob_id = None
        self._legacy_po_no = None
        self._warehouse_id = None
        self._order_date = None
        self._full_description = None
        self._fact_cost = None
        self._ml_cost = None
        self._sku = None
        self._order_quantity = None
        self._requested_delivery_date = None
        self._unit_code = None
        self._wrap_code = None
        self._units_per_wrap = None
        self._cost = None
        self._sell_price = None
        self._pricing_per = None
        self._max_freight = None
        self._charge_freight = None
        self._max_other = None
        self._dist_date = None
        self._void_date = None
        self._freeze_action = None
        self._rev_date = None
        self._expiration_date = None
        self._art_back = None
        self._origin = None
        self._sample = None
        self._sample_to = None
        self._max_overs = None
        self._max_unders = None
        self._received_sfp = None
        self._budget_code = None
        self._accounting_code = None
        self._tax_exempt = None
        self._capitalize = None
        self._accrual = None
        self._odd_quantity = None
        self._freight_cost = None
        self._received_date = None
        self._received_quantity = None
        self._from_prod = None
        self._sfp_complete = None
        self._end_quantity = None
        self._end_val = None
        self._end_fact = None
        self._interim_quantity = None
        self._interim_val = None
        self._interim_fact = None
        self._last_act = None
        self._weight_per_wrap = None
        self._norcs = None
        self._vendor_id = None
        self._bs_vendor = None
        self._ml_vendor = None
        self._receipt_no = None
        self._paid_full = None
        self._entered_by = None
        self._received_by = None
        self._line_no = None
        self._prod_lot = None
        self._product_id_tag = None
        self._units_per_inner_pack = None
        self._units_per_case = None
        self._units_per_pallet = None
        self._case_weight = None
        self._height = None
        self._width = None
        self._length = None
        self._dock_date = None
        self._modify_date = None
        self._impressions = None
        self._asn_line = None
        self._upc = None
        self._vendor_sku = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if po_no_id is not None:
            self.po_no_id = po_no_id
        self.lob_id = lob_id
        if legacy_po_no is not None:
            self.legacy_po_no = legacy_po_no
        self.warehouse_id = warehouse_id
        if order_date is not None:
            self.order_date = order_date
        if full_description is not None:
            self.full_description = full_description
        if fact_cost is not None:
            self.fact_cost = fact_cost
        if ml_cost is not None:
            self.ml_cost = ml_cost
        self.sku = sku
        self.order_quantity = order_quantity
        if requested_delivery_date is not None:
            self.requested_delivery_date = requested_delivery_date
        self.unit_code = unit_code
        self.wrap_code = wrap_code
        self.units_per_wrap = units_per_wrap
        if cost is not None:
            self.cost = cost
        if sell_price is not None:
            self.sell_price = sell_price
        if pricing_per is not None:
            self.pricing_per = pricing_per
        if max_freight is not None:
            self.max_freight = max_freight
        self.charge_freight = charge_freight
        if max_other is not None:
            self.max_other = max_other
        self.dist_date = dist_date
        if void_date is not None:
            self.void_date = void_date
        if freeze_action is not None:
            self.freeze_action = freeze_action
        if rev_date is not None:
            self.rev_date = rev_date
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if art_back is not None:
            self.art_back = art_back
        if origin is not None:
            self.origin = origin
        if sample is not None:
            self.sample = sample
        if sample_to is not None:
            self.sample_to = sample_to
        self.max_overs = max_overs
        self.max_unders = max_unders
        if received_sfp is not None:
            self.received_sfp = received_sfp
        if budget_code is not None:
            self.budget_code = budget_code
        if accounting_code is not None:
            self.accounting_code = accounting_code
        if tax_exempt is not None:
            self.tax_exempt = tax_exempt
        if capitalize is not None:
            self.capitalize = capitalize
        if accrual is not None:
            self.accrual = accrual
        if odd_quantity is not None:
            self.odd_quantity = odd_quantity
        if freight_cost is not None:
            self.freight_cost = freight_cost
        if received_date is not None:
            self.received_date = received_date
        if received_quantity is not None:
            self.received_quantity = received_quantity
        if from_prod is not None:
            self.from_prod = from_prod
        if sfp_complete is not None:
            self.sfp_complete = sfp_complete
        if end_quantity is not None:
            self.end_quantity = end_quantity
        if end_val is not None:
            self.end_val = end_val
        if end_fact is not None:
            self.end_fact = end_fact
        if interim_quantity is not None:
            self.interim_quantity = interim_quantity
        if interim_val is not None:
            self.interim_val = interim_val
        if interim_fact is not None:
            self.interim_fact = interim_fact
        if last_act is not None:
            self.last_act = last_act
        if weight_per_wrap is not None:
            self.weight_per_wrap = weight_per_wrap
        if norcs is not None:
            self.norcs = norcs
        self.vendor_id = vendor_id
        if bs_vendor is not None:
            self.bs_vendor = bs_vendor
        if ml_vendor is not None:
            self.ml_vendor = ml_vendor
        if receipt_no is not None:
            self.receipt_no = receipt_no
        if paid_full is not None:
            self.paid_full = paid_full
        if entered_by is not None:
            self.entered_by = entered_by
        if received_by is not None:
            self.received_by = received_by
        if line_no is not None:
            self.line_no = line_no
        if prod_lot is not None:
            self.prod_lot = prod_lot
        if product_id_tag is not None:
            self.product_id_tag = product_id_tag
        if units_per_inner_pack is not None:
            self.units_per_inner_pack = units_per_inner_pack
        if units_per_case is not None:
            self.units_per_case = units_per_case
        if units_per_pallet is not None:
            self.units_per_pallet = units_per_pallet
        if case_weight is not None:
            self.case_weight = case_weight
        if height is not None:
            self.height = height
        if width is not None:
            self.width = width
        if length is not None:
            self.length = length
        if dock_date is not None:
            self.dock_date = dock_date
        if modify_date is not None:
            self.modify_date = modify_date
        if impressions is not None:
            self.impressions = impressions
        if asn_line is not None:
            self.asn_line = asn_line
        if upc is not None:
            self.upc = upc
        if vendor_sku is not None:
            self.vendor_sku = vendor_sku
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this ItemReceipt.  # noqa: E501


        :return: The id of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ItemReceipt.


        :param id: The id of this ItemReceipt.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def po_no_id(self):
        """Gets the po_no_id of this ItemReceipt.  # noqa: E501


        :return: The po_no_id of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._po_no_id

    @po_no_id.setter
    def po_no_id(self, po_no_id):
        """Sets the po_no_id of this ItemReceipt.


        :param po_no_id: The po_no_id of this ItemReceipt.  # noqa: E501
        :type: int
        """

        self._po_no_id = po_no_id

    @property
    def lob_id(self):
        """Gets the lob_id of this ItemReceipt.  # noqa: E501


        :return: The lob_id of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """Sets the lob_id of this ItemReceipt.


        :param lob_id: The lob_id of this ItemReceipt.  # noqa: E501
        :type: int
        """
        if lob_id is None:
            raise ValueError("Invalid value for `lob_id`, must not be `None`")  # noqa: E501

        self._lob_id = lob_id

    @property
    def legacy_po_no(self):
        """Gets the legacy_po_no of this ItemReceipt.  # noqa: E501


        :return: The legacy_po_no of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._legacy_po_no

    @legacy_po_no.setter
    def legacy_po_no(self, legacy_po_no):
        """Sets the legacy_po_no of this ItemReceipt.


        :param legacy_po_no: The legacy_po_no of this ItemReceipt.  # noqa: E501
        :type: str
        """

        self._legacy_po_no = legacy_po_no

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this ItemReceipt.  # noqa: E501


        :return: The warehouse_id of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this ItemReceipt.


        :param warehouse_id: The warehouse_id of this ItemReceipt.  # noqa: E501
        :type: int
        """
        if warehouse_id is None:
            raise ValueError("Invalid value for `warehouse_id`, must not be `None`")  # noqa: E501

        self._warehouse_id = warehouse_id

    @property
    def order_date(self):
        """Gets the order_date of this ItemReceipt.  # noqa: E501


        :return: The order_date of this ItemReceipt.  # noqa: E501
        :rtype: datetime
        """
        return self._order_date

    @order_date.setter
    def order_date(self, order_date):
        """Sets the order_date of this ItemReceipt.


        :param order_date: The order_date of this ItemReceipt.  # noqa: E501
        :type: datetime
        """

        self._order_date = order_date

    @property
    def full_description(self):
        """Gets the full_description of this ItemReceipt.  # noqa: E501


        :return: The full_description of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._full_description

    @full_description.setter
    def full_description(self, full_description):
        """Sets the full_description of this ItemReceipt.


        :param full_description: The full_description of this ItemReceipt.  # noqa: E501
        :type: str
        """

        self._full_description = full_description

    @property
    def fact_cost(self):
        """Gets the fact_cost of this ItemReceipt.  # noqa: E501


        :return: The fact_cost of this ItemReceipt.  # noqa: E501
        :rtype: float
        """
        return self._fact_cost

    @fact_cost.setter
    def fact_cost(self, fact_cost):
        """Sets the fact_cost of this ItemReceipt.


        :param fact_cost: The fact_cost of this ItemReceipt.  # noqa: E501
        :type: float
        """

        self._fact_cost = fact_cost

    @property
    def ml_cost(self):
        """Gets the ml_cost of this ItemReceipt.  # noqa: E501


        :return: The ml_cost of this ItemReceipt.  # noqa: E501
        :rtype: float
        """
        return self._ml_cost

    @ml_cost.setter
    def ml_cost(self, ml_cost):
        """Sets the ml_cost of this ItemReceipt.


        :param ml_cost: The ml_cost of this ItemReceipt.  # noqa: E501
        :type: float
        """

        self._ml_cost = ml_cost

    @property
    def sku(self):
        """Gets the sku of this ItemReceipt.  # noqa: E501


        :return: The sku of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ItemReceipt.


        :param sku: The sku of this ItemReceipt.  # noqa: E501
        :type: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")  # noqa: E501

        self._sku = sku

    @property
    def order_quantity(self):
        """Gets the order_quantity of this ItemReceipt.  # noqa: E501


        :return: The order_quantity of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._order_quantity

    @order_quantity.setter
    def order_quantity(self, order_quantity):
        """Sets the order_quantity of this ItemReceipt.


        :param order_quantity: The order_quantity of this ItemReceipt.  # noqa: E501
        :type: int
        """
        if order_quantity is None:
            raise ValueError("Invalid value for `order_quantity`, must not be `None`")  # noqa: E501

        self._order_quantity = order_quantity

    @property
    def requested_delivery_date(self):
        """Gets the requested_delivery_date of this ItemReceipt.  # noqa: E501


        :return: The requested_delivery_date of this ItemReceipt.  # noqa: E501
        :rtype: datetime
        """
        return self._requested_delivery_date

    @requested_delivery_date.setter
    def requested_delivery_date(self, requested_delivery_date):
        """Sets the requested_delivery_date of this ItemReceipt.


        :param requested_delivery_date: The requested_delivery_date of this ItemReceipt.  # noqa: E501
        :type: datetime
        """

        self._requested_delivery_date = requested_delivery_date

    @property
    def unit_code(self):
        """Gets the unit_code of this ItemReceipt.  # noqa: E501


        :return: The unit_code of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._unit_code

    @unit_code.setter
    def unit_code(self, unit_code):
        """Sets the unit_code of this ItemReceipt.


        :param unit_code: The unit_code of this ItemReceipt.  # noqa: E501
        :type: str
        """
        if unit_code is None:
            raise ValueError("Invalid value for `unit_code`, must not be `None`")  # noqa: E501

        self._unit_code = unit_code

    @property
    def wrap_code(self):
        """Gets the wrap_code of this ItemReceipt.  # noqa: E501


        :return: The wrap_code of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._wrap_code

    @wrap_code.setter
    def wrap_code(self, wrap_code):
        """Sets the wrap_code of this ItemReceipt.


        :param wrap_code: The wrap_code of this ItemReceipt.  # noqa: E501
        :type: str
        """
        if wrap_code is None:
            raise ValueError("Invalid value for `wrap_code`, must not be `None`")  # noqa: E501

        self._wrap_code = wrap_code

    @property
    def units_per_wrap(self):
        """Gets the units_per_wrap of this ItemReceipt.  # noqa: E501


        :return: The units_per_wrap of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._units_per_wrap

    @units_per_wrap.setter
    def units_per_wrap(self, units_per_wrap):
        """Sets the units_per_wrap of this ItemReceipt.


        :param units_per_wrap: The units_per_wrap of this ItemReceipt.  # noqa: E501
        :type: int
        """
        if units_per_wrap is None:
            raise ValueError("Invalid value for `units_per_wrap`, must not be `None`")  # noqa: E501

        self._units_per_wrap = units_per_wrap

    @property
    def cost(self):
        """Gets the cost of this ItemReceipt.  # noqa: E501


        :return: The cost of this ItemReceipt.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this ItemReceipt.


        :param cost: The cost of this ItemReceipt.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def sell_price(self):
        """Gets the sell_price of this ItemReceipt.  # noqa: E501


        :return: The sell_price of this ItemReceipt.  # noqa: E501
        :rtype: float
        """
        return self._sell_price

    @sell_price.setter
    def sell_price(self, sell_price):
        """Sets the sell_price of this ItemReceipt.


        :param sell_price: The sell_price of this ItemReceipt.  # noqa: E501
        :type: float
        """

        self._sell_price = sell_price

    @property
    def pricing_per(self):
        """Gets the pricing_per of this ItemReceipt.  # noqa: E501


        :return: The pricing_per of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._pricing_per

    @pricing_per.setter
    def pricing_per(self, pricing_per):
        """Sets the pricing_per of this ItemReceipt.


        :param pricing_per: The pricing_per of this ItemReceipt.  # noqa: E501
        :type: str
        """

        self._pricing_per = pricing_per

    @property
    def max_freight(self):
        """Gets the max_freight of this ItemReceipt.  # noqa: E501


        :return: The max_freight of this ItemReceipt.  # noqa: E501
        :rtype: float
        """
        return self._max_freight

    @max_freight.setter
    def max_freight(self, max_freight):
        """Sets the max_freight of this ItemReceipt.


        :param max_freight: The max_freight of this ItemReceipt.  # noqa: E501
        :type: float
        """

        self._max_freight = max_freight

    @property
    def charge_freight(self):
        """Gets the charge_freight of this ItemReceipt.  # noqa: E501


        :return: The charge_freight of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._charge_freight

    @charge_freight.setter
    def charge_freight(self, charge_freight):
        """Sets the charge_freight of this ItemReceipt.


        :param charge_freight: The charge_freight of this ItemReceipt.  # noqa: E501
        :type: str
        """
        if charge_freight is None:
            raise ValueError("Invalid value for `charge_freight`, must not be `None`")  # noqa: E501

        self._charge_freight = charge_freight

    @property
    def max_other(self):
        """Gets the max_other of this ItemReceipt.  # noqa: E501


        :return: The max_other of this ItemReceipt.  # noqa: E501
        :rtype: float
        """
        return self._max_other

    @max_other.setter
    def max_other(self, max_other):
        """Sets the max_other of this ItemReceipt.


        :param max_other: The max_other of this ItemReceipt.  # noqa: E501
        :type: float
        """

        self._max_other = max_other

    @property
    def dist_date(self):
        """Gets the dist_date of this ItemReceipt.  # noqa: E501


        :return: The dist_date of this ItemReceipt.  # noqa: E501
        :rtype: datetime
        """
        return self._dist_date

    @dist_date.setter
    def dist_date(self, dist_date):
        """Sets the dist_date of this ItemReceipt.


        :param dist_date: The dist_date of this ItemReceipt.  # noqa: E501
        :type: datetime
        """
        if dist_date is None:
            raise ValueError("Invalid value for `dist_date`, must not be `None`")  # noqa: E501

        self._dist_date = dist_date

    @property
    def void_date(self):
        """Gets the void_date of this ItemReceipt.  # noqa: E501


        :return: The void_date of this ItemReceipt.  # noqa: E501
        :rtype: datetime
        """
        return self._void_date

    @void_date.setter
    def void_date(self, void_date):
        """Sets the void_date of this ItemReceipt.


        :param void_date: The void_date of this ItemReceipt.  # noqa: E501
        :type: datetime
        """

        self._void_date = void_date

    @property
    def freeze_action(self):
        """Gets the freeze_action of this ItemReceipt.  # noqa: E501


        :return: The freeze_action of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._freeze_action

    @freeze_action.setter
    def freeze_action(self, freeze_action):
        """Sets the freeze_action of this ItemReceipt.


        :param freeze_action: The freeze_action of this ItemReceipt.  # noqa: E501
        :type: str
        """

        self._freeze_action = freeze_action

    @property
    def rev_date(self):
        """Gets the rev_date of this ItemReceipt.  # noqa: E501


        :return: The rev_date of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._rev_date

    @rev_date.setter
    def rev_date(self, rev_date):
        """Sets the rev_date of this ItemReceipt.


        :param rev_date: The rev_date of this ItemReceipt.  # noqa: E501
        :type: str
        """

        self._rev_date = rev_date

    @property
    def expiration_date(self):
        """Gets the expiration_date of this ItemReceipt.  # noqa: E501


        :return: The expiration_date of this ItemReceipt.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this ItemReceipt.


        :param expiration_date: The expiration_date of this ItemReceipt.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def art_back(self):
        """Gets the art_back of this ItemReceipt.  # noqa: E501


        :return: The art_back of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._art_back

    @art_back.setter
    def art_back(self, art_back):
        """Sets the art_back of this ItemReceipt.


        :param art_back: The art_back of this ItemReceipt.  # noqa: E501
        :type: str
        """

        self._art_back = art_back

    @property
    def origin(self):
        """Gets the origin of this ItemReceipt.  # noqa: E501


        :return: The origin of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this ItemReceipt.


        :param origin: The origin of this ItemReceipt.  # noqa: E501
        :type: str
        """

        self._origin = origin

    @property
    def sample(self):
        """Gets the sample of this ItemReceipt.  # noqa: E501


        :return: The sample of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._sample

    @sample.setter
    def sample(self, sample):
        """Sets the sample of this ItemReceipt.


        :param sample: The sample of this ItemReceipt.  # noqa: E501
        :type: int
        """

        self._sample = sample

    @property
    def sample_to(self):
        """Gets the sample_to of this ItemReceipt.  # noqa: E501


        :return: The sample_to of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._sample_to

    @sample_to.setter
    def sample_to(self, sample_to):
        """Sets the sample_to of this ItemReceipt.


        :param sample_to: The sample_to of this ItemReceipt.  # noqa: E501
        :type: str
        """

        self._sample_to = sample_to

    @property
    def max_overs(self):
        """Gets the max_overs of this ItemReceipt.  # noqa: E501


        :return: The max_overs of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._max_overs

    @max_overs.setter
    def max_overs(self, max_overs):
        """Sets the max_overs of this ItemReceipt.


        :param max_overs: The max_overs of this ItemReceipt.  # noqa: E501
        :type: int
        """
        if max_overs is None:
            raise ValueError("Invalid value for `max_overs`, must not be `None`")  # noqa: E501

        self._max_overs = max_overs

    @property
    def max_unders(self):
        """Gets the max_unders of this ItemReceipt.  # noqa: E501


        :return: The max_unders of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._max_unders

    @max_unders.setter
    def max_unders(self, max_unders):
        """Sets the max_unders of this ItemReceipt.


        :param max_unders: The max_unders of this ItemReceipt.  # noqa: E501
        :type: int
        """
        if max_unders is None:
            raise ValueError("Invalid value for `max_unders`, must not be `None`")  # noqa: E501

        self._max_unders = max_unders

    @property
    def received_sfp(self):
        """Gets the received_sfp of this ItemReceipt.  # noqa: E501


        :return: The received_sfp of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._received_sfp

    @received_sfp.setter
    def received_sfp(self, received_sfp):
        """Sets the received_sfp of this ItemReceipt.


        :param received_sfp: The received_sfp of this ItemReceipt.  # noqa: E501
        :type: int
        """

        self._received_sfp = received_sfp

    @property
    def budget_code(self):
        """Gets the budget_code of this ItemReceipt.  # noqa: E501


        :return: The budget_code of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._budget_code

    @budget_code.setter
    def budget_code(self, budget_code):
        """Sets the budget_code of this ItemReceipt.


        :param budget_code: The budget_code of this ItemReceipt.  # noqa: E501
        :type: str
        """

        self._budget_code = budget_code

    @property
    def accounting_code(self):
        """Gets the accounting_code of this ItemReceipt.  # noqa: E501


        :return: The accounting_code of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """Sets the accounting_code of this ItemReceipt.


        :param accounting_code: The accounting_code of this ItemReceipt.  # noqa: E501
        :type: str
        """

        self._accounting_code = accounting_code

    @property
    def tax_exempt(self):
        """Gets the tax_exempt of this ItemReceipt.  # noqa: E501


        :return: The tax_exempt of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._tax_exempt

    @tax_exempt.setter
    def tax_exempt(self, tax_exempt):
        """Sets the tax_exempt of this ItemReceipt.


        :param tax_exempt: The tax_exempt of this ItemReceipt.  # noqa: E501
        :type: str
        """

        self._tax_exempt = tax_exempt

    @property
    def capitalize(self):
        """Gets the capitalize of this ItemReceipt.  # noqa: E501


        :return: The capitalize of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._capitalize

    @capitalize.setter
    def capitalize(self, capitalize):
        """Sets the capitalize of this ItemReceipt.


        :param capitalize: The capitalize of this ItemReceipt.  # noqa: E501
        :type: str
        """

        self._capitalize = capitalize

    @property
    def accrual(self):
        """Gets the accrual of this ItemReceipt.  # noqa: E501


        :return: The accrual of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._accrual

    @accrual.setter
    def accrual(self, accrual):
        """Sets the accrual of this ItemReceipt.


        :param accrual: The accrual of this ItemReceipt.  # noqa: E501
        :type: str
        """

        self._accrual = accrual

    @property
    def odd_quantity(self):
        """Gets the odd_quantity of this ItemReceipt.  # noqa: E501


        :return: The odd_quantity of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._odd_quantity

    @odd_quantity.setter
    def odd_quantity(self, odd_quantity):
        """Sets the odd_quantity of this ItemReceipt.


        :param odd_quantity: The odd_quantity of this ItemReceipt.  # noqa: E501
        :type: int
        """

        self._odd_quantity = odd_quantity

    @property
    def freight_cost(self):
        """Gets the freight_cost of this ItemReceipt.  # noqa: E501


        :return: The freight_cost of this ItemReceipt.  # noqa: E501
        :rtype: float
        """
        return self._freight_cost

    @freight_cost.setter
    def freight_cost(self, freight_cost):
        """Sets the freight_cost of this ItemReceipt.


        :param freight_cost: The freight_cost of this ItemReceipt.  # noqa: E501
        :type: float
        """

        self._freight_cost = freight_cost

    @property
    def received_date(self):
        """Gets the received_date of this ItemReceipt.  # noqa: E501


        :return: The received_date of this ItemReceipt.  # noqa: E501
        :rtype: datetime
        """
        return self._received_date

    @received_date.setter
    def received_date(self, received_date):
        """Sets the received_date of this ItemReceipt.


        :param received_date: The received_date of this ItemReceipt.  # noqa: E501
        :type: datetime
        """

        self._received_date = received_date

    @property
    def received_quantity(self):
        """Gets the received_quantity of this ItemReceipt.  # noqa: E501


        :return: The received_quantity of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._received_quantity

    @received_quantity.setter
    def received_quantity(self, received_quantity):
        """Sets the received_quantity of this ItemReceipt.


        :param received_quantity: The received_quantity of this ItemReceipt.  # noqa: E501
        :type: int
        """

        self._received_quantity = received_quantity

    @property
    def from_prod(self):
        """Gets the from_prod of this ItemReceipt.  # noqa: E501


        :return: The from_prod of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._from_prod

    @from_prod.setter
    def from_prod(self, from_prod):
        """Sets the from_prod of this ItemReceipt.


        :param from_prod: The from_prod of this ItemReceipt.  # noqa: E501
        :type: int
        """

        self._from_prod = from_prod

    @property
    def sfp_complete(self):
        """Gets the sfp_complete of this ItemReceipt.  # noqa: E501


        :return: The sfp_complete of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._sfp_complete

    @sfp_complete.setter
    def sfp_complete(self, sfp_complete):
        """Sets the sfp_complete of this ItemReceipt.


        :param sfp_complete: The sfp_complete of this ItemReceipt.  # noqa: E501
        :type: str
        """

        self._sfp_complete = sfp_complete

    @property
    def end_quantity(self):
        """Gets the end_quantity of this ItemReceipt.  # noqa: E501


        :return: The end_quantity of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._end_quantity

    @end_quantity.setter
    def end_quantity(self, end_quantity):
        """Sets the end_quantity of this ItemReceipt.


        :param end_quantity: The end_quantity of this ItemReceipt.  # noqa: E501
        :type: int
        """

        self._end_quantity = end_quantity

    @property
    def end_val(self):
        """Gets the end_val of this ItemReceipt.  # noqa: E501


        :return: The end_val of this ItemReceipt.  # noqa: E501
        :rtype: float
        """
        return self._end_val

    @end_val.setter
    def end_val(self, end_val):
        """Sets the end_val of this ItemReceipt.


        :param end_val: The end_val of this ItemReceipt.  # noqa: E501
        :type: float
        """

        self._end_val = end_val

    @property
    def end_fact(self):
        """Gets the end_fact of this ItemReceipt.  # noqa: E501


        :return: The end_fact of this ItemReceipt.  # noqa: E501
        :rtype: float
        """
        return self._end_fact

    @end_fact.setter
    def end_fact(self, end_fact):
        """Sets the end_fact of this ItemReceipt.


        :param end_fact: The end_fact of this ItemReceipt.  # noqa: E501
        :type: float
        """

        self._end_fact = end_fact

    @property
    def interim_quantity(self):
        """Gets the interim_quantity of this ItemReceipt.  # noqa: E501


        :return: The interim_quantity of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._interim_quantity

    @interim_quantity.setter
    def interim_quantity(self, interim_quantity):
        """Sets the interim_quantity of this ItemReceipt.


        :param interim_quantity: The interim_quantity of this ItemReceipt.  # noqa: E501
        :type: int
        """

        self._interim_quantity = interim_quantity

    @property
    def interim_val(self):
        """Gets the interim_val of this ItemReceipt.  # noqa: E501


        :return: The interim_val of this ItemReceipt.  # noqa: E501
        :rtype: float
        """
        return self._interim_val

    @interim_val.setter
    def interim_val(self, interim_val):
        """Sets the interim_val of this ItemReceipt.


        :param interim_val: The interim_val of this ItemReceipt.  # noqa: E501
        :type: float
        """

        self._interim_val = interim_val

    @property
    def interim_fact(self):
        """Gets the interim_fact of this ItemReceipt.  # noqa: E501


        :return: The interim_fact of this ItemReceipt.  # noqa: E501
        :rtype: float
        """
        return self._interim_fact

    @interim_fact.setter
    def interim_fact(self, interim_fact):
        """Sets the interim_fact of this ItemReceipt.


        :param interim_fact: The interim_fact of this ItemReceipt.  # noqa: E501
        :type: float
        """

        self._interim_fact = interim_fact

    @property
    def last_act(self):
        """Gets the last_act of this ItemReceipt.  # noqa: E501


        :return: The last_act of this ItemReceipt.  # noqa: E501
        :rtype: datetime
        """
        return self._last_act

    @last_act.setter
    def last_act(self, last_act):
        """Sets the last_act of this ItemReceipt.


        :param last_act: The last_act of this ItemReceipt.  # noqa: E501
        :type: datetime
        """

        self._last_act = last_act

    @property
    def weight_per_wrap(self):
        """Gets the weight_per_wrap of this ItemReceipt.  # noqa: E501


        :return: The weight_per_wrap of this ItemReceipt.  # noqa: E501
        :rtype: float
        """
        return self._weight_per_wrap

    @weight_per_wrap.setter
    def weight_per_wrap(self, weight_per_wrap):
        """Sets the weight_per_wrap of this ItemReceipt.


        :param weight_per_wrap: The weight_per_wrap of this ItemReceipt.  # noqa: E501
        :type: float
        """

        self._weight_per_wrap = weight_per_wrap

    @property
    def norcs(self):
        """Gets the norcs of this ItemReceipt.  # noqa: E501


        :return: The norcs of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._norcs

    @norcs.setter
    def norcs(self, norcs):
        """Sets the norcs of this ItemReceipt.


        :param norcs: The norcs of this ItemReceipt.  # noqa: E501
        :type: str
        """

        self._norcs = norcs

    @property
    def vendor_id(self):
        """Gets the vendor_id of this ItemReceipt.  # noqa: E501


        :return: The vendor_id of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this ItemReceipt.


        :param vendor_id: The vendor_id of this ItemReceipt.  # noqa: E501
        :type: int
        """
        if vendor_id is None:
            raise ValueError("Invalid value for `vendor_id`, must not be `None`")  # noqa: E501

        self._vendor_id = vendor_id

    @property
    def bs_vendor(self):
        """Gets the bs_vendor of this ItemReceipt.  # noqa: E501


        :return: The bs_vendor of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._bs_vendor

    @bs_vendor.setter
    def bs_vendor(self, bs_vendor):
        """Sets the bs_vendor of this ItemReceipt.


        :param bs_vendor: The bs_vendor of this ItemReceipt.  # noqa: E501
        :type: int
        """

        self._bs_vendor = bs_vendor

    @property
    def ml_vendor(self):
        """Gets the ml_vendor of this ItemReceipt.  # noqa: E501


        :return: The ml_vendor of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._ml_vendor

    @ml_vendor.setter
    def ml_vendor(self, ml_vendor):
        """Sets the ml_vendor of this ItemReceipt.


        :param ml_vendor: The ml_vendor of this ItemReceipt.  # noqa: E501
        :type: int
        """

        self._ml_vendor = ml_vendor

    @property
    def receipt_no(self):
        """Gets the receipt_no of this ItemReceipt.  # noqa: E501


        :return: The receipt_no of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._receipt_no

    @receipt_no.setter
    def receipt_no(self, receipt_no):
        """Sets the receipt_no of this ItemReceipt.


        :param receipt_no: The receipt_no of this ItemReceipt.  # noqa: E501
        :type: int
        """

        self._receipt_no = receipt_no

    @property
    def paid_full(self):
        """Gets the paid_full of this ItemReceipt.  # noqa: E501


        :return: The paid_full of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._paid_full

    @paid_full.setter
    def paid_full(self, paid_full):
        """Sets the paid_full of this ItemReceipt.


        :param paid_full: The paid_full of this ItemReceipt.  # noqa: E501
        :type: str
        """

        self._paid_full = paid_full

    @property
    def entered_by(self):
        """Gets the entered_by of this ItemReceipt.  # noqa: E501


        :return: The entered_by of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._entered_by

    @entered_by.setter
    def entered_by(self, entered_by):
        """Sets the entered_by of this ItemReceipt.


        :param entered_by: The entered_by of this ItemReceipt.  # noqa: E501
        :type: str
        """

        self._entered_by = entered_by

    @property
    def received_by(self):
        """Gets the received_by of this ItemReceipt.  # noqa: E501


        :return: The received_by of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._received_by

    @received_by.setter
    def received_by(self, received_by):
        """Sets the received_by of this ItemReceipt.


        :param received_by: The received_by of this ItemReceipt.  # noqa: E501
        :type: str
        """

        self._received_by = received_by

    @property
    def line_no(self):
        """Gets the line_no of this ItemReceipt.  # noqa: E501


        :return: The line_no of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._line_no

    @line_no.setter
    def line_no(self, line_no):
        """Sets the line_no of this ItemReceipt.


        :param line_no: The line_no of this ItemReceipt.  # noqa: E501
        :type: int
        """

        self._line_no = line_no

    @property
    def prod_lot(self):
        """Gets the prod_lot of this ItemReceipt.  # noqa: E501


        :return: The prod_lot of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._prod_lot

    @prod_lot.setter
    def prod_lot(self, prod_lot):
        """Sets the prod_lot of this ItemReceipt.


        :param prod_lot: The prod_lot of this ItemReceipt.  # noqa: E501
        :type: str
        """

        self._prod_lot = prod_lot

    @property
    def product_id_tag(self):
        """Gets the product_id_tag of this ItemReceipt.  # noqa: E501


        :return: The product_id_tag of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._product_id_tag

    @product_id_tag.setter
    def product_id_tag(self, product_id_tag):
        """Sets the product_id_tag of this ItemReceipt.


        :param product_id_tag: The product_id_tag of this ItemReceipt.  # noqa: E501
        :type: str
        """

        self._product_id_tag = product_id_tag

    @property
    def units_per_inner_pack(self):
        """Gets the units_per_inner_pack of this ItemReceipt.  # noqa: E501


        :return: The units_per_inner_pack of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._units_per_inner_pack

    @units_per_inner_pack.setter
    def units_per_inner_pack(self, units_per_inner_pack):
        """Sets the units_per_inner_pack of this ItemReceipt.


        :param units_per_inner_pack: The units_per_inner_pack of this ItemReceipt.  # noqa: E501
        :type: int
        """

        self._units_per_inner_pack = units_per_inner_pack

    @property
    def units_per_case(self):
        """Gets the units_per_case of this ItemReceipt.  # noqa: E501


        :return: The units_per_case of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._units_per_case

    @units_per_case.setter
    def units_per_case(self, units_per_case):
        """Sets the units_per_case of this ItemReceipt.


        :param units_per_case: The units_per_case of this ItemReceipt.  # noqa: E501
        :type: int
        """

        self._units_per_case = units_per_case

    @property
    def units_per_pallet(self):
        """Gets the units_per_pallet of this ItemReceipt.  # noqa: E501


        :return: The units_per_pallet of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._units_per_pallet

    @units_per_pallet.setter
    def units_per_pallet(self, units_per_pallet):
        """Sets the units_per_pallet of this ItemReceipt.


        :param units_per_pallet: The units_per_pallet of this ItemReceipt.  # noqa: E501
        :type: int
        """

        self._units_per_pallet = units_per_pallet

    @property
    def case_weight(self):
        """Gets the case_weight of this ItemReceipt.  # noqa: E501


        :return: The case_weight of this ItemReceipt.  # noqa: E501
        :rtype: float
        """
        return self._case_weight

    @case_weight.setter
    def case_weight(self, case_weight):
        """Sets the case_weight of this ItemReceipt.


        :param case_weight: The case_weight of this ItemReceipt.  # noqa: E501
        :type: float
        """

        self._case_weight = case_weight

    @property
    def height(self):
        """Gets the height of this ItemReceipt.  # noqa: E501


        :return: The height of this ItemReceipt.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ItemReceipt.


        :param height: The height of this ItemReceipt.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def width(self):
        """Gets the width of this ItemReceipt.  # noqa: E501


        :return: The width of this ItemReceipt.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ItemReceipt.


        :param width: The width of this ItemReceipt.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def length(self):
        """Gets the length of this ItemReceipt.  # noqa: E501


        :return: The length of this ItemReceipt.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this ItemReceipt.


        :param length: The length of this ItemReceipt.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def dock_date(self):
        """Gets the dock_date of this ItemReceipt.  # noqa: E501


        :return: The dock_date of this ItemReceipt.  # noqa: E501
        :rtype: datetime
        """
        return self._dock_date

    @dock_date.setter
    def dock_date(self, dock_date):
        """Sets the dock_date of this ItemReceipt.


        :param dock_date: The dock_date of this ItemReceipt.  # noqa: E501
        :type: datetime
        """

        self._dock_date = dock_date

    @property
    def modify_date(self):
        """Gets the modify_date of this ItemReceipt.  # noqa: E501


        :return: The modify_date of this ItemReceipt.  # noqa: E501
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """Sets the modify_date of this ItemReceipt.


        :param modify_date: The modify_date of this ItemReceipt.  # noqa: E501
        :type: datetime
        """

        self._modify_date = modify_date

    @property
    def impressions(self):
        """Gets the impressions of this ItemReceipt.  # noqa: E501


        :return: The impressions of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._impressions

    @impressions.setter
    def impressions(self, impressions):
        """Sets the impressions of this ItemReceipt.


        :param impressions: The impressions of this ItemReceipt.  # noqa: E501
        :type: int
        """

        self._impressions = impressions

    @property
    def asn_line(self):
        """Gets the asn_line of this ItemReceipt.  # noqa: E501


        :return: The asn_line of this ItemReceipt.  # noqa: E501
        :rtype: int
        """
        return self._asn_line

    @asn_line.setter
    def asn_line(self, asn_line):
        """Sets the asn_line of this ItemReceipt.


        :param asn_line: The asn_line of this ItemReceipt.  # noqa: E501
        :type: int
        """

        self._asn_line = asn_line

    @property
    def upc(self):
        """Gets the upc of this ItemReceipt.  # noqa: E501


        :return: The upc of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._upc

    @upc.setter
    def upc(self, upc):
        """Sets the upc of this ItemReceipt.


        :param upc: The upc of this ItemReceipt.  # noqa: E501
        :type: str
        """

        self._upc = upc

    @property
    def vendor_sku(self):
        """Gets the vendor_sku of this ItemReceipt.  # noqa: E501


        :return: The vendor_sku of this ItemReceipt.  # noqa: E501
        :rtype: str
        """
        return self._vendor_sku

    @vendor_sku.setter
    def vendor_sku(self, vendor_sku):
        """Sets the vendor_sku of this ItemReceipt.


        :param vendor_sku: The vendor_sku of this ItemReceipt.  # noqa: E501
        :type: str
        """

        self._vendor_sku = vendor_sku

    @property
    def custom_fields(self):
        """Gets the custom_fields of this ItemReceipt.  # noqa: E501


        :return: The custom_fields of this ItemReceipt.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this ItemReceipt.


        :param custom_fields: The custom_fields of this ItemReceipt.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemReceipt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
