# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ItemReceipt(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ItemReceipt - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'po_no_id': 'int',
            'lob_id': 'int',
            'legacy_po_no': 'str',
            'warehouse_id': 'int',
            'order_date': 'datetime',
            'fact_cost': 'float',
            'ml_cost': 'float',
            'sku': 'str',
            'order_quantity': 'int',
            'requested_delivery_date': 'datetime',
            'unit_code': 'str',
            'wrap_code': 'str',
            'units_per_wrap': 'int',
            'cost': 'float',
            'sell': 'float',
            'pricing_per': 'str',
            'max_freight': 'float',
            'charge_freight': 'str',
            'max_other': 'float',
            'dist_date': 'datetime',
            'void_date': 'datetime',
            'freeze_action': 'str',
            'rev_date': 'str',
            'art_back': 'str',
            'origin': 'str',
            'sample': 'int',
            'sample_to': 'str',
            'max_overs': 'int',
            'max_unders': 'int',
            'received_sfp': 'int',
            'budget_code': 'str',
            'accounting_code': 'str',
            'tax_exempt': 'str',
            'capitalize': 'str',
            'accrual': 'str',
            'odd_quantity': 'int',
            'freight_cost': 'float',
            'received_date': 'datetime',
            'received_quantity': 'int',
            'from_prod': 'int',
            'sfp_complete': 'str',
            'end_quantity': 'int',
            'end_val': 'float',
            'end_fact': 'float',
            'interim_quantity': 'int',
            'interim_val': 'float',
            'interim_fact': 'float',
            'last_act': 'datetime',
            'weight_per_wrap': 'float',
            'norcs': 'str',
            'vendor_id': 'int',
            'bs_vendor': 'int',
            'ml_vendor': 'int',
            'receipt_no': 'int',
            'paid_full': 'str',
            'entered_by': 'str',
            'received_by': 'str',
            'line_no': 'int',
            'prod_lot': 'str',
            'units_per_case': 'int',
            'case_weight': 'float',
            'height': 'float',
            'width': 'float',
            'length': 'float',
            'dock_time': 'datetime',
            'modify_date': 'datetime',
            'impressions': 'int',
            'asn_line': 'int',
            'custom_fields': 'dict(str, object)'
        }

        self.attribute_map = {
            'id': 'id',
            'po_no_id': 'poNoId',
            'lob_id': 'lobId',
            'legacy_po_no': 'legacyPoNo',
            'warehouse_id': 'warehouseId',
            'order_date': 'orderDate',
            'fact_cost': 'factCost',
            'ml_cost': 'mlCost',
            'sku': 'sku',
            'order_quantity': 'orderQuantity',
            'requested_delivery_date': 'requestedDeliveryDate',
            'unit_code': 'unitCode',
            'wrap_code': 'wrapCode',
            'units_per_wrap': 'unitsPerWrap',
            'cost': 'cost',
            'sell': 'sell',
            'pricing_per': 'pricingPer',
            'max_freight': 'maxFreight',
            'charge_freight': 'chargeFreight',
            'max_other': 'maxOther',
            'dist_date': 'distDate',
            'void_date': 'voidDate',
            'freeze_action': 'freezeAction',
            'rev_date': 'revDate',
            'art_back': 'artBack',
            'origin': 'origin',
            'sample': 'sample',
            'sample_to': 'sampleTo',
            'max_overs': 'maxOvers',
            'max_unders': 'maxUnders',
            'received_sfp': 'receivedSfp',
            'budget_code': 'budgetCode',
            'accounting_code': 'accountingCode',
            'tax_exempt': 'taxExempt',
            'capitalize': 'capitalize',
            'accrual': 'accrual',
            'odd_quantity': 'oddQuantity',
            'freight_cost': 'freightCost',
            'received_date': 'receivedDate',
            'received_quantity': 'receivedQuantity',
            'from_prod': 'fromProd',
            'sfp_complete': 'sfpComplete',
            'end_quantity': 'endQuantity',
            'end_val': 'endVal',
            'end_fact': 'endFact',
            'interim_quantity': 'interimQuantity',
            'interim_val': 'interimVal',
            'interim_fact': 'interimFact',
            'last_act': 'lastAct',
            'weight_per_wrap': 'weightPerWrap',
            'norcs': 'norcs',
            'vendor_id': 'vendorId',
            'bs_vendor': 'bsVendor',
            'ml_vendor': 'mlVendor',
            'receipt_no': 'receiptNo',
            'paid_full': 'paidFull',
            'entered_by': 'enteredBy',
            'received_by': 'receivedBy',
            'line_no': 'lineNo',
            'prod_lot': 'prodLot',
            'units_per_case': 'unitsPerCase',
            'case_weight': 'caseWeight',
            'height': 'height',
            'width': 'width',
            'length': 'length',
            'dock_time': 'dockTime',
            'modify_date': 'modifyDate',
            'impressions': 'impressions',
            'asn_line': 'asnLine',
            'custom_fields': 'customFields'
        }

        self._id = None
        self._po_no_id = None
        self._lob_id = None
        self._legacy_po_no = None
        self._warehouse_id = None
        self._order_date = None
        self._fact_cost = None
        self._ml_cost = None
        self._sku = None
        self._order_quantity = None
        self._requested_delivery_date = None
        self._unit_code = None
        self._wrap_code = None
        self._units_per_wrap = None
        self._cost = None
        self._sell = None
        self._pricing_per = None
        self._max_freight = None
        self._charge_freight = None
        self._max_other = None
        self._dist_date = None
        self._void_date = None
        self._freeze_action = None
        self._rev_date = None
        self._art_back = None
        self._origin = None
        self._sample = None
        self._sample_to = None
        self._max_overs = None
        self._max_unders = None
        self._received_sfp = None
        self._budget_code = None
        self._accounting_code = None
        self._tax_exempt = None
        self._capitalize = None
        self._accrual = None
        self._odd_quantity = None
        self._freight_cost = None
        self._received_date = None
        self._received_quantity = None
        self._from_prod = None
        self._sfp_complete = None
        self._end_quantity = None
        self._end_val = None
        self._end_fact = None
        self._interim_quantity = None
        self._interim_val = None
        self._interim_fact = None
        self._last_act = None
        self._weight_per_wrap = None
        self._norcs = None
        self._vendor_id = None
        self._bs_vendor = None
        self._ml_vendor = None
        self._receipt_no = None
        self._paid_full = None
        self._entered_by = None
        self._received_by = None
        self._line_no = None
        self._prod_lot = None
        self._units_per_case = None
        self._case_weight = None
        self._height = None
        self._width = None
        self._length = None
        self._dock_time = None
        self._modify_date = None
        self._impressions = None
        self._asn_line = None
        self._custom_fields = None

    @property
    def id(self):
        """
        Gets the id of this ItemReceipt.


        :return: The id of this ItemReceipt.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ItemReceipt.


        :param id: The id of this ItemReceipt.
        :type: int
        """
        self._id = id

    @property
    def po_no_id(self):
        """
        Gets the po_no_id of this ItemReceipt.


        :return: The po_no_id of this ItemReceipt.
        :rtype: int
        """
        return self._po_no_id

    @po_no_id.setter
    def po_no_id(self, po_no_id):
        """
        Sets the po_no_id of this ItemReceipt.


        :param po_no_id: The po_no_id of this ItemReceipt.
        :type: int
        """
        self._po_no_id = po_no_id

    @property
    def lob_id(self):
        """
        Gets the lob_id of this ItemReceipt.


        :return: The lob_id of this ItemReceipt.
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """
        Sets the lob_id of this ItemReceipt.


        :param lob_id: The lob_id of this ItemReceipt.
        :type: int
        """
        self._lob_id = lob_id

    @property
    def legacy_po_no(self):
        """
        Gets the legacy_po_no of this ItemReceipt.


        :return: The legacy_po_no of this ItemReceipt.
        :rtype: str
        """
        return self._legacy_po_no

    @legacy_po_no.setter
    def legacy_po_no(self, legacy_po_no):
        """
        Sets the legacy_po_no of this ItemReceipt.


        :param legacy_po_no: The legacy_po_no of this ItemReceipt.
        :type: str
        """
        self._legacy_po_no = legacy_po_no

    @property
    def warehouse_id(self):
        """
        Gets the warehouse_id of this ItemReceipt.


        :return: The warehouse_id of this ItemReceipt.
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """
        Sets the warehouse_id of this ItemReceipt.


        :param warehouse_id: The warehouse_id of this ItemReceipt.
        :type: int
        """
        self._warehouse_id = warehouse_id

    @property
    def order_date(self):
        """
        Gets the order_date of this ItemReceipt.


        :return: The order_date of this ItemReceipt.
        :rtype: datetime
        """
        return self._order_date

    @order_date.setter
    def order_date(self, order_date):
        """
        Sets the order_date of this ItemReceipt.


        :param order_date: The order_date of this ItemReceipt.
        :type: datetime
        """
        self._order_date = order_date

    @property
    def fact_cost(self):
        """
        Gets the fact_cost of this ItemReceipt.


        :return: The fact_cost of this ItemReceipt.
        :rtype: float
        """
        return self._fact_cost

    @fact_cost.setter
    def fact_cost(self, fact_cost):
        """
        Sets the fact_cost of this ItemReceipt.


        :param fact_cost: The fact_cost of this ItemReceipt.
        :type: float
        """
        self._fact_cost = fact_cost

    @property
    def ml_cost(self):
        """
        Gets the ml_cost of this ItemReceipt.


        :return: The ml_cost of this ItemReceipt.
        :rtype: float
        """
        return self._ml_cost

    @ml_cost.setter
    def ml_cost(self, ml_cost):
        """
        Sets the ml_cost of this ItemReceipt.


        :param ml_cost: The ml_cost of this ItemReceipt.
        :type: float
        """
        self._ml_cost = ml_cost

    @property
    def sku(self):
        """
        Gets the sku of this ItemReceipt.


        :return: The sku of this ItemReceipt.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this ItemReceipt.


        :param sku: The sku of this ItemReceipt.
        :type: str
        """
        self._sku = sku

    @property
    def order_quantity(self):
        """
        Gets the order_quantity of this ItemReceipt.


        :return: The order_quantity of this ItemReceipt.
        :rtype: int
        """
        return self._order_quantity

    @order_quantity.setter
    def order_quantity(self, order_quantity):
        """
        Sets the order_quantity of this ItemReceipt.


        :param order_quantity: The order_quantity of this ItemReceipt.
        :type: int
        """
        self._order_quantity = order_quantity

    @property
    def requested_delivery_date(self):
        """
        Gets the requested_delivery_date of this ItemReceipt.


        :return: The requested_delivery_date of this ItemReceipt.
        :rtype: datetime
        """
        return self._requested_delivery_date

    @requested_delivery_date.setter
    def requested_delivery_date(self, requested_delivery_date):
        """
        Sets the requested_delivery_date of this ItemReceipt.


        :param requested_delivery_date: The requested_delivery_date of this ItemReceipt.
        :type: datetime
        """
        self._requested_delivery_date = requested_delivery_date

    @property
    def unit_code(self):
        """
        Gets the unit_code of this ItemReceipt.


        :return: The unit_code of this ItemReceipt.
        :rtype: str
        """
        return self._unit_code

    @unit_code.setter
    def unit_code(self, unit_code):
        """
        Sets the unit_code of this ItemReceipt.


        :param unit_code: The unit_code of this ItemReceipt.
        :type: str
        """
        self._unit_code = unit_code

    @property
    def wrap_code(self):
        """
        Gets the wrap_code of this ItemReceipt.


        :return: The wrap_code of this ItemReceipt.
        :rtype: str
        """
        return self._wrap_code

    @wrap_code.setter
    def wrap_code(self, wrap_code):
        """
        Sets the wrap_code of this ItemReceipt.


        :param wrap_code: The wrap_code of this ItemReceipt.
        :type: str
        """
        self._wrap_code = wrap_code

    @property
    def units_per_wrap(self):
        """
        Gets the units_per_wrap of this ItemReceipt.


        :return: The units_per_wrap of this ItemReceipt.
        :rtype: int
        """
        return self._units_per_wrap

    @units_per_wrap.setter
    def units_per_wrap(self, units_per_wrap):
        """
        Sets the units_per_wrap of this ItemReceipt.


        :param units_per_wrap: The units_per_wrap of this ItemReceipt.
        :type: int
        """
        self._units_per_wrap = units_per_wrap

    @property
    def cost(self):
        """
        Gets the cost of this ItemReceipt.


        :return: The cost of this ItemReceipt.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """
        Sets the cost of this ItemReceipt.


        :param cost: The cost of this ItemReceipt.
        :type: float
        """
        self._cost = cost

    @property
    def sell(self):
        """
        Gets the sell of this ItemReceipt.


        :return: The sell of this ItemReceipt.
        :rtype: float
        """
        return self._sell

    @sell.setter
    def sell(self, sell):
        """
        Sets the sell of this ItemReceipt.


        :param sell: The sell of this ItemReceipt.
        :type: float
        """
        self._sell = sell

    @property
    def pricing_per(self):
        """
        Gets the pricing_per of this ItemReceipt.


        :return: The pricing_per of this ItemReceipt.
        :rtype: str
        """
        return self._pricing_per

    @pricing_per.setter
    def pricing_per(self, pricing_per):
        """
        Sets the pricing_per of this ItemReceipt.


        :param pricing_per: The pricing_per of this ItemReceipt.
        :type: str
        """
        self._pricing_per = pricing_per

    @property
    def max_freight(self):
        """
        Gets the max_freight of this ItemReceipt.


        :return: The max_freight of this ItemReceipt.
        :rtype: float
        """
        return self._max_freight

    @max_freight.setter
    def max_freight(self, max_freight):
        """
        Sets the max_freight of this ItemReceipt.


        :param max_freight: The max_freight of this ItemReceipt.
        :type: float
        """
        self._max_freight = max_freight

    @property
    def charge_freight(self):
        """
        Gets the charge_freight of this ItemReceipt.


        :return: The charge_freight of this ItemReceipt.
        :rtype: str
        """
        return self._charge_freight

    @charge_freight.setter
    def charge_freight(self, charge_freight):
        """
        Sets the charge_freight of this ItemReceipt.


        :param charge_freight: The charge_freight of this ItemReceipt.
        :type: str
        """
        self._charge_freight = charge_freight

    @property
    def max_other(self):
        """
        Gets the max_other of this ItemReceipt.


        :return: The max_other of this ItemReceipt.
        :rtype: float
        """
        return self._max_other

    @max_other.setter
    def max_other(self, max_other):
        """
        Sets the max_other of this ItemReceipt.


        :param max_other: The max_other of this ItemReceipt.
        :type: float
        """
        self._max_other = max_other

    @property
    def dist_date(self):
        """
        Gets the dist_date of this ItemReceipt.


        :return: The dist_date of this ItemReceipt.
        :rtype: datetime
        """
        return self._dist_date

    @dist_date.setter
    def dist_date(self, dist_date):
        """
        Sets the dist_date of this ItemReceipt.


        :param dist_date: The dist_date of this ItemReceipt.
        :type: datetime
        """
        self._dist_date = dist_date

    @property
    def void_date(self):
        """
        Gets the void_date of this ItemReceipt.


        :return: The void_date of this ItemReceipt.
        :rtype: datetime
        """
        return self._void_date

    @void_date.setter
    def void_date(self, void_date):
        """
        Sets the void_date of this ItemReceipt.


        :param void_date: The void_date of this ItemReceipt.
        :type: datetime
        """
        self._void_date = void_date

    @property
    def freeze_action(self):
        """
        Gets the freeze_action of this ItemReceipt.


        :return: The freeze_action of this ItemReceipt.
        :rtype: str
        """
        return self._freeze_action

    @freeze_action.setter
    def freeze_action(self, freeze_action):
        """
        Sets the freeze_action of this ItemReceipt.


        :param freeze_action: The freeze_action of this ItemReceipt.
        :type: str
        """
        self._freeze_action = freeze_action

    @property
    def rev_date(self):
        """
        Gets the rev_date of this ItemReceipt.


        :return: The rev_date of this ItemReceipt.
        :rtype: str
        """
        return self._rev_date

    @rev_date.setter
    def rev_date(self, rev_date):
        """
        Sets the rev_date of this ItemReceipt.


        :param rev_date: The rev_date of this ItemReceipt.
        :type: str
        """
        self._rev_date = rev_date

    @property
    def art_back(self):
        """
        Gets the art_back of this ItemReceipt.


        :return: The art_back of this ItemReceipt.
        :rtype: str
        """
        return self._art_back

    @art_back.setter
    def art_back(self, art_back):
        """
        Sets the art_back of this ItemReceipt.


        :param art_back: The art_back of this ItemReceipt.
        :type: str
        """
        self._art_back = art_back

    @property
    def origin(self):
        """
        Gets the origin of this ItemReceipt.


        :return: The origin of this ItemReceipt.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """
        Sets the origin of this ItemReceipt.


        :param origin: The origin of this ItemReceipt.
        :type: str
        """
        self._origin = origin

    @property
    def sample(self):
        """
        Gets the sample of this ItemReceipt.


        :return: The sample of this ItemReceipt.
        :rtype: int
        """
        return self._sample

    @sample.setter
    def sample(self, sample):
        """
        Sets the sample of this ItemReceipt.


        :param sample: The sample of this ItemReceipt.
        :type: int
        """
        self._sample = sample

    @property
    def sample_to(self):
        """
        Gets the sample_to of this ItemReceipt.


        :return: The sample_to of this ItemReceipt.
        :rtype: str
        """
        return self._sample_to

    @sample_to.setter
    def sample_to(self, sample_to):
        """
        Sets the sample_to of this ItemReceipt.


        :param sample_to: The sample_to of this ItemReceipt.
        :type: str
        """
        self._sample_to = sample_to

    @property
    def max_overs(self):
        """
        Gets the max_overs of this ItemReceipt.


        :return: The max_overs of this ItemReceipt.
        :rtype: int
        """
        return self._max_overs

    @max_overs.setter
    def max_overs(self, max_overs):
        """
        Sets the max_overs of this ItemReceipt.


        :param max_overs: The max_overs of this ItemReceipt.
        :type: int
        """
        self._max_overs = max_overs

    @property
    def max_unders(self):
        """
        Gets the max_unders of this ItemReceipt.


        :return: The max_unders of this ItemReceipt.
        :rtype: int
        """
        return self._max_unders

    @max_unders.setter
    def max_unders(self, max_unders):
        """
        Sets the max_unders of this ItemReceipt.


        :param max_unders: The max_unders of this ItemReceipt.
        :type: int
        """
        self._max_unders = max_unders

    @property
    def received_sfp(self):
        """
        Gets the received_sfp of this ItemReceipt.


        :return: The received_sfp of this ItemReceipt.
        :rtype: int
        """
        return self._received_sfp

    @received_sfp.setter
    def received_sfp(self, received_sfp):
        """
        Sets the received_sfp of this ItemReceipt.


        :param received_sfp: The received_sfp of this ItemReceipt.
        :type: int
        """
        self._received_sfp = received_sfp

    @property
    def budget_code(self):
        """
        Gets the budget_code of this ItemReceipt.


        :return: The budget_code of this ItemReceipt.
        :rtype: str
        """
        return self._budget_code

    @budget_code.setter
    def budget_code(self, budget_code):
        """
        Sets the budget_code of this ItemReceipt.


        :param budget_code: The budget_code of this ItemReceipt.
        :type: str
        """
        self._budget_code = budget_code

    @property
    def accounting_code(self):
        """
        Gets the accounting_code of this ItemReceipt.


        :return: The accounting_code of this ItemReceipt.
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """
        Sets the accounting_code of this ItemReceipt.


        :param accounting_code: The accounting_code of this ItemReceipt.
        :type: str
        """
        self._accounting_code = accounting_code

    @property
    def tax_exempt(self):
        """
        Gets the tax_exempt of this ItemReceipt.


        :return: The tax_exempt of this ItemReceipt.
        :rtype: str
        """
        return self._tax_exempt

    @tax_exempt.setter
    def tax_exempt(self, tax_exempt):
        """
        Sets the tax_exempt of this ItemReceipt.


        :param tax_exempt: The tax_exempt of this ItemReceipt.
        :type: str
        """
        self._tax_exempt = tax_exempt

    @property
    def capitalize(self):
        """
        Gets the capitalize of this ItemReceipt.


        :return: The capitalize of this ItemReceipt.
        :rtype: str
        """
        return self._capitalize

    @capitalize.setter
    def capitalize(self, capitalize):
        """
        Sets the capitalize of this ItemReceipt.


        :param capitalize: The capitalize of this ItemReceipt.
        :type: str
        """
        self._capitalize = capitalize

    @property
    def accrual(self):
        """
        Gets the accrual of this ItemReceipt.


        :return: The accrual of this ItemReceipt.
        :rtype: str
        """
        return self._accrual

    @accrual.setter
    def accrual(self, accrual):
        """
        Sets the accrual of this ItemReceipt.


        :param accrual: The accrual of this ItemReceipt.
        :type: str
        """
        self._accrual = accrual

    @property
    def odd_quantity(self):
        """
        Gets the odd_quantity of this ItemReceipt.


        :return: The odd_quantity of this ItemReceipt.
        :rtype: int
        """
        return self._odd_quantity

    @odd_quantity.setter
    def odd_quantity(self, odd_quantity):
        """
        Sets the odd_quantity of this ItemReceipt.


        :param odd_quantity: The odd_quantity of this ItemReceipt.
        :type: int
        """
        self._odd_quantity = odd_quantity

    @property
    def freight_cost(self):
        """
        Gets the freight_cost of this ItemReceipt.


        :return: The freight_cost of this ItemReceipt.
        :rtype: float
        """
        return self._freight_cost

    @freight_cost.setter
    def freight_cost(self, freight_cost):
        """
        Sets the freight_cost of this ItemReceipt.


        :param freight_cost: The freight_cost of this ItemReceipt.
        :type: float
        """
        self._freight_cost = freight_cost

    @property
    def received_date(self):
        """
        Gets the received_date of this ItemReceipt.


        :return: The received_date of this ItemReceipt.
        :rtype: datetime
        """
        return self._received_date

    @received_date.setter
    def received_date(self, received_date):
        """
        Sets the received_date of this ItemReceipt.


        :param received_date: The received_date of this ItemReceipt.
        :type: datetime
        """
        self._received_date = received_date

    @property
    def received_quantity(self):
        """
        Gets the received_quantity of this ItemReceipt.


        :return: The received_quantity of this ItemReceipt.
        :rtype: int
        """
        return self._received_quantity

    @received_quantity.setter
    def received_quantity(self, received_quantity):
        """
        Sets the received_quantity of this ItemReceipt.


        :param received_quantity: The received_quantity of this ItemReceipt.
        :type: int
        """
        self._received_quantity = received_quantity

    @property
    def from_prod(self):
        """
        Gets the from_prod of this ItemReceipt.


        :return: The from_prod of this ItemReceipt.
        :rtype: int
        """
        return self._from_prod

    @from_prod.setter
    def from_prod(self, from_prod):
        """
        Sets the from_prod of this ItemReceipt.


        :param from_prod: The from_prod of this ItemReceipt.
        :type: int
        """
        self._from_prod = from_prod

    @property
    def sfp_complete(self):
        """
        Gets the sfp_complete of this ItemReceipt.


        :return: The sfp_complete of this ItemReceipt.
        :rtype: str
        """
        return self._sfp_complete

    @sfp_complete.setter
    def sfp_complete(self, sfp_complete):
        """
        Sets the sfp_complete of this ItemReceipt.


        :param sfp_complete: The sfp_complete of this ItemReceipt.
        :type: str
        """
        self._sfp_complete = sfp_complete

    @property
    def end_quantity(self):
        """
        Gets the end_quantity of this ItemReceipt.


        :return: The end_quantity of this ItemReceipt.
        :rtype: int
        """
        return self._end_quantity

    @end_quantity.setter
    def end_quantity(self, end_quantity):
        """
        Sets the end_quantity of this ItemReceipt.


        :param end_quantity: The end_quantity of this ItemReceipt.
        :type: int
        """
        self._end_quantity = end_quantity

    @property
    def end_val(self):
        """
        Gets the end_val of this ItemReceipt.


        :return: The end_val of this ItemReceipt.
        :rtype: float
        """
        return self._end_val

    @end_val.setter
    def end_val(self, end_val):
        """
        Sets the end_val of this ItemReceipt.


        :param end_val: The end_val of this ItemReceipt.
        :type: float
        """
        self._end_val = end_val

    @property
    def end_fact(self):
        """
        Gets the end_fact of this ItemReceipt.


        :return: The end_fact of this ItemReceipt.
        :rtype: float
        """
        return self._end_fact

    @end_fact.setter
    def end_fact(self, end_fact):
        """
        Sets the end_fact of this ItemReceipt.


        :param end_fact: The end_fact of this ItemReceipt.
        :type: float
        """
        self._end_fact = end_fact

    @property
    def interim_quantity(self):
        """
        Gets the interim_quantity of this ItemReceipt.


        :return: The interim_quantity of this ItemReceipt.
        :rtype: int
        """
        return self._interim_quantity

    @interim_quantity.setter
    def interim_quantity(self, interim_quantity):
        """
        Sets the interim_quantity of this ItemReceipt.


        :param interim_quantity: The interim_quantity of this ItemReceipt.
        :type: int
        """
        self._interim_quantity = interim_quantity

    @property
    def interim_val(self):
        """
        Gets the interim_val of this ItemReceipt.


        :return: The interim_val of this ItemReceipt.
        :rtype: float
        """
        return self._interim_val

    @interim_val.setter
    def interim_val(self, interim_val):
        """
        Sets the interim_val of this ItemReceipt.


        :param interim_val: The interim_val of this ItemReceipt.
        :type: float
        """
        self._interim_val = interim_val

    @property
    def interim_fact(self):
        """
        Gets the interim_fact of this ItemReceipt.


        :return: The interim_fact of this ItemReceipt.
        :rtype: float
        """
        return self._interim_fact

    @interim_fact.setter
    def interim_fact(self, interim_fact):
        """
        Sets the interim_fact of this ItemReceipt.


        :param interim_fact: The interim_fact of this ItemReceipt.
        :type: float
        """
        self._interim_fact = interim_fact

    @property
    def last_act(self):
        """
        Gets the last_act of this ItemReceipt.


        :return: The last_act of this ItemReceipt.
        :rtype: datetime
        """
        return self._last_act

    @last_act.setter
    def last_act(self, last_act):
        """
        Sets the last_act of this ItemReceipt.


        :param last_act: The last_act of this ItemReceipt.
        :type: datetime
        """
        self._last_act = last_act

    @property
    def weight_per_wrap(self):
        """
        Gets the weight_per_wrap of this ItemReceipt.


        :return: The weight_per_wrap of this ItemReceipt.
        :rtype: float
        """
        return self._weight_per_wrap

    @weight_per_wrap.setter
    def weight_per_wrap(self, weight_per_wrap):
        """
        Sets the weight_per_wrap of this ItemReceipt.


        :param weight_per_wrap: The weight_per_wrap of this ItemReceipt.
        :type: float
        """
        self._weight_per_wrap = weight_per_wrap

    @property
    def norcs(self):
        """
        Gets the norcs of this ItemReceipt.


        :return: The norcs of this ItemReceipt.
        :rtype: str
        """
        return self._norcs

    @norcs.setter
    def norcs(self, norcs):
        """
        Sets the norcs of this ItemReceipt.


        :param norcs: The norcs of this ItemReceipt.
        :type: str
        """
        self._norcs = norcs

    @property
    def vendor_id(self):
        """
        Gets the vendor_id of this ItemReceipt.


        :return: The vendor_id of this ItemReceipt.
        :rtype: int
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """
        Sets the vendor_id of this ItemReceipt.


        :param vendor_id: The vendor_id of this ItemReceipt.
        :type: int
        """
        self._vendor_id = vendor_id

    @property
    def bs_vendor(self):
        """
        Gets the bs_vendor of this ItemReceipt.


        :return: The bs_vendor of this ItemReceipt.
        :rtype: int
        """
        return self._bs_vendor

    @bs_vendor.setter
    def bs_vendor(self, bs_vendor):
        """
        Sets the bs_vendor of this ItemReceipt.


        :param bs_vendor: The bs_vendor of this ItemReceipt.
        :type: int
        """
        self._bs_vendor = bs_vendor

    @property
    def ml_vendor(self):
        """
        Gets the ml_vendor of this ItemReceipt.


        :return: The ml_vendor of this ItemReceipt.
        :rtype: int
        """
        return self._ml_vendor

    @ml_vendor.setter
    def ml_vendor(self, ml_vendor):
        """
        Sets the ml_vendor of this ItemReceipt.


        :param ml_vendor: The ml_vendor of this ItemReceipt.
        :type: int
        """
        self._ml_vendor = ml_vendor

    @property
    def receipt_no(self):
        """
        Gets the receipt_no of this ItemReceipt.


        :return: The receipt_no of this ItemReceipt.
        :rtype: int
        """
        return self._receipt_no

    @receipt_no.setter
    def receipt_no(self, receipt_no):
        """
        Sets the receipt_no of this ItemReceipt.


        :param receipt_no: The receipt_no of this ItemReceipt.
        :type: int
        """
        self._receipt_no = receipt_no

    @property
    def paid_full(self):
        """
        Gets the paid_full of this ItemReceipt.


        :return: The paid_full of this ItemReceipt.
        :rtype: str
        """
        return self._paid_full

    @paid_full.setter
    def paid_full(self, paid_full):
        """
        Sets the paid_full of this ItemReceipt.


        :param paid_full: The paid_full of this ItemReceipt.
        :type: str
        """
        self._paid_full = paid_full

    @property
    def entered_by(self):
        """
        Gets the entered_by of this ItemReceipt.


        :return: The entered_by of this ItemReceipt.
        :rtype: str
        """
        return self._entered_by

    @entered_by.setter
    def entered_by(self, entered_by):
        """
        Sets the entered_by of this ItemReceipt.


        :param entered_by: The entered_by of this ItemReceipt.
        :type: str
        """
        self._entered_by = entered_by

    @property
    def received_by(self):
        """
        Gets the received_by of this ItemReceipt.


        :return: The received_by of this ItemReceipt.
        :rtype: str
        """
        return self._received_by

    @received_by.setter
    def received_by(self, received_by):
        """
        Sets the received_by of this ItemReceipt.


        :param received_by: The received_by of this ItemReceipt.
        :type: str
        """
        self._received_by = received_by

    @property
    def line_no(self):
        """
        Gets the line_no of this ItemReceipt.


        :return: The line_no of this ItemReceipt.
        :rtype: int
        """
        return self._line_no

    @line_no.setter
    def line_no(self, line_no):
        """
        Sets the line_no of this ItemReceipt.


        :param line_no: The line_no of this ItemReceipt.
        :type: int
        """
        self._line_no = line_no

    @property
    def prod_lot(self):
        """
        Gets the prod_lot of this ItemReceipt.


        :return: The prod_lot of this ItemReceipt.
        :rtype: str
        """
        return self._prod_lot

    @prod_lot.setter
    def prod_lot(self, prod_lot):
        """
        Sets the prod_lot of this ItemReceipt.


        :param prod_lot: The prod_lot of this ItemReceipt.
        :type: str
        """
        self._prod_lot = prod_lot

    @property
    def units_per_case(self):
        """
        Gets the units_per_case of this ItemReceipt.


        :return: The units_per_case of this ItemReceipt.
        :rtype: int
        """
        return self._units_per_case

    @units_per_case.setter
    def units_per_case(self, units_per_case):
        """
        Sets the units_per_case of this ItemReceipt.


        :param units_per_case: The units_per_case of this ItemReceipt.
        :type: int
        """
        self._units_per_case = units_per_case

    @property
    def case_weight(self):
        """
        Gets the case_weight of this ItemReceipt.


        :return: The case_weight of this ItemReceipt.
        :rtype: float
        """
        return self._case_weight

    @case_weight.setter
    def case_weight(self, case_weight):
        """
        Sets the case_weight of this ItemReceipt.


        :param case_weight: The case_weight of this ItemReceipt.
        :type: float
        """
        self._case_weight = case_weight

    @property
    def height(self):
        """
        Gets the height of this ItemReceipt.


        :return: The height of this ItemReceipt.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """
        Sets the height of this ItemReceipt.


        :param height: The height of this ItemReceipt.
        :type: float
        """
        self._height = height

    @property
    def width(self):
        """
        Gets the width of this ItemReceipt.


        :return: The width of this ItemReceipt.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """
        Sets the width of this ItemReceipt.


        :param width: The width of this ItemReceipt.
        :type: float
        """
        self._width = width

    @property
    def length(self):
        """
        Gets the length of this ItemReceipt.


        :return: The length of this ItemReceipt.
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """
        Sets the length of this ItemReceipt.


        :param length: The length of this ItemReceipt.
        :type: float
        """
        self._length = length

    @property
    def dock_time(self):
        """
        Gets the dock_time of this ItemReceipt.


        :return: The dock_time of this ItemReceipt.
        :rtype: datetime
        """
        return self._dock_time

    @dock_time.setter
    def dock_time(self, dock_time):
        """
        Sets the dock_time of this ItemReceipt.


        :param dock_time: The dock_time of this ItemReceipt.
        :type: datetime
        """
        self._dock_time = dock_time

    @property
    def modify_date(self):
        """
        Gets the modify_date of this ItemReceipt.


        :return: The modify_date of this ItemReceipt.
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """
        Sets the modify_date of this ItemReceipt.


        :param modify_date: The modify_date of this ItemReceipt.
        :type: datetime
        """
        self._modify_date = modify_date

    @property
    def impressions(self):
        """
        Gets the impressions of this ItemReceipt.


        :return: The impressions of this ItemReceipt.
        :rtype: int
        """
        return self._impressions

    @impressions.setter
    def impressions(self, impressions):
        """
        Sets the impressions of this ItemReceipt.


        :param impressions: The impressions of this ItemReceipt.
        :type: int
        """
        self._impressions = impressions

    @property
    def asn_line(self):
        """
        Gets the asn_line of this ItemReceipt.


        :return: The asn_line of this ItemReceipt.
        :rtype: int
        """
        return self._asn_line

    @asn_line.setter
    def asn_line(self, asn_line):
        """
        Sets the asn_line of this ItemReceipt.


        :param asn_line: The asn_line of this ItemReceipt.
        :type: int
        """
        self._asn_line = asn_line

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this ItemReceipt.


        :return: The custom_fields of this ItemReceipt.
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this ItemReceipt.


        :param custom_fields: The custom_fields of this ItemReceipt.
        :type: dict(str, object)
        """
        self._custom_fields = custom_fields

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

