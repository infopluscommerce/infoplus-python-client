# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class InventoryAdjustment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        InventoryAdjustment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'lob_id': 'int',
            'sku_id': 'int',
            'po_no_id': 'int',
            'adjustment_date': 'datetime',
            'adjustment_time': 'str',
            'location': 'str',
            'qty': 'int',
            'note': 'str',
            'authorized_by': 'str',
            'printed': 'str',
            'order_no': 'float',
            'adjustment_code': 'str',
            'custom_fields': 'dict(str, object)'
        }

        self.attribute_map = {
            'id': 'id',
            'lob_id': 'lobId',
            'sku_id': 'skuId',
            'po_no_id': 'poNoId',
            'adjustment_date': 'adjustmentDate',
            'adjustment_time': 'adjustmentTime',
            'location': 'location',
            'qty': 'qty',
            'note': 'note',
            'authorized_by': 'authorizedBy',
            'printed': 'printed',
            'order_no': 'orderNo',
            'adjustment_code': 'adjustmentCode',
            'custom_fields': 'customFields'
        }

        self._id = None
        self._lob_id = None
        self._sku_id = None
        self._po_no_id = None
        self._adjustment_date = None
        self._adjustment_time = None
        self._location = None
        self._qty = None
        self._note = None
        self._authorized_by = None
        self._printed = None
        self._order_no = None
        self._adjustment_code = None
        self._custom_fields = None

    @property
    def id(self):
        """
        Gets the id of this InventoryAdjustment.


        :return: The id of this InventoryAdjustment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this InventoryAdjustment.


        :param id: The id of this InventoryAdjustment.
        :type: int
        """
        self._id = id

    @property
    def lob_id(self):
        """
        Gets the lob_id of this InventoryAdjustment.


        :return: The lob_id of this InventoryAdjustment.
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """
        Sets the lob_id of this InventoryAdjustment.


        :param lob_id: The lob_id of this InventoryAdjustment.
        :type: int
        """
        self._lob_id = lob_id

    @property
    def sku_id(self):
        """
        Gets the sku_id of this InventoryAdjustment.


        :return: The sku_id of this InventoryAdjustment.
        :rtype: int
        """
        return self._sku_id

    @sku_id.setter
    def sku_id(self, sku_id):
        """
        Sets the sku_id of this InventoryAdjustment.


        :param sku_id: The sku_id of this InventoryAdjustment.
        :type: int
        """
        self._sku_id = sku_id

    @property
    def po_no_id(self):
        """
        Gets the po_no_id of this InventoryAdjustment.


        :return: The po_no_id of this InventoryAdjustment.
        :rtype: int
        """
        return self._po_no_id

    @po_no_id.setter
    def po_no_id(self, po_no_id):
        """
        Sets the po_no_id of this InventoryAdjustment.


        :param po_no_id: The po_no_id of this InventoryAdjustment.
        :type: int
        """
        self._po_no_id = po_no_id

    @property
    def adjustment_date(self):
        """
        Gets the adjustment_date of this InventoryAdjustment.


        :return: The adjustment_date of this InventoryAdjustment.
        :rtype: datetime
        """
        return self._adjustment_date

    @adjustment_date.setter
    def adjustment_date(self, adjustment_date):
        """
        Sets the adjustment_date of this InventoryAdjustment.


        :param adjustment_date: The adjustment_date of this InventoryAdjustment.
        :type: datetime
        """
        self._adjustment_date = adjustment_date

    @property
    def adjustment_time(self):
        """
        Gets the adjustment_time of this InventoryAdjustment.


        :return: The adjustment_time of this InventoryAdjustment.
        :rtype: str
        """
        return self._adjustment_time

    @adjustment_time.setter
    def adjustment_time(self, adjustment_time):
        """
        Sets the adjustment_time of this InventoryAdjustment.


        :param adjustment_time: The adjustment_time of this InventoryAdjustment.
        :type: str
        """
        self._adjustment_time = adjustment_time

    @property
    def location(self):
        """
        Gets the location of this InventoryAdjustment.


        :return: The location of this InventoryAdjustment.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this InventoryAdjustment.


        :param location: The location of this InventoryAdjustment.
        :type: str
        """
        self._location = location

    @property
    def qty(self):
        """
        Gets the qty of this InventoryAdjustment.


        :return: The qty of this InventoryAdjustment.
        :rtype: int
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """
        Sets the qty of this InventoryAdjustment.


        :param qty: The qty of this InventoryAdjustment.
        :type: int
        """
        self._qty = qty

    @property
    def note(self):
        """
        Gets the note of this InventoryAdjustment.


        :return: The note of this InventoryAdjustment.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """
        Sets the note of this InventoryAdjustment.


        :param note: The note of this InventoryAdjustment.
        :type: str
        """
        self._note = note

    @property
    def authorized_by(self):
        """
        Gets the authorized_by of this InventoryAdjustment.


        :return: The authorized_by of this InventoryAdjustment.
        :rtype: str
        """
        return self._authorized_by

    @authorized_by.setter
    def authorized_by(self, authorized_by):
        """
        Sets the authorized_by of this InventoryAdjustment.


        :param authorized_by: The authorized_by of this InventoryAdjustment.
        :type: str
        """
        self._authorized_by = authorized_by

    @property
    def printed(self):
        """
        Gets the printed of this InventoryAdjustment.


        :return: The printed of this InventoryAdjustment.
        :rtype: str
        """
        return self._printed

    @printed.setter
    def printed(self, printed):
        """
        Sets the printed of this InventoryAdjustment.


        :param printed: The printed of this InventoryAdjustment.
        :type: str
        """
        self._printed = printed

    @property
    def order_no(self):
        """
        Gets the order_no of this InventoryAdjustment.


        :return: The order_no of this InventoryAdjustment.
        :rtype: float
        """
        return self._order_no

    @order_no.setter
    def order_no(self, order_no):
        """
        Sets the order_no of this InventoryAdjustment.


        :param order_no: The order_no of this InventoryAdjustment.
        :type: float
        """
        self._order_no = order_no

    @property
    def adjustment_code(self):
        """
        Gets the adjustment_code of this InventoryAdjustment.


        :return: The adjustment_code of this InventoryAdjustment.
        :rtype: str
        """
        return self._adjustment_code

    @adjustment_code.setter
    def adjustment_code(self, adjustment_code):
        """
        Sets the adjustment_code of this InventoryAdjustment.


        :param adjustment_code: The adjustment_code of this InventoryAdjustment.
        :type: str
        """
        self._adjustment_code = adjustment_code

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this InventoryAdjustment.


        :return: The custom_fields of this InventoryAdjustment.
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this InventoryAdjustment.


        :param custom_fields: The custom_fields of this InventoryAdjustment.
        :type: dict(str, object)
        """
        self._custom_fields = custom_fields

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

