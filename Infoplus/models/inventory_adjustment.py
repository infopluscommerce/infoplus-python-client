# coding: utf-8

"""
    Infoplus API

    Infoplus API.  # noqa: E501

    OpenAPI spec version: v3.0
    Contact: api@infopluscommerce.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InventoryAdjustment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'lob_id': 'int',
        'sku': 'str',
        'po_no_id': 'int',
        'adjustment_date': 'datetime',
        'adjustment_time': 'str',
        'location': 'str',
        'qty': 'int',
        'note': 'str',
        'authorized_by': 'str',
        'printed': 'str',
        'order_no': 'float',
        'adjustment_code': 'str',
        'custom_fields': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'lob_id': 'lobId',
        'sku': 'sku',
        'po_no_id': 'poNoId',
        'adjustment_date': 'adjustmentDate',
        'adjustment_time': 'adjustmentTime',
        'location': 'location',
        'qty': 'qty',
        'note': 'note',
        'authorized_by': 'authorizedBy',
        'printed': 'printed',
        'order_no': 'orderNo',
        'adjustment_code': 'adjustmentCode',
        'custom_fields': 'customFields'
    }

    def __init__(self, id=None, lob_id=None, sku=None, po_no_id=None, adjustment_date=None, adjustment_time=None, location=None, qty=None, note=None, authorized_by=None, printed=None, order_no=None, adjustment_code=None, custom_fields=None):  # noqa: E501
        """InventoryAdjustment - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._lob_id = None
        self._sku = None
        self._po_no_id = None
        self._adjustment_date = None
        self._adjustment_time = None
        self._location = None
        self._qty = None
        self._note = None
        self._authorized_by = None
        self._printed = None
        self._order_no = None
        self._adjustment_code = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if lob_id is not None:
            self.lob_id = lob_id
        if sku is not None:
            self.sku = sku
        if po_no_id is not None:
            self.po_no_id = po_no_id
        if adjustment_date is not None:
            self.adjustment_date = adjustment_date
        if adjustment_time is not None:
            self.adjustment_time = adjustment_time
        if location is not None:
            self.location = location
        if qty is not None:
            self.qty = qty
        if note is not None:
            self.note = note
        if authorized_by is not None:
            self.authorized_by = authorized_by
        if printed is not None:
            self.printed = printed
        if order_no is not None:
            self.order_no = order_no
        if adjustment_code is not None:
            self.adjustment_code = adjustment_code
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this InventoryAdjustment.  # noqa: E501


        :return: The id of this InventoryAdjustment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InventoryAdjustment.


        :param id: The id of this InventoryAdjustment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def lob_id(self):
        """Gets the lob_id of this InventoryAdjustment.  # noqa: E501


        :return: The lob_id of this InventoryAdjustment.  # noqa: E501
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """Sets the lob_id of this InventoryAdjustment.


        :param lob_id: The lob_id of this InventoryAdjustment.  # noqa: E501
        :type: int
        """

        self._lob_id = lob_id

    @property
    def sku(self):
        """Gets the sku of this InventoryAdjustment.  # noqa: E501


        :return: The sku of this InventoryAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this InventoryAdjustment.


        :param sku: The sku of this InventoryAdjustment.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def po_no_id(self):
        """Gets the po_no_id of this InventoryAdjustment.  # noqa: E501


        :return: The po_no_id of this InventoryAdjustment.  # noqa: E501
        :rtype: int
        """
        return self._po_no_id

    @po_no_id.setter
    def po_no_id(self, po_no_id):
        """Sets the po_no_id of this InventoryAdjustment.


        :param po_no_id: The po_no_id of this InventoryAdjustment.  # noqa: E501
        :type: int
        """

        self._po_no_id = po_no_id

    @property
    def adjustment_date(self):
        """Gets the adjustment_date of this InventoryAdjustment.  # noqa: E501


        :return: The adjustment_date of this InventoryAdjustment.  # noqa: E501
        :rtype: datetime
        """
        return self._adjustment_date

    @adjustment_date.setter
    def adjustment_date(self, adjustment_date):
        """Sets the adjustment_date of this InventoryAdjustment.


        :param adjustment_date: The adjustment_date of this InventoryAdjustment.  # noqa: E501
        :type: datetime
        """

        self._adjustment_date = adjustment_date

    @property
    def adjustment_time(self):
        """Gets the adjustment_time of this InventoryAdjustment.  # noqa: E501


        :return: The adjustment_time of this InventoryAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_time

    @adjustment_time.setter
    def adjustment_time(self, adjustment_time):
        """Sets the adjustment_time of this InventoryAdjustment.


        :param adjustment_time: The adjustment_time of this InventoryAdjustment.  # noqa: E501
        :type: str
        """

        self._adjustment_time = adjustment_time

    @property
    def location(self):
        """Gets the location of this InventoryAdjustment.  # noqa: E501


        :return: The location of this InventoryAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this InventoryAdjustment.


        :param location: The location of this InventoryAdjustment.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def qty(self):
        """Gets the qty of this InventoryAdjustment.  # noqa: E501


        :return: The qty of this InventoryAdjustment.  # noqa: E501
        :rtype: int
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this InventoryAdjustment.


        :param qty: The qty of this InventoryAdjustment.  # noqa: E501
        :type: int
        """

        self._qty = qty

    @property
    def note(self):
        """Gets the note of this InventoryAdjustment.  # noqa: E501


        :return: The note of this InventoryAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this InventoryAdjustment.


        :param note: The note of this InventoryAdjustment.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def authorized_by(self):
        """Gets the authorized_by of this InventoryAdjustment.  # noqa: E501


        :return: The authorized_by of this InventoryAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._authorized_by

    @authorized_by.setter
    def authorized_by(self, authorized_by):
        """Sets the authorized_by of this InventoryAdjustment.


        :param authorized_by: The authorized_by of this InventoryAdjustment.  # noqa: E501
        :type: str
        """

        self._authorized_by = authorized_by

    @property
    def printed(self):
        """Gets the printed of this InventoryAdjustment.  # noqa: E501


        :return: The printed of this InventoryAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._printed

    @printed.setter
    def printed(self, printed):
        """Sets the printed of this InventoryAdjustment.


        :param printed: The printed of this InventoryAdjustment.  # noqa: E501
        :type: str
        """

        self._printed = printed

    @property
    def order_no(self):
        """Gets the order_no of this InventoryAdjustment.  # noqa: E501


        :return: The order_no of this InventoryAdjustment.  # noqa: E501
        :rtype: float
        """
        return self._order_no

    @order_no.setter
    def order_no(self, order_no):
        """Sets the order_no of this InventoryAdjustment.


        :param order_no: The order_no of this InventoryAdjustment.  # noqa: E501
        :type: float
        """

        self._order_no = order_no

    @property
    def adjustment_code(self):
        """Gets the adjustment_code of this InventoryAdjustment.  # noqa: E501


        :return: The adjustment_code of this InventoryAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_code

    @adjustment_code.setter
    def adjustment_code(self, adjustment_code):
        """Sets the adjustment_code of this InventoryAdjustment.


        :param adjustment_code: The adjustment_code of this InventoryAdjustment.  # noqa: E501
        :type: str
        """

        self._adjustment_code = adjustment_code

    @property
    def custom_fields(self):
        """Gets the custom_fields of this InventoryAdjustment.  # noqa: E501


        :return: The custom_fields of this InventoryAdjustment.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this InventoryAdjustment.


        :param custom_fields: The custom_fields of this InventoryAdjustment.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InventoryAdjustment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
