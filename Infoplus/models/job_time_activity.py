# coding: utf-8

"""
    Infoplus API

    Infoplus API.  # noqa: E501

    OpenAPI spec version: beta
    Contact: api@infopluscommerce.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JobTimeActivity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'imported_id': 'int',
        'create_date': 'datetime',
        'modify_date': 'datetime',
        'date': 'datetime',
        'second_duration': 'int',
        'user_id': 'int',
        'email': 'str',
        'lob_id': 'int',
        'job_type_id': 'int',
        'job_type_name': 'str',
        'note': 'str',
        'billing_quantity': 'float',
        'charge_rate': 'float',
        'extended_charge': 'float',
        'custom_fields': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'imported_id': 'importedId',
        'create_date': 'createDate',
        'modify_date': 'modifyDate',
        'date': 'date',
        'second_duration': 'secondDuration',
        'user_id': 'userId',
        'email': 'email',
        'lob_id': 'lobId',
        'job_type_id': 'jobTypeId',
        'job_type_name': 'jobTypeName',
        'note': 'note',
        'billing_quantity': 'billingQuantity',
        'charge_rate': 'chargeRate',
        'extended_charge': 'extendedCharge',
        'custom_fields': 'customFields'
    }

    def __init__(self, id=None, imported_id=None, create_date=None, modify_date=None, date=None, second_duration=None, user_id=None, email=None, lob_id=None, job_type_id=None, job_type_name=None, note=None, billing_quantity=None, charge_rate=None, extended_charge=None, custom_fields=None):  # noqa: E501
        """JobTimeActivity - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._imported_id = None
        self._create_date = None
        self._modify_date = None
        self._date = None
        self._second_duration = None
        self._user_id = None
        self._email = None
        self._lob_id = None
        self._job_type_id = None
        self._job_type_name = None
        self._note = None
        self._billing_quantity = None
        self._charge_rate = None
        self._extended_charge = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if imported_id is not None:
            self.imported_id = imported_id
        if create_date is not None:
            self.create_date = create_date
        if modify_date is not None:
            self.modify_date = modify_date
        if date is not None:
            self.date = date
        self.second_duration = second_duration
        self.user_id = user_id
        if email is not None:
            self.email = email
        self.lob_id = lob_id
        self.job_type_id = job_type_id
        if job_type_name is not None:
            self.job_type_name = job_type_name
        if note is not None:
            self.note = note
        if billing_quantity is not None:
            self.billing_quantity = billing_quantity
        if charge_rate is not None:
            self.charge_rate = charge_rate
        if extended_charge is not None:
            self.extended_charge = extended_charge
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this JobTimeActivity.  # noqa: E501


        :return: The id of this JobTimeActivity.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobTimeActivity.


        :param id: The id of this JobTimeActivity.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def imported_id(self):
        """Gets the imported_id of this JobTimeActivity.  # noqa: E501


        :return: The imported_id of this JobTimeActivity.  # noqa: E501
        :rtype: int
        """
        return self._imported_id

    @imported_id.setter
    def imported_id(self, imported_id):
        """Sets the imported_id of this JobTimeActivity.


        :param imported_id: The imported_id of this JobTimeActivity.  # noqa: E501
        :type: int
        """

        self._imported_id = imported_id

    @property
    def create_date(self):
        """Gets the create_date of this JobTimeActivity.  # noqa: E501


        :return: The create_date of this JobTimeActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this JobTimeActivity.


        :param create_date: The create_date of this JobTimeActivity.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def modify_date(self):
        """Gets the modify_date of this JobTimeActivity.  # noqa: E501


        :return: The modify_date of this JobTimeActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """Sets the modify_date of this JobTimeActivity.


        :param modify_date: The modify_date of this JobTimeActivity.  # noqa: E501
        :type: datetime
        """

        self._modify_date = modify_date

    @property
    def date(self):
        """Gets the date of this JobTimeActivity.  # noqa: E501


        :return: The date of this JobTimeActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this JobTimeActivity.


        :param date: The date of this JobTimeActivity.  # noqa: E501
        :type: datetime
        """

        self._date = date

    @property
    def second_duration(self):
        """Gets the second_duration of this JobTimeActivity.  # noqa: E501


        :return: The second_duration of this JobTimeActivity.  # noqa: E501
        :rtype: int
        """
        return self._second_duration

    @second_duration.setter
    def second_duration(self, second_duration):
        """Sets the second_duration of this JobTimeActivity.


        :param second_duration: The second_duration of this JobTimeActivity.  # noqa: E501
        :type: int
        """
        if second_duration is None:
            raise ValueError("Invalid value for `second_duration`, must not be `None`")  # noqa: E501

        self._second_duration = second_duration

    @property
    def user_id(self):
        """Gets the user_id of this JobTimeActivity.  # noqa: E501


        :return: The user_id of this JobTimeActivity.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this JobTimeActivity.


        :param user_id: The user_id of this JobTimeActivity.  # noqa: E501
        :type: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def email(self):
        """Gets the email of this JobTimeActivity.  # noqa: E501


        :return: The email of this JobTimeActivity.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this JobTimeActivity.


        :param email: The email of this JobTimeActivity.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def lob_id(self):
        """Gets the lob_id of this JobTimeActivity.  # noqa: E501


        :return: The lob_id of this JobTimeActivity.  # noqa: E501
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """Sets the lob_id of this JobTimeActivity.


        :param lob_id: The lob_id of this JobTimeActivity.  # noqa: E501
        :type: int
        """
        if lob_id is None:
            raise ValueError("Invalid value for `lob_id`, must not be `None`")  # noqa: E501

        self._lob_id = lob_id

    @property
    def job_type_id(self):
        """Gets the job_type_id of this JobTimeActivity.  # noqa: E501


        :return: The job_type_id of this JobTimeActivity.  # noqa: E501
        :rtype: int
        """
        return self._job_type_id

    @job_type_id.setter
    def job_type_id(self, job_type_id):
        """Sets the job_type_id of this JobTimeActivity.


        :param job_type_id: The job_type_id of this JobTimeActivity.  # noqa: E501
        :type: int
        """
        if job_type_id is None:
            raise ValueError("Invalid value for `job_type_id`, must not be `None`")  # noqa: E501

        self._job_type_id = job_type_id

    @property
    def job_type_name(self):
        """Gets the job_type_name of this JobTimeActivity.  # noqa: E501


        :return: The job_type_name of this JobTimeActivity.  # noqa: E501
        :rtype: str
        """
        return self._job_type_name

    @job_type_name.setter
    def job_type_name(self, job_type_name):
        """Sets the job_type_name of this JobTimeActivity.


        :param job_type_name: The job_type_name of this JobTimeActivity.  # noqa: E501
        :type: str
        """

        self._job_type_name = job_type_name

    @property
    def note(self):
        """Gets the note of this JobTimeActivity.  # noqa: E501


        :return: The note of this JobTimeActivity.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this JobTimeActivity.


        :param note: The note of this JobTimeActivity.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def billing_quantity(self):
        """Gets the billing_quantity of this JobTimeActivity.  # noqa: E501


        :return: The billing_quantity of this JobTimeActivity.  # noqa: E501
        :rtype: float
        """
        return self._billing_quantity

    @billing_quantity.setter
    def billing_quantity(self, billing_quantity):
        """Sets the billing_quantity of this JobTimeActivity.


        :param billing_quantity: The billing_quantity of this JobTimeActivity.  # noqa: E501
        :type: float
        """

        self._billing_quantity = billing_quantity

    @property
    def charge_rate(self):
        """Gets the charge_rate of this JobTimeActivity.  # noqa: E501


        :return: The charge_rate of this JobTimeActivity.  # noqa: E501
        :rtype: float
        """
        return self._charge_rate

    @charge_rate.setter
    def charge_rate(self, charge_rate):
        """Sets the charge_rate of this JobTimeActivity.


        :param charge_rate: The charge_rate of this JobTimeActivity.  # noqa: E501
        :type: float
        """

        self._charge_rate = charge_rate

    @property
    def extended_charge(self):
        """Gets the extended_charge of this JobTimeActivity.  # noqa: E501


        :return: The extended_charge of this JobTimeActivity.  # noqa: E501
        :rtype: float
        """
        return self._extended_charge

    @extended_charge.setter
    def extended_charge(self, extended_charge):
        """Sets the extended_charge of this JobTimeActivity.


        :param extended_charge: The extended_charge of this JobTimeActivity.  # noqa: E501
        :type: float
        """

        self._extended_charge = extended_charge

    @property
    def custom_fields(self):
        """Gets the custom_fields of this JobTimeActivity.  # noqa: E501


        :return: The custom_fields of this JobTimeActivity.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this JobTimeActivity.


        :param custom_fields: The custom_fields of this JobTimeActivity.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobTimeActivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
