# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class LowStock(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        LowStock - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'warehouse_id': 'int',
            'low_level_date': 'datetime',
            'low_stock_message': 'str',
            'print_flag': 'str',
            'is_delayed': 'bool',
            'create_date': 'datetime',
            'modify_date': 'datetime',
            'custom_fields': 'dict(str, object)',
            'sku': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'warehouse_id': 'warehouseId',
            'low_level_date': 'lowLevelDate',
            'low_stock_message': 'lowStockMessage',
            'print_flag': 'printFlag',
            'is_delayed': 'isDelayed',
            'create_date': 'createDate',
            'modify_date': 'modifyDate',
            'custom_fields': 'customFields',
            'sku': 'sku'
        }

        self._id = None
        self._warehouse_id = None
        self._low_level_date = None
        self._low_stock_message = None
        self._print_flag = None
        self._is_delayed = False
        self._create_date = None
        self._modify_date = None
        self._custom_fields = None
        self._sku = None

    @property
    def id(self):
        """
        Gets the id of this LowStock.


        :return: The id of this LowStock.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LowStock.


        :param id: The id of this LowStock.
        :type: int
        """
        self._id = id

    @property
    def warehouse_id(self):
        """
        Gets the warehouse_id of this LowStock.


        :return: The warehouse_id of this LowStock.
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """
        Sets the warehouse_id of this LowStock.


        :param warehouse_id: The warehouse_id of this LowStock.
        :type: int
        """
        self._warehouse_id = warehouse_id

    @property
    def low_level_date(self):
        """
        Gets the low_level_date of this LowStock.


        :return: The low_level_date of this LowStock.
        :rtype: datetime
        """
        return self._low_level_date

    @low_level_date.setter
    def low_level_date(self, low_level_date):
        """
        Sets the low_level_date of this LowStock.


        :param low_level_date: The low_level_date of this LowStock.
        :type: datetime
        """
        self._low_level_date = low_level_date

    @property
    def low_stock_message(self):
        """
        Gets the low_stock_message of this LowStock.


        :return: The low_stock_message of this LowStock.
        :rtype: str
        """
        return self._low_stock_message

    @low_stock_message.setter
    def low_stock_message(self, low_stock_message):
        """
        Sets the low_stock_message of this LowStock.


        :param low_stock_message: The low_stock_message of this LowStock.
        :type: str
        """
        self._low_stock_message = low_stock_message

    @property
    def print_flag(self):
        """
        Gets the print_flag of this LowStock.


        :return: The print_flag of this LowStock.
        :rtype: str
        """
        return self._print_flag

    @print_flag.setter
    def print_flag(self, print_flag):
        """
        Sets the print_flag of this LowStock.


        :param print_flag: The print_flag of this LowStock.
        :type: str
        """
        self._print_flag = print_flag

    @property
    def is_delayed(self):
        """
        Gets the is_delayed of this LowStock.


        :return: The is_delayed of this LowStock.
        :rtype: bool
        """
        return self._is_delayed

    @is_delayed.setter
    def is_delayed(self, is_delayed):
        """
        Sets the is_delayed of this LowStock.


        :param is_delayed: The is_delayed of this LowStock.
        :type: bool
        """
        self._is_delayed = is_delayed

    @property
    def create_date(self):
        """
        Gets the create_date of this LowStock.


        :return: The create_date of this LowStock.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """
        Sets the create_date of this LowStock.


        :param create_date: The create_date of this LowStock.
        :type: datetime
        """
        self._create_date = create_date

    @property
    def modify_date(self):
        """
        Gets the modify_date of this LowStock.


        :return: The modify_date of this LowStock.
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """
        Sets the modify_date of this LowStock.


        :param modify_date: The modify_date of this LowStock.
        :type: datetime
        """
        self._modify_date = modify_date

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this LowStock.


        :return: The custom_fields of this LowStock.
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this LowStock.


        :param custom_fields: The custom_fields of this LowStock.
        :type: dict(str, object)
        """
        self._custom_fields = custom_fields

    @property
    def sku(self):
        """
        Gets the sku of this LowStock.


        :return: The sku of this LowStock.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this LowStock.


        :param sku: The sku of this LowStock.
        :type: str
        """
        self._sku = sku

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

