# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Customer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Customer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'lob_id': 'int',
            'customer_no': 'str',
            'name': 'str',
            'attention': 'str',
            'street': 'str',
            'street2': 'str',
            'street3_province': 'str',
            'city': 'str',
            'state': 'str',
            'zip_code': 'str',
            'country': 'str',
            'phone': 'str',
            'fax': 'str',
            'email': 'str',
            'boss_branch': 'str',
            'package_carrier_id': 'int',
            'truck_carrier_id': 'int',
            'weight_break': 'int',
            'sector': 'str',
            'division': 'int',
            'cost_center': 'str',
            'county': 'str',
            'area': 'str',
            'customer_type': 'str',
            'mass_level': 'str',
            'mass_factor': 'float',
            'price_level': 'str',
            'open_date': 'datetime',
            'close_date': 'datetime',
            'restriction_percent': 'int',
            'external_id': 'str',
            'cycle_date': 'datetime',
            'manager': 'str',
            'alternate_inventory': 'int',
            'pin': 'str',
            'fax_gone': 'str',
            'residential': 'str',
            'csr_branch': 'str',
            'extrinsic_text1': 'str',
            'extrinsic_text2': 'str',
            'extrinsic_text3': 'str',
            'extrinsic_number1': 'int',
            'extrinsic_number2': 'int',
            'extrinsic_decimal1': 'float',
            'extrinsic_decimal2': 'float',
            'modify_date': 'datetime',
            'oms_customer_id': 'int',
            'custom_fields': 'dict(str, object)'
        }

        self.attribute_map = {
            'id': 'id',
            'lob_id': 'lobId',
            'customer_no': 'customerNo',
            'name': 'name',
            'attention': 'attention',
            'street': 'street',
            'street2': 'street2',
            'street3_province': 'street3Province',
            'city': 'city',
            'state': 'state',
            'zip_code': 'zipCode',
            'country': 'country',
            'phone': 'phone',
            'fax': 'fax',
            'email': 'email',
            'boss_branch': 'bossBranch',
            'package_carrier_id': 'packageCarrierId',
            'truck_carrier_id': 'truckCarrierId',
            'weight_break': 'weightBreak',
            'sector': 'sector',
            'division': 'division',
            'cost_center': 'costCenter',
            'county': 'county',
            'area': 'area',
            'customer_type': 'customerType',
            'mass_level': 'massLevel',
            'mass_factor': 'massFactor',
            'price_level': 'priceLevel',
            'open_date': 'openDate',
            'close_date': 'closeDate',
            'restriction_percent': 'restrictionPercent',
            'external_id': 'externalId',
            'cycle_date': 'cycleDate',
            'manager': 'manager',
            'alternate_inventory': 'alternateInventory',
            'pin': 'pin',
            'fax_gone': 'faxGone',
            'residential': 'residential',
            'csr_branch': 'csrBranch',
            'extrinsic_text1': 'extrinsicText1',
            'extrinsic_text2': 'extrinsicText2',
            'extrinsic_text3': 'extrinsicText3',
            'extrinsic_number1': 'extrinsicNumber1',
            'extrinsic_number2': 'extrinsicNumber2',
            'extrinsic_decimal1': 'extrinsicDecimal1',
            'extrinsic_decimal2': 'extrinsicDecimal2',
            'modify_date': 'modifyDate',
            'oms_customer_id': 'omsCustomerId',
            'custom_fields': 'customFields'
        }

        self._id = None
        self._lob_id = None
        self._customer_no = None
        self._name = None
        self._attention = None
        self._street = None
        self._street2 = None
        self._street3_province = None
        self._city = None
        self._state = None
        self._zip_code = None
        self._country = None
        self._phone = None
        self._fax = None
        self._email = None
        self._boss_branch = None
        self._package_carrier_id = None
        self._truck_carrier_id = None
        self._weight_break = None
        self._sector = None
        self._division = None
        self._cost_center = None
        self._county = None
        self._area = None
        self._customer_type = None
        self._mass_level = None
        self._mass_factor = None
        self._price_level = None
        self._open_date = None
        self._close_date = None
        self._restriction_percent = None
        self._external_id = None
        self._cycle_date = None
        self._manager = None
        self._alternate_inventory = None
        self._pin = None
        self._fax_gone = None
        self._residential = None
        self._csr_branch = None
        self._extrinsic_text1 = None
        self._extrinsic_text2 = None
        self._extrinsic_text3 = None
        self._extrinsic_number1 = None
        self._extrinsic_number2 = None
        self._extrinsic_decimal1 = None
        self._extrinsic_decimal2 = None
        self._modify_date = None
        self._oms_customer_id = None
        self._custom_fields = None

    @property
    def id(self):
        """
        Gets the id of this Customer.


        :return: The id of this Customer.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Customer.


        :param id: The id of this Customer.
        :type: int
        """
        self._id = id

    @property
    def lob_id(self):
        """
        Gets the lob_id of this Customer.


        :return: The lob_id of this Customer.
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """
        Sets the lob_id of this Customer.


        :param lob_id: The lob_id of this Customer.
        :type: int
        """
        self._lob_id = lob_id

    @property
    def customer_no(self):
        """
        Gets the customer_no of this Customer.


        :return: The customer_no of this Customer.
        :rtype: str
        """
        return self._customer_no

    @customer_no.setter
    def customer_no(self, customer_no):
        """
        Sets the customer_no of this Customer.


        :param customer_no: The customer_no of this Customer.
        :type: str
        """
        self._customer_no = customer_no

    @property
    def name(self):
        """
        Gets the name of this Customer.


        :return: The name of this Customer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Customer.


        :param name: The name of this Customer.
        :type: str
        """
        self._name = name

    @property
    def attention(self):
        """
        Gets the attention of this Customer.


        :return: The attention of this Customer.
        :rtype: str
        """
        return self._attention

    @attention.setter
    def attention(self, attention):
        """
        Sets the attention of this Customer.


        :param attention: The attention of this Customer.
        :type: str
        """
        self._attention = attention

    @property
    def street(self):
        """
        Gets the street of this Customer.


        :return: The street of this Customer.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """
        Sets the street of this Customer.


        :param street: The street of this Customer.
        :type: str
        """
        self._street = street

    @property
    def street2(self):
        """
        Gets the street2 of this Customer.


        :return: The street2 of this Customer.
        :rtype: str
        """
        return self._street2

    @street2.setter
    def street2(self, street2):
        """
        Sets the street2 of this Customer.


        :param street2: The street2 of this Customer.
        :type: str
        """
        self._street2 = street2

    @property
    def street3_province(self):
        """
        Gets the street3_province of this Customer.


        :return: The street3_province of this Customer.
        :rtype: str
        """
        return self._street3_province

    @street3_province.setter
    def street3_province(self, street3_province):
        """
        Sets the street3_province of this Customer.


        :param street3_province: The street3_province of this Customer.
        :type: str
        """
        self._street3_province = street3_province

    @property
    def city(self):
        """
        Gets the city of this Customer.


        :return: The city of this Customer.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this Customer.


        :param city: The city of this Customer.
        :type: str
        """
        self._city = city

    @property
    def state(self):
        """
        Gets the state of this Customer.


        :return: The state of this Customer.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Customer.


        :param state: The state of this Customer.
        :type: str
        """
        self._state = state

    @property
    def zip_code(self):
        """
        Gets the zip_code of this Customer.


        :return: The zip_code of this Customer.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """
        Sets the zip_code of this Customer.


        :param zip_code: The zip_code of this Customer.
        :type: str
        """
        self._zip_code = zip_code

    @property
    def country(self):
        """
        Gets the country of this Customer.


        :return: The country of this Customer.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this Customer.


        :param country: The country of this Customer.
        :type: str
        """
        self._country = country

    @property
    def phone(self):
        """
        Gets the phone of this Customer.


        :return: The phone of this Customer.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this Customer.


        :param phone: The phone of this Customer.
        :type: str
        """
        self._phone = phone

    @property
    def fax(self):
        """
        Gets the fax of this Customer.


        :return: The fax of this Customer.
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """
        Sets the fax of this Customer.


        :param fax: The fax of this Customer.
        :type: str
        """
        self._fax = fax

    @property
    def email(self):
        """
        Gets the email of this Customer.


        :return: The email of this Customer.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Customer.


        :param email: The email of this Customer.
        :type: str
        """
        self._email = email

    @property
    def boss_branch(self):
        """
        Gets the boss_branch of this Customer.


        :return: The boss_branch of this Customer.
        :rtype: str
        """
        return self._boss_branch

    @boss_branch.setter
    def boss_branch(self, boss_branch):
        """
        Sets the boss_branch of this Customer.


        :param boss_branch: The boss_branch of this Customer.
        :type: str
        """
        self._boss_branch = boss_branch

    @property
    def package_carrier_id(self):
        """
        Gets the package_carrier_id of this Customer.


        :return: The package_carrier_id of this Customer.
        :rtype: int
        """
        return self._package_carrier_id

    @package_carrier_id.setter
    def package_carrier_id(self, package_carrier_id):
        """
        Sets the package_carrier_id of this Customer.


        :param package_carrier_id: The package_carrier_id of this Customer.
        :type: int
        """
        self._package_carrier_id = package_carrier_id

    @property
    def truck_carrier_id(self):
        """
        Gets the truck_carrier_id of this Customer.


        :return: The truck_carrier_id of this Customer.
        :rtype: int
        """
        return self._truck_carrier_id

    @truck_carrier_id.setter
    def truck_carrier_id(self, truck_carrier_id):
        """
        Sets the truck_carrier_id of this Customer.


        :param truck_carrier_id: The truck_carrier_id of this Customer.
        :type: int
        """
        self._truck_carrier_id = truck_carrier_id

    @property
    def weight_break(self):
        """
        Gets the weight_break of this Customer.


        :return: The weight_break of this Customer.
        :rtype: int
        """
        return self._weight_break

    @weight_break.setter
    def weight_break(self, weight_break):
        """
        Sets the weight_break of this Customer.


        :param weight_break: The weight_break of this Customer.
        :type: int
        """
        self._weight_break = weight_break

    @property
    def sector(self):
        """
        Gets the sector of this Customer.


        :return: The sector of this Customer.
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """
        Sets the sector of this Customer.


        :param sector: The sector of this Customer.
        :type: str
        """
        self._sector = sector

    @property
    def division(self):
        """
        Gets the division of this Customer.


        :return: The division of this Customer.
        :rtype: int
        """
        return self._division

    @division.setter
    def division(self, division):
        """
        Sets the division of this Customer.


        :param division: The division of this Customer.
        :type: int
        """
        self._division = division

    @property
    def cost_center(self):
        """
        Gets the cost_center of this Customer.


        :return: The cost_center of this Customer.
        :rtype: str
        """
        return self._cost_center

    @cost_center.setter
    def cost_center(self, cost_center):
        """
        Sets the cost_center of this Customer.


        :param cost_center: The cost_center of this Customer.
        :type: str
        """
        self._cost_center = cost_center

    @property
    def county(self):
        """
        Gets the county of this Customer.


        :return: The county of this Customer.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """
        Sets the county of this Customer.


        :param county: The county of this Customer.
        :type: str
        """
        self._county = county

    @property
    def area(self):
        """
        Gets the area of this Customer.


        :return: The area of this Customer.
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """
        Sets the area of this Customer.


        :param area: The area of this Customer.
        :type: str
        """
        self._area = area

    @property
    def customer_type(self):
        """
        Gets the customer_type of this Customer.


        :return: The customer_type of this Customer.
        :rtype: str
        """
        return self._customer_type

    @customer_type.setter
    def customer_type(self, customer_type):
        """
        Sets the customer_type of this Customer.


        :param customer_type: The customer_type of this Customer.
        :type: str
        """
        self._customer_type = customer_type

    @property
    def mass_level(self):
        """
        Gets the mass_level of this Customer.


        :return: The mass_level of this Customer.
        :rtype: str
        """
        return self._mass_level

    @mass_level.setter
    def mass_level(self, mass_level):
        """
        Sets the mass_level of this Customer.


        :param mass_level: The mass_level of this Customer.
        :type: str
        """
        self._mass_level = mass_level

    @property
    def mass_factor(self):
        """
        Gets the mass_factor of this Customer.


        :return: The mass_factor of this Customer.
        :rtype: float
        """
        return self._mass_factor

    @mass_factor.setter
    def mass_factor(self, mass_factor):
        """
        Sets the mass_factor of this Customer.


        :param mass_factor: The mass_factor of this Customer.
        :type: float
        """
        self._mass_factor = mass_factor

    @property
    def price_level(self):
        """
        Gets the price_level of this Customer.


        :return: The price_level of this Customer.
        :rtype: str
        """
        return self._price_level

    @price_level.setter
    def price_level(self, price_level):
        """
        Sets the price_level of this Customer.


        :param price_level: The price_level of this Customer.
        :type: str
        """
        self._price_level = price_level

    @property
    def open_date(self):
        """
        Gets the open_date of this Customer.


        :return: The open_date of this Customer.
        :rtype: datetime
        """
        return self._open_date

    @open_date.setter
    def open_date(self, open_date):
        """
        Sets the open_date of this Customer.


        :param open_date: The open_date of this Customer.
        :type: datetime
        """
        self._open_date = open_date

    @property
    def close_date(self):
        """
        Gets the close_date of this Customer.


        :return: The close_date of this Customer.
        :rtype: datetime
        """
        return self._close_date

    @close_date.setter
    def close_date(self, close_date):
        """
        Sets the close_date of this Customer.


        :param close_date: The close_date of this Customer.
        :type: datetime
        """
        self._close_date = close_date

    @property
    def restriction_percent(self):
        """
        Gets the restriction_percent of this Customer.


        :return: The restriction_percent of this Customer.
        :rtype: int
        """
        return self._restriction_percent

    @restriction_percent.setter
    def restriction_percent(self, restriction_percent):
        """
        Sets the restriction_percent of this Customer.


        :param restriction_percent: The restriction_percent of this Customer.
        :type: int
        """
        self._restriction_percent = restriction_percent

    @property
    def external_id(self):
        """
        Gets the external_id of this Customer.


        :return: The external_id of this Customer.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """
        Sets the external_id of this Customer.


        :param external_id: The external_id of this Customer.
        :type: str
        """
        self._external_id = external_id

    @property
    def cycle_date(self):
        """
        Gets the cycle_date of this Customer.


        :return: The cycle_date of this Customer.
        :rtype: datetime
        """
        return self._cycle_date

    @cycle_date.setter
    def cycle_date(self, cycle_date):
        """
        Sets the cycle_date of this Customer.


        :param cycle_date: The cycle_date of this Customer.
        :type: datetime
        """
        self._cycle_date = cycle_date

    @property
    def manager(self):
        """
        Gets the manager of this Customer.


        :return: The manager of this Customer.
        :rtype: str
        """
        return self._manager

    @manager.setter
    def manager(self, manager):
        """
        Sets the manager of this Customer.


        :param manager: The manager of this Customer.
        :type: str
        """
        self._manager = manager

    @property
    def alternate_inventory(self):
        """
        Gets the alternate_inventory of this Customer.


        :return: The alternate_inventory of this Customer.
        :rtype: int
        """
        return self._alternate_inventory

    @alternate_inventory.setter
    def alternate_inventory(self, alternate_inventory):
        """
        Sets the alternate_inventory of this Customer.


        :param alternate_inventory: The alternate_inventory of this Customer.
        :type: int
        """
        self._alternate_inventory = alternate_inventory

    @property
    def pin(self):
        """
        Gets the pin of this Customer.


        :return: The pin of this Customer.
        :rtype: str
        """
        return self._pin

    @pin.setter
    def pin(self, pin):
        """
        Sets the pin of this Customer.


        :param pin: The pin of this Customer.
        :type: str
        """
        self._pin = pin

    @property
    def fax_gone(self):
        """
        Gets the fax_gone of this Customer.


        :return: The fax_gone of this Customer.
        :rtype: str
        """
        return self._fax_gone

    @fax_gone.setter
    def fax_gone(self, fax_gone):
        """
        Sets the fax_gone of this Customer.


        :param fax_gone: The fax_gone of this Customer.
        :type: str
        """
        self._fax_gone = fax_gone

    @property
    def residential(self):
        """
        Gets the residential of this Customer.


        :return: The residential of this Customer.
        :rtype: str
        """
        return self._residential

    @residential.setter
    def residential(self, residential):
        """
        Sets the residential of this Customer.


        :param residential: The residential of this Customer.
        :type: str
        """
        self._residential = residential

    @property
    def csr_branch(self):
        """
        Gets the csr_branch of this Customer.


        :return: The csr_branch of this Customer.
        :rtype: str
        """
        return self._csr_branch

    @csr_branch.setter
    def csr_branch(self, csr_branch):
        """
        Sets the csr_branch of this Customer.


        :param csr_branch: The csr_branch of this Customer.
        :type: str
        """
        self._csr_branch = csr_branch

    @property
    def extrinsic_text1(self):
        """
        Gets the extrinsic_text1 of this Customer.


        :return: The extrinsic_text1 of this Customer.
        :rtype: str
        """
        return self._extrinsic_text1

    @extrinsic_text1.setter
    def extrinsic_text1(self, extrinsic_text1):
        """
        Sets the extrinsic_text1 of this Customer.


        :param extrinsic_text1: The extrinsic_text1 of this Customer.
        :type: str
        """
        self._extrinsic_text1 = extrinsic_text1

    @property
    def extrinsic_text2(self):
        """
        Gets the extrinsic_text2 of this Customer.


        :return: The extrinsic_text2 of this Customer.
        :rtype: str
        """
        return self._extrinsic_text2

    @extrinsic_text2.setter
    def extrinsic_text2(self, extrinsic_text2):
        """
        Sets the extrinsic_text2 of this Customer.


        :param extrinsic_text2: The extrinsic_text2 of this Customer.
        :type: str
        """
        self._extrinsic_text2 = extrinsic_text2

    @property
    def extrinsic_text3(self):
        """
        Gets the extrinsic_text3 of this Customer.


        :return: The extrinsic_text3 of this Customer.
        :rtype: str
        """
        return self._extrinsic_text3

    @extrinsic_text3.setter
    def extrinsic_text3(self, extrinsic_text3):
        """
        Sets the extrinsic_text3 of this Customer.


        :param extrinsic_text3: The extrinsic_text3 of this Customer.
        :type: str
        """
        self._extrinsic_text3 = extrinsic_text3

    @property
    def extrinsic_number1(self):
        """
        Gets the extrinsic_number1 of this Customer.


        :return: The extrinsic_number1 of this Customer.
        :rtype: int
        """
        return self._extrinsic_number1

    @extrinsic_number1.setter
    def extrinsic_number1(self, extrinsic_number1):
        """
        Sets the extrinsic_number1 of this Customer.


        :param extrinsic_number1: The extrinsic_number1 of this Customer.
        :type: int
        """
        self._extrinsic_number1 = extrinsic_number1

    @property
    def extrinsic_number2(self):
        """
        Gets the extrinsic_number2 of this Customer.


        :return: The extrinsic_number2 of this Customer.
        :rtype: int
        """
        return self._extrinsic_number2

    @extrinsic_number2.setter
    def extrinsic_number2(self, extrinsic_number2):
        """
        Sets the extrinsic_number2 of this Customer.


        :param extrinsic_number2: The extrinsic_number2 of this Customer.
        :type: int
        """
        self._extrinsic_number2 = extrinsic_number2

    @property
    def extrinsic_decimal1(self):
        """
        Gets the extrinsic_decimal1 of this Customer.


        :return: The extrinsic_decimal1 of this Customer.
        :rtype: float
        """
        return self._extrinsic_decimal1

    @extrinsic_decimal1.setter
    def extrinsic_decimal1(self, extrinsic_decimal1):
        """
        Sets the extrinsic_decimal1 of this Customer.


        :param extrinsic_decimal1: The extrinsic_decimal1 of this Customer.
        :type: float
        """
        self._extrinsic_decimal1 = extrinsic_decimal1

    @property
    def extrinsic_decimal2(self):
        """
        Gets the extrinsic_decimal2 of this Customer.


        :return: The extrinsic_decimal2 of this Customer.
        :rtype: float
        """
        return self._extrinsic_decimal2

    @extrinsic_decimal2.setter
    def extrinsic_decimal2(self, extrinsic_decimal2):
        """
        Sets the extrinsic_decimal2 of this Customer.


        :param extrinsic_decimal2: The extrinsic_decimal2 of this Customer.
        :type: float
        """
        self._extrinsic_decimal2 = extrinsic_decimal2

    @property
    def modify_date(self):
        """
        Gets the modify_date of this Customer.


        :return: The modify_date of this Customer.
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """
        Sets the modify_date of this Customer.


        :param modify_date: The modify_date of this Customer.
        :type: datetime
        """
        self._modify_date = modify_date

    @property
    def oms_customer_id(self):
        """
        Gets the oms_customer_id of this Customer.


        :return: The oms_customer_id of this Customer.
        :rtype: int
        """
        return self._oms_customer_id

    @oms_customer_id.setter
    def oms_customer_id(self, oms_customer_id):
        """
        Sets the oms_customer_id of this Customer.


        :param oms_customer_id: The oms_customer_id of this Customer.
        :type: int
        """
        self._oms_customer_id = oms_customer_id

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this Customer.


        :return: The custom_fields of this Customer.
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this Customer.


        :param custom_fields: The custom_fields of this Customer.
        :type: dict(str, object)
        """
        self._custom_fields = custom_fields

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

