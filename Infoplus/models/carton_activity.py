# coding: utf-8

"""
    Infoplus API

    Infoplus API.  # noqa: E501

    OpenAPI spec version: beta
    Contact: api@infopluscommerce.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CartonActivity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'create_date': 'datetime',
        'modify_date': 'datetime',
        'lob_id': 'int',
        'order_no': 'float',
        'ship_date': 'datetime',
        'delivered_date': 'datetime',
        'tracking_no': 'str',
        'warehouse_id': 'int',
        'warehouse_name': 'str',
        'carton_no': 'int',
        'number_of_cartons': 'int',
        'status': 'str',
        'shipped': 'bool',
        'carrier_service_id': 'int',
        'dim1_in': 'float',
        'dim2_in': 'float',
        'dim3_in': 'float',
        'estimated_zone': 'str',
        'parcel_account_no': 'str',
        'third_party_parcel_account_no': 'str',
        'manifest_id': 'int',
        'residential': 'bool',
        'billing_option': 'str',
        'weight_lbs': 'float',
        'dim_weight': 'float',
        'license_plate_number': 'str',
        'charged_freight_amount': 'float',
        'published_freight_amount': 'float',
        'retail_freight_amount': 'float',
        'carton_create_date': 'datetime',
        'carton_modify_date': 'datetime',
        'alternate_usage': 'str',
        'group_order_id': 'float',
        'order_status': 'str',
        'order_status_name': 'str',
        'fulfillment_process_id': 'int',
        'carrier_id': 'int',
        'carrier_name': 'str',
        'media_code': 'str',
        'legacy_restriction_type': 'str',
        'req_type_name': 'str',
        'legacy_service_type': 'str',
        'legacy_service_type_name': 'str',
        'alcohol_order_type': 'str',
        'distribution_channel': 'str',
        'distribution_channel_name': 'str',
        'priority_code': 'int',
        'order_date': 'datetime',
        'entered_by': 'str',
        'order_reason': 'int',
        'customer_order_no': 'str',
        'price_level': 'str',
        'order_create_date': 'datetime',
        'order_modify_date': 'datetime',
        'ship_by': 'datetime',
        'stop_back_orders': 'str',
        'order_source_id': 'int',
        'order_source_name': 'str',
        'integration_partner_id': 'int',
        'integration_partner_name': 'str',
        'order_load_program_id': 'int',
        'order_load_program_name': 'str',
        'oms_order_no': 'int',
        'oms_customer_id': 'int',
        'ship_to_attention': 'str',
        'ship_to_company': 'str',
        'ship_to_street': 'str',
        'ship_to_street2': 'str',
        'ship_to_street3': 'str',
        'ship_to_city': 'str',
        'ship_to_state': 'str',
        'ship_to_zip': 'str',
        'ship_to_country': 'str',
        'ship_to_phone': 'str',
        'ship_to_email': 'str',
        'bill_to_attention': 'str',
        'bill_to_company': 'str',
        'bill_to_street': 'str',
        'bill_to_street2': 'str',
        'bill_to_street3': 'str',
        'bill_to_city': 'str',
        'bill_to_state': 'str',
        'bill_to_zip': 'str',
        'bill_to_country': 'str',
        'bill_to_phone': 'str',
        'bill_to_email': 'str',
        'order_ship_date': 'datetime',
        'freight': 'float',
        'order_weight_lbs': 'float',
        'order_estimated_weight_lbs': 'float',
        'number_of_pallets': 'int',
        'number_of_line_items': 'int',
        'completion_status': 'str',
        'hold_code': 'str',
        'ship_code': 'str',
        'order_message': 'str',
        'division': 'int',
        'cost_center': 'str',
        'authorized_by': 'str',
        'batch_no': 'str',
        'first_ship_date': 'datetime',
        'last_ship_date': 'datetime',
        'deliver_on_date': 'datetime',
        'customer_po_no': 'str',
        'ship_via': 'str',
        'need_by_date': 'datetime',
        'total': 'float',
        'balance_due': 'float',
        'total_paid': 'float',
        'authorization_amount': 'float',
        'subtotal': 'float',
        'tax_on_freight': 'float',
        'tax': 'float',
        'distribution_charges': 'float',
        'shipping_charge': 'float',
        'total_discount': 'float',
        'parcel_account_id': 'int',
        'third_party_parcel_account_id': 'int',
        'packing_slip_template_id': 'int',
        'gift_message': 'str',
        'branch_sector': 'str',
        'branch_area': 'str',
        'branch_customer_type': 'str',
        'branch_id': 'str',
        'order_code': 'str',
        'lead_package_id': 'str',
        'total_qty': 'int',
        'estimated_number_of_picks': 'int',
        'order_confirmation_email_template_id': 'int',
        'shipment_confirmation_email_template_id': 'int',
        'external_shipping_system_id': 'int',
        'shipping_system_name': 'str',
        'order_invoice_template_id': 'int',
        'price_mode': 'str',
        'warehouse_service_type_id': 'int',
        'warehouse_service_level_id': 'int',
        'sla_date': 'datetime',
        'sla_status': 'str',
        'production_type': 'str',
        'back_order_status': 'str',
        'back_order_release_date': 'datetime',
        'carton_type_id': 'int',
        'carton_abbr': 'str',
        'carton_name': 'str',
        'carton_length': 'float',
        'carton_width': 'float',
        'carton_height': 'float',
        'carton_inner_length': 'float',
        'carton_inner_width': 'float',
        'carton_inner_height': 'float',
        'carton_weight': 'float',
        'predefined_carton_id': 'int',
        'predefined_carton_label': 'str',
        'billing_quantity': 'float',
        'charge_rate': 'float',
        'extended_charge': 'float',
        'custom_fields': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'create_date': 'createDate',
        'modify_date': 'modifyDate',
        'lob_id': 'lobId',
        'order_no': 'orderNo',
        'ship_date': 'shipDate',
        'delivered_date': 'deliveredDate',
        'tracking_no': 'trackingNo',
        'warehouse_id': 'warehouseId',
        'warehouse_name': 'warehouseName',
        'carton_no': 'cartonNo',
        'number_of_cartons': 'numberOfCartons',
        'status': 'status',
        'shipped': 'shipped',
        'carrier_service_id': 'carrierServiceId',
        'dim1_in': 'dim1In',
        'dim2_in': 'dim2In',
        'dim3_in': 'dim3In',
        'estimated_zone': 'estimatedZone',
        'parcel_account_no': 'parcelAccountNo',
        'third_party_parcel_account_no': 'thirdPartyParcelAccountNo',
        'manifest_id': 'manifestId',
        'residential': 'residential',
        'billing_option': 'billingOption',
        'weight_lbs': 'weightLbs',
        'dim_weight': 'dimWeight',
        'license_plate_number': 'licensePlateNumber',
        'charged_freight_amount': 'chargedFreightAmount',
        'published_freight_amount': 'publishedFreightAmount',
        'retail_freight_amount': 'retailFreightAmount',
        'carton_create_date': 'cartonCreateDate',
        'carton_modify_date': 'cartonModifyDate',
        'alternate_usage': 'alternateUsage',
        'group_order_id': 'groupOrderId',
        'order_status': 'orderStatus',
        'order_status_name': 'orderStatusName',
        'fulfillment_process_id': 'fulfillmentProcessId',
        'carrier_id': 'carrierId',
        'carrier_name': 'carrierName',
        'media_code': 'mediaCode',
        'legacy_restriction_type': 'legacyRestrictionType',
        'req_type_name': 'reqTypeName',
        'legacy_service_type': 'legacyServiceType',
        'legacy_service_type_name': 'legacyServiceTypeName',
        'alcohol_order_type': 'alcoholOrderType',
        'distribution_channel': 'distributionChannel',
        'distribution_channel_name': 'distributionChannelName',
        'priority_code': 'priorityCode',
        'order_date': 'orderDate',
        'entered_by': 'enteredBy',
        'order_reason': 'orderReason',
        'customer_order_no': 'customerOrderNo',
        'price_level': 'priceLevel',
        'order_create_date': 'orderCreateDate',
        'order_modify_date': 'orderModifyDate',
        'ship_by': 'shipBy',
        'stop_back_orders': 'stopBackOrders',
        'order_source_id': 'orderSourceId',
        'order_source_name': 'orderSourceName',
        'integration_partner_id': 'integrationPartnerId',
        'integration_partner_name': 'integrationPartnerName',
        'order_load_program_id': 'orderLoadProgramId',
        'order_load_program_name': 'orderLoadProgramName',
        'oms_order_no': 'omsOrderNo',
        'oms_customer_id': 'omsCustomerId',
        'ship_to_attention': 'shipToAttention',
        'ship_to_company': 'shipToCompany',
        'ship_to_street': 'shipToStreet',
        'ship_to_street2': 'shipToStreet2',
        'ship_to_street3': 'shipToStreet3',
        'ship_to_city': 'shipToCity',
        'ship_to_state': 'shipToState',
        'ship_to_zip': 'shipToZip',
        'ship_to_country': 'shipToCountry',
        'ship_to_phone': 'shipToPhone',
        'ship_to_email': 'shipToEmail',
        'bill_to_attention': 'billToAttention',
        'bill_to_company': 'billToCompany',
        'bill_to_street': 'billToStreet',
        'bill_to_street2': 'billToStreet2',
        'bill_to_street3': 'billToStreet3',
        'bill_to_city': 'billToCity',
        'bill_to_state': 'billToState',
        'bill_to_zip': 'billToZip',
        'bill_to_country': 'billToCountry',
        'bill_to_phone': 'billToPhone',
        'bill_to_email': 'billToEmail',
        'order_ship_date': 'orderShipDate',
        'freight': 'freight',
        'order_weight_lbs': 'orderWeightLbs',
        'order_estimated_weight_lbs': 'orderEstimatedWeightLbs',
        'number_of_pallets': 'numberOfPallets',
        'number_of_line_items': 'numberOfLineItems',
        'completion_status': 'completionStatus',
        'hold_code': 'holdCode',
        'ship_code': 'shipCode',
        'order_message': 'orderMessage',
        'division': 'division',
        'cost_center': 'costCenter',
        'authorized_by': 'authorizedBy',
        'batch_no': 'batchNo',
        'first_ship_date': 'firstShipDate',
        'last_ship_date': 'lastShipDate',
        'deliver_on_date': 'deliverOnDate',
        'customer_po_no': 'customerPONo',
        'ship_via': 'shipVia',
        'need_by_date': 'needByDate',
        'total': 'total',
        'balance_due': 'balanceDue',
        'total_paid': 'totalPaid',
        'authorization_amount': 'authorizationAmount',
        'subtotal': 'subtotal',
        'tax_on_freight': 'taxOnFreight',
        'tax': 'tax',
        'distribution_charges': 'distributionCharges',
        'shipping_charge': 'shippingCharge',
        'total_discount': 'totalDiscount',
        'parcel_account_id': 'parcelAccountId',
        'third_party_parcel_account_id': 'thirdPartyParcelAccountId',
        'packing_slip_template_id': 'packingSlipTemplateId',
        'gift_message': 'giftMessage',
        'branch_sector': 'branchSector',
        'branch_area': 'branchArea',
        'branch_customer_type': 'branchCustomerType',
        'branch_id': 'branchId',
        'order_code': 'orderCode',
        'lead_package_id': 'leadPackageId',
        'total_qty': 'totalQty',
        'estimated_number_of_picks': 'estimatedNumberOfPicks',
        'order_confirmation_email_template_id': 'orderConfirmationEmailTemplateId',
        'shipment_confirmation_email_template_id': 'shipmentConfirmationEmailTemplateId',
        'external_shipping_system_id': 'externalShippingSystemId',
        'shipping_system_name': 'shippingSystemName',
        'order_invoice_template_id': 'orderInvoiceTemplateId',
        'price_mode': 'priceMode',
        'warehouse_service_type_id': 'warehouseServiceTypeId',
        'warehouse_service_level_id': 'warehouseServiceLevelId',
        'sla_date': 'slaDate',
        'sla_status': 'slaStatus',
        'production_type': 'productionType',
        'back_order_status': 'backOrderStatus',
        'back_order_release_date': 'backOrderReleaseDate',
        'carton_type_id': 'cartonTypeId',
        'carton_abbr': 'cartonAbbr',
        'carton_name': 'cartonName',
        'carton_length': 'cartonLength',
        'carton_width': 'cartonWidth',
        'carton_height': 'cartonHeight',
        'carton_inner_length': 'cartonInnerLength',
        'carton_inner_width': 'cartonInnerWidth',
        'carton_inner_height': 'cartonInnerHeight',
        'carton_weight': 'cartonWeight',
        'predefined_carton_id': 'predefinedCartonId',
        'predefined_carton_label': 'predefinedCartonLabel',
        'billing_quantity': 'billingQuantity',
        'charge_rate': 'chargeRate',
        'extended_charge': 'extendedCharge',
        'custom_fields': 'customFields'
    }

    def __init__(self, id=None, create_date=None, modify_date=None, lob_id=None, order_no=None, ship_date=None, delivered_date=None, tracking_no=None, warehouse_id=None, warehouse_name=None, carton_no=None, number_of_cartons=None, status=None, shipped=False, carrier_service_id=None, dim1_in=None, dim2_in=None, dim3_in=None, estimated_zone=None, parcel_account_no=None, third_party_parcel_account_no=None, manifest_id=None, residential=False, billing_option=None, weight_lbs=None, dim_weight=None, license_plate_number=None, charged_freight_amount=None, published_freight_amount=None, retail_freight_amount=None, carton_create_date=None, carton_modify_date=None, alternate_usage=None, group_order_id=None, order_status=None, order_status_name=None, fulfillment_process_id=None, carrier_id=None, carrier_name=None, media_code=None, legacy_restriction_type=None, req_type_name=None, legacy_service_type=None, legacy_service_type_name=None, alcohol_order_type=None, distribution_channel=None, distribution_channel_name=None, priority_code=None, order_date=None, entered_by=None, order_reason=None, customer_order_no=None, price_level=None, order_create_date=None, order_modify_date=None, ship_by=None, stop_back_orders=None, order_source_id=None, order_source_name=None, integration_partner_id=None, integration_partner_name=None, order_load_program_id=None, order_load_program_name=None, oms_order_no=None, oms_customer_id=None, ship_to_attention=None, ship_to_company=None, ship_to_street=None, ship_to_street2=None, ship_to_street3=None, ship_to_city=None, ship_to_state=None, ship_to_zip=None, ship_to_country=None, ship_to_phone=None, ship_to_email=None, bill_to_attention=None, bill_to_company=None, bill_to_street=None, bill_to_street2=None, bill_to_street3=None, bill_to_city=None, bill_to_state=None, bill_to_zip=None, bill_to_country=None, bill_to_phone=None, bill_to_email=None, order_ship_date=None, freight=None, order_weight_lbs=None, order_estimated_weight_lbs=None, number_of_pallets=None, number_of_line_items=None, completion_status=None, hold_code=None, ship_code=None, order_message=None, division=None, cost_center=None, authorized_by=None, batch_no=None, first_ship_date=None, last_ship_date=None, deliver_on_date=None, customer_po_no=None, ship_via=None, need_by_date=None, total=None, balance_due=None, total_paid=None, authorization_amount=None, subtotal=None, tax_on_freight=None, tax=None, distribution_charges=None, shipping_charge=None, total_discount=None, parcel_account_id=None, third_party_parcel_account_id=None, packing_slip_template_id=None, gift_message=None, branch_sector=None, branch_area=None, branch_customer_type=None, branch_id=None, order_code=None, lead_package_id=None, total_qty=None, estimated_number_of_picks=None, order_confirmation_email_template_id=None, shipment_confirmation_email_template_id=None, external_shipping_system_id=None, shipping_system_name=None, order_invoice_template_id=None, price_mode=None, warehouse_service_type_id=None, warehouse_service_level_id=None, sla_date=None, sla_status=None, production_type=None, back_order_status=None, back_order_release_date=None, carton_type_id=None, carton_abbr=None, carton_name=None, carton_length=None, carton_width=None, carton_height=None, carton_inner_length=None, carton_inner_width=None, carton_inner_height=None, carton_weight=None, predefined_carton_id=None, predefined_carton_label=None, billing_quantity=None, charge_rate=None, extended_charge=None, custom_fields=None):  # noqa: E501
        """CartonActivity - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._create_date = None
        self._modify_date = None
        self._lob_id = None
        self._order_no = None
        self._ship_date = None
        self._delivered_date = None
        self._tracking_no = None
        self._warehouse_id = None
        self._warehouse_name = None
        self._carton_no = None
        self._number_of_cartons = None
        self._status = None
        self._shipped = None
        self._carrier_service_id = None
        self._dim1_in = None
        self._dim2_in = None
        self._dim3_in = None
        self._estimated_zone = None
        self._parcel_account_no = None
        self._third_party_parcel_account_no = None
        self._manifest_id = None
        self._residential = None
        self._billing_option = None
        self._weight_lbs = None
        self._dim_weight = None
        self._license_plate_number = None
        self._charged_freight_amount = None
        self._published_freight_amount = None
        self._retail_freight_amount = None
        self._carton_create_date = None
        self._carton_modify_date = None
        self._alternate_usage = None
        self._group_order_id = None
        self._order_status = None
        self._order_status_name = None
        self._fulfillment_process_id = None
        self._carrier_id = None
        self._carrier_name = None
        self._media_code = None
        self._legacy_restriction_type = None
        self._req_type_name = None
        self._legacy_service_type = None
        self._legacy_service_type_name = None
        self._alcohol_order_type = None
        self._distribution_channel = None
        self._distribution_channel_name = None
        self._priority_code = None
        self._order_date = None
        self._entered_by = None
        self._order_reason = None
        self._customer_order_no = None
        self._price_level = None
        self._order_create_date = None
        self._order_modify_date = None
        self._ship_by = None
        self._stop_back_orders = None
        self._order_source_id = None
        self._order_source_name = None
        self._integration_partner_id = None
        self._integration_partner_name = None
        self._order_load_program_id = None
        self._order_load_program_name = None
        self._oms_order_no = None
        self._oms_customer_id = None
        self._ship_to_attention = None
        self._ship_to_company = None
        self._ship_to_street = None
        self._ship_to_street2 = None
        self._ship_to_street3 = None
        self._ship_to_city = None
        self._ship_to_state = None
        self._ship_to_zip = None
        self._ship_to_country = None
        self._ship_to_phone = None
        self._ship_to_email = None
        self._bill_to_attention = None
        self._bill_to_company = None
        self._bill_to_street = None
        self._bill_to_street2 = None
        self._bill_to_street3 = None
        self._bill_to_city = None
        self._bill_to_state = None
        self._bill_to_zip = None
        self._bill_to_country = None
        self._bill_to_phone = None
        self._bill_to_email = None
        self._order_ship_date = None
        self._freight = None
        self._order_weight_lbs = None
        self._order_estimated_weight_lbs = None
        self._number_of_pallets = None
        self._number_of_line_items = None
        self._completion_status = None
        self._hold_code = None
        self._ship_code = None
        self._order_message = None
        self._division = None
        self._cost_center = None
        self._authorized_by = None
        self._batch_no = None
        self._first_ship_date = None
        self._last_ship_date = None
        self._deliver_on_date = None
        self._customer_po_no = None
        self._ship_via = None
        self._need_by_date = None
        self._total = None
        self._balance_due = None
        self._total_paid = None
        self._authorization_amount = None
        self._subtotal = None
        self._tax_on_freight = None
        self._tax = None
        self._distribution_charges = None
        self._shipping_charge = None
        self._total_discount = None
        self._parcel_account_id = None
        self._third_party_parcel_account_id = None
        self._packing_slip_template_id = None
        self._gift_message = None
        self._branch_sector = None
        self._branch_area = None
        self._branch_customer_type = None
        self._branch_id = None
        self._order_code = None
        self._lead_package_id = None
        self._total_qty = None
        self._estimated_number_of_picks = None
        self._order_confirmation_email_template_id = None
        self._shipment_confirmation_email_template_id = None
        self._external_shipping_system_id = None
        self._shipping_system_name = None
        self._order_invoice_template_id = None
        self._price_mode = None
        self._warehouse_service_type_id = None
        self._warehouse_service_level_id = None
        self._sla_date = None
        self._sla_status = None
        self._production_type = None
        self._back_order_status = None
        self._back_order_release_date = None
        self._carton_type_id = None
        self._carton_abbr = None
        self._carton_name = None
        self._carton_length = None
        self._carton_width = None
        self._carton_height = None
        self._carton_inner_length = None
        self._carton_inner_width = None
        self._carton_inner_height = None
        self._carton_weight = None
        self._predefined_carton_id = None
        self._predefined_carton_label = None
        self._billing_quantity = None
        self._charge_rate = None
        self._extended_charge = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if create_date is not None:
            self.create_date = create_date
        if modify_date is not None:
            self.modify_date = modify_date
        self.lob_id = lob_id
        if order_no is not None:
            self.order_no = order_no
        if ship_date is not None:
            self.ship_date = ship_date
        if delivered_date is not None:
            self.delivered_date = delivered_date
        if tracking_no is not None:
            self.tracking_no = tracking_no
        self.warehouse_id = warehouse_id
        if warehouse_name is not None:
            self.warehouse_name = warehouse_name
        if carton_no is not None:
            self.carton_no = carton_no
        if number_of_cartons is not None:
            self.number_of_cartons = number_of_cartons
        if status is not None:
            self.status = status
        if shipped is not None:
            self.shipped = shipped
        if carrier_service_id is not None:
            self.carrier_service_id = carrier_service_id
        if dim1_in is not None:
            self.dim1_in = dim1_in
        if dim2_in is not None:
            self.dim2_in = dim2_in
        if dim3_in is not None:
            self.dim3_in = dim3_in
        if estimated_zone is not None:
            self.estimated_zone = estimated_zone
        if parcel_account_no is not None:
            self.parcel_account_no = parcel_account_no
        if third_party_parcel_account_no is not None:
            self.third_party_parcel_account_no = third_party_parcel_account_no
        if manifest_id is not None:
            self.manifest_id = manifest_id
        if residential is not None:
            self.residential = residential
        if billing_option is not None:
            self.billing_option = billing_option
        if weight_lbs is not None:
            self.weight_lbs = weight_lbs
        if dim_weight is not None:
            self.dim_weight = dim_weight
        if license_plate_number is not None:
            self.license_plate_number = license_plate_number
        if charged_freight_amount is not None:
            self.charged_freight_amount = charged_freight_amount
        if published_freight_amount is not None:
            self.published_freight_amount = published_freight_amount
        if retail_freight_amount is not None:
            self.retail_freight_amount = retail_freight_amount
        if carton_create_date is not None:
            self.carton_create_date = carton_create_date
        if carton_modify_date is not None:
            self.carton_modify_date = carton_modify_date
        if alternate_usage is not None:
            self.alternate_usage = alternate_usage
        if group_order_id is not None:
            self.group_order_id = group_order_id
        if order_status is not None:
            self.order_status = order_status
        if order_status_name is not None:
            self.order_status_name = order_status_name
        if fulfillment_process_id is not None:
            self.fulfillment_process_id = fulfillment_process_id
        if carrier_id is not None:
            self.carrier_id = carrier_id
        if carrier_name is not None:
            self.carrier_name = carrier_name
        self.media_code = media_code
        self.legacy_restriction_type = legacy_restriction_type
        if req_type_name is not None:
            self.req_type_name = req_type_name
        if legacy_service_type is not None:
            self.legacy_service_type = legacy_service_type
        if legacy_service_type_name is not None:
            self.legacy_service_type_name = legacy_service_type_name
        if alcohol_order_type is not None:
            self.alcohol_order_type = alcohol_order_type
        if distribution_channel is not None:
            self.distribution_channel = distribution_channel
        if distribution_channel_name is not None:
            self.distribution_channel_name = distribution_channel_name
        if priority_code is not None:
            self.priority_code = priority_code
        self.order_date = order_date
        if entered_by is not None:
            self.entered_by = entered_by
        if order_reason is not None:
            self.order_reason = order_reason
        if customer_order_no is not None:
            self.customer_order_no = customer_order_no
        if price_level is not None:
            self.price_level = price_level
        if order_create_date is not None:
            self.order_create_date = order_create_date
        if order_modify_date is not None:
            self.order_modify_date = order_modify_date
        if ship_by is not None:
            self.ship_by = ship_by
        if stop_back_orders is not None:
            self.stop_back_orders = stop_back_orders
        if order_source_id is not None:
            self.order_source_id = order_source_id
        if order_source_name is not None:
            self.order_source_name = order_source_name
        if integration_partner_id is not None:
            self.integration_partner_id = integration_partner_id
        if integration_partner_name is not None:
            self.integration_partner_name = integration_partner_name
        if order_load_program_id is not None:
            self.order_load_program_id = order_load_program_id
        if order_load_program_name is not None:
            self.order_load_program_name = order_load_program_name
        if oms_order_no is not None:
            self.oms_order_no = oms_order_no
        if oms_customer_id is not None:
            self.oms_customer_id = oms_customer_id
        if ship_to_attention is not None:
            self.ship_to_attention = ship_to_attention
        if ship_to_company is not None:
            self.ship_to_company = ship_to_company
        if ship_to_street is not None:
            self.ship_to_street = ship_to_street
        if ship_to_street2 is not None:
            self.ship_to_street2 = ship_to_street2
        if ship_to_street3 is not None:
            self.ship_to_street3 = ship_to_street3
        if ship_to_city is not None:
            self.ship_to_city = ship_to_city
        if ship_to_state is not None:
            self.ship_to_state = ship_to_state
        if ship_to_zip is not None:
            self.ship_to_zip = ship_to_zip
        if ship_to_country is not None:
            self.ship_to_country = ship_to_country
        if ship_to_phone is not None:
            self.ship_to_phone = ship_to_phone
        if ship_to_email is not None:
            self.ship_to_email = ship_to_email
        if bill_to_attention is not None:
            self.bill_to_attention = bill_to_attention
        if bill_to_company is not None:
            self.bill_to_company = bill_to_company
        if bill_to_street is not None:
            self.bill_to_street = bill_to_street
        if bill_to_street2 is not None:
            self.bill_to_street2 = bill_to_street2
        if bill_to_street3 is not None:
            self.bill_to_street3 = bill_to_street3
        if bill_to_city is not None:
            self.bill_to_city = bill_to_city
        if bill_to_state is not None:
            self.bill_to_state = bill_to_state
        if bill_to_zip is not None:
            self.bill_to_zip = bill_to_zip
        if bill_to_country is not None:
            self.bill_to_country = bill_to_country
        if bill_to_phone is not None:
            self.bill_to_phone = bill_to_phone
        if bill_to_email is not None:
            self.bill_to_email = bill_to_email
        if order_ship_date is not None:
            self.order_ship_date = order_ship_date
        if freight is not None:
            self.freight = freight
        if order_weight_lbs is not None:
            self.order_weight_lbs = order_weight_lbs
        if order_estimated_weight_lbs is not None:
            self.order_estimated_weight_lbs = order_estimated_weight_lbs
        if number_of_pallets is not None:
            self.number_of_pallets = number_of_pallets
        if number_of_line_items is not None:
            self.number_of_line_items = number_of_line_items
        if completion_status is not None:
            self.completion_status = completion_status
        if hold_code is not None:
            self.hold_code = hold_code
        if ship_code is not None:
            self.ship_code = ship_code
        if order_message is not None:
            self.order_message = order_message
        if division is not None:
            self.division = division
        if cost_center is not None:
            self.cost_center = cost_center
        if authorized_by is not None:
            self.authorized_by = authorized_by
        if batch_no is not None:
            self.batch_no = batch_no
        if first_ship_date is not None:
            self.first_ship_date = first_ship_date
        if last_ship_date is not None:
            self.last_ship_date = last_ship_date
        if deliver_on_date is not None:
            self.deliver_on_date = deliver_on_date
        if customer_po_no is not None:
            self.customer_po_no = customer_po_no
        if ship_via is not None:
            self.ship_via = ship_via
        if need_by_date is not None:
            self.need_by_date = need_by_date
        if total is not None:
            self.total = total
        if balance_due is not None:
            self.balance_due = balance_due
        if total_paid is not None:
            self.total_paid = total_paid
        if authorization_amount is not None:
            self.authorization_amount = authorization_amount
        if subtotal is not None:
            self.subtotal = subtotal
        if tax_on_freight is not None:
            self.tax_on_freight = tax_on_freight
        if tax is not None:
            self.tax = tax
        if distribution_charges is not None:
            self.distribution_charges = distribution_charges
        if shipping_charge is not None:
            self.shipping_charge = shipping_charge
        if total_discount is not None:
            self.total_discount = total_discount
        if parcel_account_id is not None:
            self.parcel_account_id = parcel_account_id
        if third_party_parcel_account_id is not None:
            self.third_party_parcel_account_id = third_party_parcel_account_id
        if packing_slip_template_id is not None:
            self.packing_slip_template_id = packing_slip_template_id
        if gift_message is not None:
            self.gift_message = gift_message
        if branch_sector is not None:
            self.branch_sector = branch_sector
        if branch_area is not None:
            self.branch_area = branch_area
        if branch_customer_type is not None:
            self.branch_customer_type = branch_customer_type
        if branch_id is not None:
            self.branch_id = branch_id
        if order_code is not None:
            self.order_code = order_code
        if lead_package_id is not None:
            self.lead_package_id = lead_package_id
        if total_qty is not None:
            self.total_qty = total_qty
        if estimated_number_of_picks is not None:
            self.estimated_number_of_picks = estimated_number_of_picks
        if order_confirmation_email_template_id is not None:
            self.order_confirmation_email_template_id = order_confirmation_email_template_id
        if shipment_confirmation_email_template_id is not None:
            self.shipment_confirmation_email_template_id = shipment_confirmation_email_template_id
        if external_shipping_system_id is not None:
            self.external_shipping_system_id = external_shipping_system_id
        if shipping_system_name is not None:
            self.shipping_system_name = shipping_system_name
        if order_invoice_template_id is not None:
            self.order_invoice_template_id = order_invoice_template_id
        if price_mode is not None:
            self.price_mode = price_mode
        if warehouse_service_type_id is not None:
            self.warehouse_service_type_id = warehouse_service_type_id
        if warehouse_service_level_id is not None:
            self.warehouse_service_level_id = warehouse_service_level_id
        if sla_date is not None:
            self.sla_date = sla_date
        if sla_status is not None:
            self.sla_status = sla_status
        if production_type is not None:
            self.production_type = production_type
        if back_order_status is not None:
            self.back_order_status = back_order_status
        if back_order_release_date is not None:
            self.back_order_release_date = back_order_release_date
        if carton_type_id is not None:
            self.carton_type_id = carton_type_id
        if carton_abbr is not None:
            self.carton_abbr = carton_abbr
        if carton_name is not None:
            self.carton_name = carton_name
        if carton_length is not None:
            self.carton_length = carton_length
        if carton_width is not None:
            self.carton_width = carton_width
        if carton_height is not None:
            self.carton_height = carton_height
        if carton_inner_length is not None:
            self.carton_inner_length = carton_inner_length
        if carton_inner_width is not None:
            self.carton_inner_width = carton_inner_width
        if carton_inner_height is not None:
            self.carton_inner_height = carton_inner_height
        if carton_weight is not None:
            self.carton_weight = carton_weight
        if predefined_carton_id is not None:
            self.predefined_carton_id = predefined_carton_id
        if predefined_carton_label is not None:
            self.predefined_carton_label = predefined_carton_label
        if billing_quantity is not None:
            self.billing_quantity = billing_quantity
        if charge_rate is not None:
            self.charge_rate = charge_rate
        if extended_charge is not None:
            self.extended_charge = extended_charge
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this CartonActivity.  # noqa: E501


        :return: The id of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CartonActivity.


        :param id: The id of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def create_date(self):
        """Gets the create_date of this CartonActivity.  # noqa: E501


        :return: The create_date of this CartonActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this CartonActivity.


        :param create_date: The create_date of this CartonActivity.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def modify_date(self):
        """Gets the modify_date of this CartonActivity.  # noqa: E501


        :return: The modify_date of this CartonActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """Sets the modify_date of this CartonActivity.


        :param modify_date: The modify_date of this CartonActivity.  # noqa: E501
        :type: datetime
        """

        self._modify_date = modify_date

    @property
    def lob_id(self):
        """Gets the lob_id of this CartonActivity.  # noqa: E501


        :return: The lob_id of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """Sets the lob_id of this CartonActivity.


        :param lob_id: The lob_id of this CartonActivity.  # noqa: E501
        :type: int
        """
        if lob_id is None:
            raise ValueError("Invalid value for `lob_id`, must not be `None`")  # noqa: E501

        self._lob_id = lob_id

    @property
    def order_no(self):
        """Gets the order_no of this CartonActivity.  # noqa: E501


        :return: The order_no of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._order_no

    @order_no.setter
    def order_no(self, order_no):
        """Sets the order_no of this CartonActivity.


        :param order_no: The order_no of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._order_no = order_no

    @property
    def ship_date(self):
        """Gets the ship_date of this CartonActivity.  # noqa: E501


        :return: The ship_date of this CartonActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._ship_date

    @ship_date.setter
    def ship_date(self, ship_date):
        """Sets the ship_date of this CartonActivity.


        :param ship_date: The ship_date of this CartonActivity.  # noqa: E501
        :type: datetime
        """

        self._ship_date = ship_date

    @property
    def delivered_date(self):
        """Gets the delivered_date of this CartonActivity.  # noqa: E501


        :return: The delivered_date of this CartonActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._delivered_date

    @delivered_date.setter
    def delivered_date(self, delivered_date):
        """Sets the delivered_date of this CartonActivity.


        :param delivered_date: The delivered_date of this CartonActivity.  # noqa: E501
        :type: datetime
        """

        self._delivered_date = delivered_date

    @property
    def tracking_no(self):
        """Gets the tracking_no of this CartonActivity.  # noqa: E501


        :return: The tracking_no of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._tracking_no

    @tracking_no.setter
    def tracking_no(self, tracking_no):
        """Sets the tracking_no of this CartonActivity.


        :param tracking_no: The tracking_no of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._tracking_no = tracking_no

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this CartonActivity.  # noqa: E501


        :return: The warehouse_id of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this CartonActivity.


        :param warehouse_id: The warehouse_id of this CartonActivity.  # noqa: E501
        :type: int
        """
        if warehouse_id is None:
            raise ValueError("Invalid value for `warehouse_id`, must not be `None`")  # noqa: E501

        self._warehouse_id = warehouse_id

    @property
    def warehouse_name(self):
        """Gets the warehouse_name of this CartonActivity.  # noqa: E501


        :return: The warehouse_name of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_name

    @warehouse_name.setter
    def warehouse_name(self, warehouse_name):
        """Sets the warehouse_name of this CartonActivity.


        :param warehouse_name: The warehouse_name of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._warehouse_name = warehouse_name

    @property
    def carton_no(self):
        """Gets the carton_no of this CartonActivity.  # noqa: E501


        :return: The carton_no of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._carton_no

    @carton_no.setter
    def carton_no(self, carton_no):
        """Sets the carton_no of this CartonActivity.


        :param carton_no: The carton_no of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._carton_no = carton_no

    @property
    def number_of_cartons(self):
        """Gets the number_of_cartons of this CartonActivity.  # noqa: E501


        :return: The number_of_cartons of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._number_of_cartons

    @number_of_cartons.setter
    def number_of_cartons(self, number_of_cartons):
        """Sets the number_of_cartons of this CartonActivity.


        :param number_of_cartons: The number_of_cartons of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._number_of_cartons = number_of_cartons

    @property
    def status(self):
        """Gets the status of this CartonActivity.  # noqa: E501


        :return: The status of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CartonActivity.


        :param status: The status of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def shipped(self):
        """Gets the shipped of this CartonActivity.  # noqa: E501


        :return: The shipped of this CartonActivity.  # noqa: E501
        :rtype: bool
        """
        return self._shipped

    @shipped.setter
    def shipped(self, shipped):
        """Sets the shipped of this CartonActivity.


        :param shipped: The shipped of this CartonActivity.  # noqa: E501
        :type: bool
        """

        self._shipped = shipped

    @property
    def carrier_service_id(self):
        """Gets the carrier_service_id of this CartonActivity.  # noqa: E501


        :return: The carrier_service_id of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._carrier_service_id

    @carrier_service_id.setter
    def carrier_service_id(self, carrier_service_id):
        """Sets the carrier_service_id of this CartonActivity.


        :param carrier_service_id: The carrier_service_id of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._carrier_service_id = carrier_service_id

    @property
    def dim1_in(self):
        """Gets the dim1_in of this CartonActivity.  # noqa: E501


        :return: The dim1_in of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._dim1_in

    @dim1_in.setter
    def dim1_in(self, dim1_in):
        """Sets the dim1_in of this CartonActivity.


        :param dim1_in: The dim1_in of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._dim1_in = dim1_in

    @property
    def dim2_in(self):
        """Gets the dim2_in of this CartonActivity.  # noqa: E501


        :return: The dim2_in of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._dim2_in

    @dim2_in.setter
    def dim2_in(self, dim2_in):
        """Sets the dim2_in of this CartonActivity.


        :param dim2_in: The dim2_in of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._dim2_in = dim2_in

    @property
    def dim3_in(self):
        """Gets the dim3_in of this CartonActivity.  # noqa: E501


        :return: The dim3_in of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._dim3_in

    @dim3_in.setter
    def dim3_in(self, dim3_in):
        """Sets the dim3_in of this CartonActivity.


        :param dim3_in: The dim3_in of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._dim3_in = dim3_in

    @property
    def estimated_zone(self):
        """Gets the estimated_zone of this CartonActivity.  # noqa: E501


        :return: The estimated_zone of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._estimated_zone

    @estimated_zone.setter
    def estimated_zone(self, estimated_zone):
        """Sets the estimated_zone of this CartonActivity.


        :param estimated_zone: The estimated_zone of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._estimated_zone = estimated_zone

    @property
    def parcel_account_no(self):
        """Gets the parcel_account_no of this CartonActivity.  # noqa: E501


        :return: The parcel_account_no of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._parcel_account_no

    @parcel_account_no.setter
    def parcel_account_no(self, parcel_account_no):
        """Sets the parcel_account_no of this CartonActivity.


        :param parcel_account_no: The parcel_account_no of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._parcel_account_no = parcel_account_no

    @property
    def third_party_parcel_account_no(self):
        """Gets the third_party_parcel_account_no of this CartonActivity.  # noqa: E501


        :return: The third_party_parcel_account_no of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._third_party_parcel_account_no

    @third_party_parcel_account_no.setter
    def third_party_parcel_account_no(self, third_party_parcel_account_no):
        """Sets the third_party_parcel_account_no of this CartonActivity.


        :param third_party_parcel_account_no: The third_party_parcel_account_no of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._third_party_parcel_account_no = third_party_parcel_account_no

    @property
    def manifest_id(self):
        """Gets the manifest_id of this CartonActivity.  # noqa: E501


        :return: The manifest_id of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._manifest_id

    @manifest_id.setter
    def manifest_id(self, manifest_id):
        """Sets the manifest_id of this CartonActivity.


        :param manifest_id: The manifest_id of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._manifest_id = manifest_id

    @property
    def residential(self):
        """Gets the residential of this CartonActivity.  # noqa: E501


        :return: The residential of this CartonActivity.  # noqa: E501
        :rtype: bool
        """
        return self._residential

    @residential.setter
    def residential(self, residential):
        """Sets the residential of this CartonActivity.


        :param residential: The residential of this CartonActivity.  # noqa: E501
        :type: bool
        """

        self._residential = residential

    @property
    def billing_option(self):
        """Gets the billing_option of this CartonActivity.  # noqa: E501


        :return: The billing_option of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._billing_option

    @billing_option.setter
    def billing_option(self, billing_option):
        """Sets the billing_option of this CartonActivity.


        :param billing_option: The billing_option of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._billing_option = billing_option

    @property
    def weight_lbs(self):
        """Gets the weight_lbs of this CartonActivity.  # noqa: E501


        :return: The weight_lbs of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._weight_lbs

    @weight_lbs.setter
    def weight_lbs(self, weight_lbs):
        """Sets the weight_lbs of this CartonActivity.


        :param weight_lbs: The weight_lbs of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._weight_lbs = weight_lbs

    @property
    def dim_weight(self):
        """Gets the dim_weight of this CartonActivity.  # noqa: E501


        :return: The dim_weight of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._dim_weight

    @dim_weight.setter
    def dim_weight(self, dim_weight):
        """Sets the dim_weight of this CartonActivity.


        :param dim_weight: The dim_weight of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._dim_weight = dim_weight

    @property
    def license_plate_number(self):
        """Gets the license_plate_number of this CartonActivity.  # noqa: E501


        :return: The license_plate_number of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._license_plate_number

    @license_plate_number.setter
    def license_plate_number(self, license_plate_number):
        """Sets the license_plate_number of this CartonActivity.


        :param license_plate_number: The license_plate_number of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._license_plate_number = license_plate_number

    @property
    def charged_freight_amount(self):
        """Gets the charged_freight_amount of this CartonActivity.  # noqa: E501


        :return: The charged_freight_amount of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._charged_freight_amount

    @charged_freight_amount.setter
    def charged_freight_amount(self, charged_freight_amount):
        """Sets the charged_freight_amount of this CartonActivity.


        :param charged_freight_amount: The charged_freight_amount of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._charged_freight_amount = charged_freight_amount

    @property
    def published_freight_amount(self):
        """Gets the published_freight_amount of this CartonActivity.  # noqa: E501


        :return: The published_freight_amount of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._published_freight_amount

    @published_freight_amount.setter
    def published_freight_amount(self, published_freight_amount):
        """Sets the published_freight_amount of this CartonActivity.


        :param published_freight_amount: The published_freight_amount of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._published_freight_amount = published_freight_amount

    @property
    def retail_freight_amount(self):
        """Gets the retail_freight_amount of this CartonActivity.  # noqa: E501


        :return: The retail_freight_amount of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._retail_freight_amount

    @retail_freight_amount.setter
    def retail_freight_amount(self, retail_freight_amount):
        """Sets the retail_freight_amount of this CartonActivity.


        :param retail_freight_amount: The retail_freight_amount of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._retail_freight_amount = retail_freight_amount

    @property
    def carton_create_date(self):
        """Gets the carton_create_date of this CartonActivity.  # noqa: E501


        :return: The carton_create_date of this CartonActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._carton_create_date

    @carton_create_date.setter
    def carton_create_date(self, carton_create_date):
        """Sets the carton_create_date of this CartonActivity.


        :param carton_create_date: The carton_create_date of this CartonActivity.  # noqa: E501
        :type: datetime
        """

        self._carton_create_date = carton_create_date

    @property
    def carton_modify_date(self):
        """Gets the carton_modify_date of this CartonActivity.  # noqa: E501


        :return: The carton_modify_date of this CartonActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._carton_modify_date

    @carton_modify_date.setter
    def carton_modify_date(self, carton_modify_date):
        """Sets the carton_modify_date of this CartonActivity.


        :param carton_modify_date: The carton_modify_date of this CartonActivity.  # noqa: E501
        :type: datetime
        """

        self._carton_modify_date = carton_modify_date

    @property
    def alternate_usage(self):
        """Gets the alternate_usage of this CartonActivity.  # noqa: E501


        :return: The alternate_usage of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._alternate_usage

    @alternate_usage.setter
    def alternate_usage(self, alternate_usage):
        """Sets the alternate_usage of this CartonActivity.


        :param alternate_usage: The alternate_usage of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._alternate_usage = alternate_usage

    @property
    def group_order_id(self):
        """Gets the group_order_id of this CartonActivity.  # noqa: E501


        :return: The group_order_id of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._group_order_id

    @group_order_id.setter
    def group_order_id(self, group_order_id):
        """Sets the group_order_id of this CartonActivity.


        :param group_order_id: The group_order_id of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._group_order_id = group_order_id

    @property
    def order_status(self):
        """Gets the order_status of this CartonActivity.  # noqa: E501


        :return: The order_status of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._order_status

    @order_status.setter
    def order_status(self, order_status):
        """Sets the order_status of this CartonActivity.


        :param order_status: The order_status of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._order_status = order_status

    @property
    def order_status_name(self):
        """Gets the order_status_name of this CartonActivity.  # noqa: E501


        :return: The order_status_name of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._order_status_name

    @order_status_name.setter
    def order_status_name(self, order_status_name):
        """Sets the order_status_name of this CartonActivity.


        :param order_status_name: The order_status_name of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._order_status_name = order_status_name

    @property
    def fulfillment_process_id(self):
        """Gets the fulfillment_process_id of this CartonActivity.  # noqa: E501


        :return: The fulfillment_process_id of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._fulfillment_process_id

    @fulfillment_process_id.setter
    def fulfillment_process_id(self, fulfillment_process_id):
        """Sets the fulfillment_process_id of this CartonActivity.


        :param fulfillment_process_id: The fulfillment_process_id of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._fulfillment_process_id = fulfillment_process_id

    @property
    def carrier_id(self):
        """Gets the carrier_id of this CartonActivity.  # noqa: E501


        :return: The carrier_id of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._carrier_id

    @carrier_id.setter
    def carrier_id(self, carrier_id):
        """Sets the carrier_id of this CartonActivity.


        :param carrier_id: The carrier_id of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._carrier_id = carrier_id

    @property
    def carrier_name(self):
        """Gets the carrier_name of this CartonActivity.  # noqa: E501


        :return: The carrier_name of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._carrier_name

    @carrier_name.setter
    def carrier_name(self, carrier_name):
        """Sets the carrier_name of this CartonActivity.


        :param carrier_name: The carrier_name of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._carrier_name = carrier_name

    @property
    def media_code(self):
        """Gets the media_code of this CartonActivity.  # noqa: E501


        :return: The media_code of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._media_code

    @media_code.setter
    def media_code(self, media_code):
        """Sets the media_code of this CartonActivity.


        :param media_code: The media_code of this CartonActivity.  # noqa: E501
        :type: str
        """
        if media_code is None:
            raise ValueError("Invalid value for `media_code`, must not be `None`")  # noqa: E501

        self._media_code = media_code

    @property
    def legacy_restriction_type(self):
        """Gets the legacy_restriction_type of this CartonActivity.  # noqa: E501


        :return: The legacy_restriction_type of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._legacy_restriction_type

    @legacy_restriction_type.setter
    def legacy_restriction_type(self, legacy_restriction_type):
        """Sets the legacy_restriction_type of this CartonActivity.


        :param legacy_restriction_type: The legacy_restriction_type of this CartonActivity.  # noqa: E501
        :type: str
        """
        if legacy_restriction_type is None:
            raise ValueError("Invalid value for `legacy_restriction_type`, must not be `None`")  # noqa: E501

        self._legacy_restriction_type = legacy_restriction_type

    @property
    def req_type_name(self):
        """Gets the req_type_name of this CartonActivity.  # noqa: E501


        :return: The req_type_name of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._req_type_name

    @req_type_name.setter
    def req_type_name(self, req_type_name):
        """Sets the req_type_name of this CartonActivity.


        :param req_type_name: The req_type_name of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._req_type_name = req_type_name

    @property
    def legacy_service_type(self):
        """Gets the legacy_service_type of this CartonActivity.  # noqa: E501


        :return: The legacy_service_type of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._legacy_service_type

    @legacy_service_type.setter
    def legacy_service_type(self, legacy_service_type):
        """Sets the legacy_service_type of this CartonActivity.


        :param legacy_service_type: The legacy_service_type of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._legacy_service_type = legacy_service_type

    @property
    def legacy_service_type_name(self):
        """Gets the legacy_service_type_name of this CartonActivity.  # noqa: E501


        :return: The legacy_service_type_name of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._legacy_service_type_name

    @legacy_service_type_name.setter
    def legacy_service_type_name(self, legacy_service_type_name):
        """Sets the legacy_service_type_name of this CartonActivity.


        :param legacy_service_type_name: The legacy_service_type_name of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._legacy_service_type_name = legacy_service_type_name

    @property
    def alcohol_order_type(self):
        """Gets the alcohol_order_type of this CartonActivity.  # noqa: E501


        :return: The alcohol_order_type of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._alcohol_order_type

    @alcohol_order_type.setter
    def alcohol_order_type(self, alcohol_order_type):
        """Sets the alcohol_order_type of this CartonActivity.


        :param alcohol_order_type: The alcohol_order_type of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._alcohol_order_type = alcohol_order_type

    @property
    def distribution_channel(self):
        """Gets the distribution_channel of this CartonActivity.  # noqa: E501


        :return: The distribution_channel of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._distribution_channel

    @distribution_channel.setter
    def distribution_channel(self, distribution_channel):
        """Sets the distribution_channel of this CartonActivity.


        :param distribution_channel: The distribution_channel of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._distribution_channel = distribution_channel

    @property
    def distribution_channel_name(self):
        """Gets the distribution_channel_name of this CartonActivity.  # noqa: E501


        :return: The distribution_channel_name of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._distribution_channel_name

    @distribution_channel_name.setter
    def distribution_channel_name(self, distribution_channel_name):
        """Sets the distribution_channel_name of this CartonActivity.


        :param distribution_channel_name: The distribution_channel_name of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._distribution_channel_name = distribution_channel_name

    @property
    def priority_code(self):
        """Gets the priority_code of this CartonActivity.  # noqa: E501


        :return: The priority_code of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._priority_code

    @priority_code.setter
    def priority_code(self, priority_code):
        """Sets the priority_code of this CartonActivity.


        :param priority_code: The priority_code of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._priority_code = priority_code

    @property
    def order_date(self):
        """Gets the order_date of this CartonActivity.  # noqa: E501


        :return: The order_date of this CartonActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._order_date

    @order_date.setter
    def order_date(self, order_date):
        """Sets the order_date of this CartonActivity.


        :param order_date: The order_date of this CartonActivity.  # noqa: E501
        :type: datetime
        """
        if order_date is None:
            raise ValueError("Invalid value for `order_date`, must not be `None`")  # noqa: E501

        self._order_date = order_date

    @property
    def entered_by(self):
        """Gets the entered_by of this CartonActivity.  # noqa: E501


        :return: The entered_by of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._entered_by

    @entered_by.setter
    def entered_by(self, entered_by):
        """Sets the entered_by of this CartonActivity.


        :param entered_by: The entered_by of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._entered_by = entered_by

    @property
    def order_reason(self):
        """Gets the order_reason of this CartonActivity.  # noqa: E501


        :return: The order_reason of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._order_reason

    @order_reason.setter
    def order_reason(self, order_reason):
        """Sets the order_reason of this CartonActivity.


        :param order_reason: The order_reason of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._order_reason = order_reason

    @property
    def customer_order_no(self):
        """Gets the customer_order_no of this CartonActivity.  # noqa: E501


        :return: The customer_order_no of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._customer_order_no

    @customer_order_no.setter
    def customer_order_no(self, customer_order_no):
        """Sets the customer_order_no of this CartonActivity.


        :param customer_order_no: The customer_order_no of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._customer_order_no = customer_order_no

    @property
    def price_level(self):
        """Gets the price_level of this CartonActivity.  # noqa: E501


        :return: The price_level of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._price_level

    @price_level.setter
    def price_level(self, price_level):
        """Sets the price_level of this CartonActivity.


        :param price_level: The price_level of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._price_level = price_level

    @property
    def order_create_date(self):
        """Gets the order_create_date of this CartonActivity.  # noqa: E501


        :return: The order_create_date of this CartonActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._order_create_date

    @order_create_date.setter
    def order_create_date(self, order_create_date):
        """Sets the order_create_date of this CartonActivity.


        :param order_create_date: The order_create_date of this CartonActivity.  # noqa: E501
        :type: datetime
        """

        self._order_create_date = order_create_date

    @property
    def order_modify_date(self):
        """Gets the order_modify_date of this CartonActivity.  # noqa: E501


        :return: The order_modify_date of this CartonActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._order_modify_date

    @order_modify_date.setter
    def order_modify_date(self, order_modify_date):
        """Sets the order_modify_date of this CartonActivity.


        :param order_modify_date: The order_modify_date of this CartonActivity.  # noqa: E501
        :type: datetime
        """

        self._order_modify_date = order_modify_date

    @property
    def ship_by(self):
        """Gets the ship_by of this CartonActivity.  # noqa: E501


        :return: The ship_by of this CartonActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._ship_by

    @ship_by.setter
    def ship_by(self, ship_by):
        """Sets the ship_by of this CartonActivity.


        :param ship_by: The ship_by of this CartonActivity.  # noqa: E501
        :type: datetime
        """

        self._ship_by = ship_by

    @property
    def stop_back_orders(self):
        """Gets the stop_back_orders of this CartonActivity.  # noqa: E501


        :return: The stop_back_orders of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._stop_back_orders

    @stop_back_orders.setter
    def stop_back_orders(self, stop_back_orders):
        """Sets the stop_back_orders of this CartonActivity.


        :param stop_back_orders: The stop_back_orders of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._stop_back_orders = stop_back_orders

    @property
    def order_source_id(self):
        """Gets the order_source_id of this CartonActivity.  # noqa: E501


        :return: The order_source_id of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._order_source_id

    @order_source_id.setter
    def order_source_id(self, order_source_id):
        """Sets the order_source_id of this CartonActivity.


        :param order_source_id: The order_source_id of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._order_source_id = order_source_id

    @property
    def order_source_name(self):
        """Gets the order_source_name of this CartonActivity.  # noqa: E501


        :return: The order_source_name of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._order_source_name

    @order_source_name.setter
    def order_source_name(self, order_source_name):
        """Sets the order_source_name of this CartonActivity.


        :param order_source_name: The order_source_name of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._order_source_name = order_source_name

    @property
    def integration_partner_id(self):
        """Gets the integration_partner_id of this CartonActivity.  # noqa: E501


        :return: The integration_partner_id of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._integration_partner_id

    @integration_partner_id.setter
    def integration_partner_id(self, integration_partner_id):
        """Sets the integration_partner_id of this CartonActivity.


        :param integration_partner_id: The integration_partner_id of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._integration_partner_id = integration_partner_id

    @property
    def integration_partner_name(self):
        """Gets the integration_partner_name of this CartonActivity.  # noqa: E501


        :return: The integration_partner_name of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._integration_partner_name

    @integration_partner_name.setter
    def integration_partner_name(self, integration_partner_name):
        """Sets the integration_partner_name of this CartonActivity.


        :param integration_partner_name: The integration_partner_name of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._integration_partner_name = integration_partner_name

    @property
    def order_load_program_id(self):
        """Gets the order_load_program_id of this CartonActivity.  # noqa: E501


        :return: The order_load_program_id of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._order_load_program_id

    @order_load_program_id.setter
    def order_load_program_id(self, order_load_program_id):
        """Sets the order_load_program_id of this CartonActivity.


        :param order_load_program_id: The order_load_program_id of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._order_load_program_id = order_load_program_id

    @property
    def order_load_program_name(self):
        """Gets the order_load_program_name of this CartonActivity.  # noqa: E501


        :return: The order_load_program_name of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._order_load_program_name

    @order_load_program_name.setter
    def order_load_program_name(self, order_load_program_name):
        """Sets the order_load_program_name of this CartonActivity.


        :param order_load_program_name: The order_load_program_name of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._order_load_program_name = order_load_program_name

    @property
    def oms_order_no(self):
        """Gets the oms_order_no of this CartonActivity.  # noqa: E501


        :return: The oms_order_no of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._oms_order_no

    @oms_order_no.setter
    def oms_order_no(self, oms_order_no):
        """Sets the oms_order_no of this CartonActivity.


        :param oms_order_no: The oms_order_no of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._oms_order_no = oms_order_no

    @property
    def oms_customer_id(self):
        """Gets the oms_customer_id of this CartonActivity.  # noqa: E501


        :return: The oms_customer_id of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._oms_customer_id

    @oms_customer_id.setter
    def oms_customer_id(self, oms_customer_id):
        """Sets the oms_customer_id of this CartonActivity.


        :param oms_customer_id: The oms_customer_id of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._oms_customer_id = oms_customer_id

    @property
    def ship_to_attention(self):
        """Gets the ship_to_attention of this CartonActivity.  # noqa: E501


        :return: The ship_to_attention of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._ship_to_attention

    @ship_to_attention.setter
    def ship_to_attention(self, ship_to_attention):
        """Sets the ship_to_attention of this CartonActivity.


        :param ship_to_attention: The ship_to_attention of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._ship_to_attention = ship_to_attention

    @property
    def ship_to_company(self):
        """Gets the ship_to_company of this CartonActivity.  # noqa: E501


        :return: The ship_to_company of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._ship_to_company

    @ship_to_company.setter
    def ship_to_company(self, ship_to_company):
        """Sets the ship_to_company of this CartonActivity.


        :param ship_to_company: The ship_to_company of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._ship_to_company = ship_to_company

    @property
    def ship_to_street(self):
        """Gets the ship_to_street of this CartonActivity.  # noqa: E501


        :return: The ship_to_street of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._ship_to_street

    @ship_to_street.setter
    def ship_to_street(self, ship_to_street):
        """Sets the ship_to_street of this CartonActivity.


        :param ship_to_street: The ship_to_street of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._ship_to_street = ship_to_street

    @property
    def ship_to_street2(self):
        """Gets the ship_to_street2 of this CartonActivity.  # noqa: E501


        :return: The ship_to_street2 of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._ship_to_street2

    @ship_to_street2.setter
    def ship_to_street2(self, ship_to_street2):
        """Sets the ship_to_street2 of this CartonActivity.


        :param ship_to_street2: The ship_to_street2 of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._ship_to_street2 = ship_to_street2

    @property
    def ship_to_street3(self):
        """Gets the ship_to_street3 of this CartonActivity.  # noqa: E501


        :return: The ship_to_street3 of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._ship_to_street3

    @ship_to_street3.setter
    def ship_to_street3(self, ship_to_street3):
        """Sets the ship_to_street3 of this CartonActivity.


        :param ship_to_street3: The ship_to_street3 of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._ship_to_street3 = ship_to_street3

    @property
    def ship_to_city(self):
        """Gets the ship_to_city of this CartonActivity.  # noqa: E501


        :return: The ship_to_city of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._ship_to_city

    @ship_to_city.setter
    def ship_to_city(self, ship_to_city):
        """Sets the ship_to_city of this CartonActivity.


        :param ship_to_city: The ship_to_city of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._ship_to_city = ship_to_city

    @property
    def ship_to_state(self):
        """Gets the ship_to_state of this CartonActivity.  # noqa: E501


        :return: The ship_to_state of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._ship_to_state

    @ship_to_state.setter
    def ship_to_state(self, ship_to_state):
        """Sets the ship_to_state of this CartonActivity.


        :param ship_to_state: The ship_to_state of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._ship_to_state = ship_to_state

    @property
    def ship_to_zip(self):
        """Gets the ship_to_zip of this CartonActivity.  # noqa: E501


        :return: The ship_to_zip of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._ship_to_zip

    @ship_to_zip.setter
    def ship_to_zip(self, ship_to_zip):
        """Sets the ship_to_zip of this CartonActivity.


        :param ship_to_zip: The ship_to_zip of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._ship_to_zip = ship_to_zip

    @property
    def ship_to_country(self):
        """Gets the ship_to_country of this CartonActivity.  # noqa: E501


        :return: The ship_to_country of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._ship_to_country

    @ship_to_country.setter
    def ship_to_country(self, ship_to_country):
        """Sets the ship_to_country of this CartonActivity.


        :param ship_to_country: The ship_to_country of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._ship_to_country = ship_to_country

    @property
    def ship_to_phone(self):
        """Gets the ship_to_phone of this CartonActivity.  # noqa: E501


        :return: The ship_to_phone of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._ship_to_phone

    @ship_to_phone.setter
    def ship_to_phone(self, ship_to_phone):
        """Sets the ship_to_phone of this CartonActivity.


        :param ship_to_phone: The ship_to_phone of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._ship_to_phone = ship_to_phone

    @property
    def ship_to_email(self):
        """Gets the ship_to_email of this CartonActivity.  # noqa: E501


        :return: The ship_to_email of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._ship_to_email

    @ship_to_email.setter
    def ship_to_email(self, ship_to_email):
        """Sets the ship_to_email of this CartonActivity.


        :param ship_to_email: The ship_to_email of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._ship_to_email = ship_to_email

    @property
    def bill_to_attention(self):
        """Gets the bill_to_attention of this CartonActivity.  # noqa: E501


        :return: The bill_to_attention of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._bill_to_attention

    @bill_to_attention.setter
    def bill_to_attention(self, bill_to_attention):
        """Sets the bill_to_attention of this CartonActivity.


        :param bill_to_attention: The bill_to_attention of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._bill_to_attention = bill_to_attention

    @property
    def bill_to_company(self):
        """Gets the bill_to_company of this CartonActivity.  # noqa: E501


        :return: The bill_to_company of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._bill_to_company

    @bill_to_company.setter
    def bill_to_company(self, bill_to_company):
        """Sets the bill_to_company of this CartonActivity.


        :param bill_to_company: The bill_to_company of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._bill_to_company = bill_to_company

    @property
    def bill_to_street(self):
        """Gets the bill_to_street of this CartonActivity.  # noqa: E501


        :return: The bill_to_street of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._bill_to_street

    @bill_to_street.setter
    def bill_to_street(self, bill_to_street):
        """Sets the bill_to_street of this CartonActivity.


        :param bill_to_street: The bill_to_street of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._bill_to_street = bill_to_street

    @property
    def bill_to_street2(self):
        """Gets the bill_to_street2 of this CartonActivity.  # noqa: E501


        :return: The bill_to_street2 of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._bill_to_street2

    @bill_to_street2.setter
    def bill_to_street2(self, bill_to_street2):
        """Sets the bill_to_street2 of this CartonActivity.


        :param bill_to_street2: The bill_to_street2 of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._bill_to_street2 = bill_to_street2

    @property
    def bill_to_street3(self):
        """Gets the bill_to_street3 of this CartonActivity.  # noqa: E501


        :return: The bill_to_street3 of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._bill_to_street3

    @bill_to_street3.setter
    def bill_to_street3(self, bill_to_street3):
        """Sets the bill_to_street3 of this CartonActivity.


        :param bill_to_street3: The bill_to_street3 of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._bill_to_street3 = bill_to_street3

    @property
    def bill_to_city(self):
        """Gets the bill_to_city of this CartonActivity.  # noqa: E501


        :return: The bill_to_city of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._bill_to_city

    @bill_to_city.setter
    def bill_to_city(self, bill_to_city):
        """Sets the bill_to_city of this CartonActivity.


        :param bill_to_city: The bill_to_city of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._bill_to_city = bill_to_city

    @property
    def bill_to_state(self):
        """Gets the bill_to_state of this CartonActivity.  # noqa: E501


        :return: The bill_to_state of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._bill_to_state

    @bill_to_state.setter
    def bill_to_state(self, bill_to_state):
        """Sets the bill_to_state of this CartonActivity.


        :param bill_to_state: The bill_to_state of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._bill_to_state = bill_to_state

    @property
    def bill_to_zip(self):
        """Gets the bill_to_zip of this CartonActivity.  # noqa: E501


        :return: The bill_to_zip of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._bill_to_zip

    @bill_to_zip.setter
    def bill_to_zip(self, bill_to_zip):
        """Sets the bill_to_zip of this CartonActivity.


        :param bill_to_zip: The bill_to_zip of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._bill_to_zip = bill_to_zip

    @property
    def bill_to_country(self):
        """Gets the bill_to_country of this CartonActivity.  # noqa: E501


        :return: The bill_to_country of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._bill_to_country

    @bill_to_country.setter
    def bill_to_country(self, bill_to_country):
        """Sets the bill_to_country of this CartonActivity.


        :param bill_to_country: The bill_to_country of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._bill_to_country = bill_to_country

    @property
    def bill_to_phone(self):
        """Gets the bill_to_phone of this CartonActivity.  # noqa: E501


        :return: The bill_to_phone of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._bill_to_phone

    @bill_to_phone.setter
    def bill_to_phone(self, bill_to_phone):
        """Sets the bill_to_phone of this CartonActivity.


        :param bill_to_phone: The bill_to_phone of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._bill_to_phone = bill_to_phone

    @property
    def bill_to_email(self):
        """Gets the bill_to_email of this CartonActivity.  # noqa: E501


        :return: The bill_to_email of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._bill_to_email

    @bill_to_email.setter
    def bill_to_email(self, bill_to_email):
        """Sets the bill_to_email of this CartonActivity.


        :param bill_to_email: The bill_to_email of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._bill_to_email = bill_to_email

    @property
    def order_ship_date(self):
        """Gets the order_ship_date of this CartonActivity.  # noqa: E501


        :return: The order_ship_date of this CartonActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._order_ship_date

    @order_ship_date.setter
    def order_ship_date(self, order_ship_date):
        """Sets the order_ship_date of this CartonActivity.


        :param order_ship_date: The order_ship_date of this CartonActivity.  # noqa: E501
        :type: datetime
        """

        self._order_ship_date = order_ship_date

    @property
    def freight(self):
        """Gets the freight of this CartonActivity.  # noqa: E501


        :return: The freight of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._freight

    @freight.setter
    def freight(self, freight):
        """Sets the freight of this CartonActivity.


        :param freight: The freight of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._freight = freight

    @property
    def order_weight_lbs(self):
        """Gets the order_weight_lbs of this CartonActivity.  # noqa: E501


        :return: The order_weight_lbs of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._order_weight_lbs

    @order_weight_lbs.setter
    def order_weight_lbs(self, order_weight_lbs):
        """Sets the order_weight_lbs of this CartonActivity.


        :param order_weight_lbs: The order_weight_lbs of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._order_weight_lbs = order_weight_lbs

    @property
    def order_estimated_weight_lbs(self):
        """Gets the order_estimated_weight_lbs of this CartonActivity.  # noqa: E501


        :return: The order_estimated_weight_lbs of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._order_estimated_weight_lbs

    @order_estimated_weight_lbs.setter
    def order_estimated_weight_lbs(self, order_estimated_weight_lbs):
        """Sets the order_estimated_weight_lbs of this CartonActivity.


        :param order_estimated_weight_lbs: The order_estimated_weight_lbs of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._order_estimated_weight_lbs = order_estimated_weight_lbs

    @property
    def number_of_pallets(self):
        """Gets the number_of_pallets of this CartonActivity.  # noqa: E501


        :return: The number_of_pallets of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._number_of_pallets

    @number_of_pallets.setter
    def number_of_pallets(self, number_of_pallets):
        """Sets the number_of_pallets of this CartonActivity.


        :param number_of_pallets: The number_of_pallets of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._number_of_pallets = number_of_pallets

    @property
    def number_of_line_items(self):
        """Gets the number_of_line_items of this CartonActivity.  # noqa: E501


        :return: The number_of_line_items of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._number_of_line_items

    @number_of_line_items.setter
    def number_of_line_items(self, number_of_line_items):
        """Sets the number_of_line_items of this CartonActivity.


        :param number_of_line_items: The number_of_line_items of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._number_of_line_items = number_of_line_items

    @property
    def completion_status(self):
        """Gets the completion_status of this CartonActivity.  # noqa: E501


        :return: The completion_status of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._completion_status

    @completion_status.setter
    def completion_status(self, completion_status):
        """Sets the completion_status of this CartonActivity.


        :param completion_status: The completion_status of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._completion_status = completion_status

    @property
    def hold_code(self):
        """Gets the hold_code of this CartonActivity.  # noqa: E501


        :return: The hold_code of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._hold_code

    @hold_code.setter
    def hold_code(self, hold_code):
        """Sets the hold_code of this CartonActivity.


        :param hold_code: The hold_code of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._hold_code = hold_code

    @property
    def ship_code(self):
        """Gets the ship_code of this CartonActivity.  # noqa: E501


        :return: The ship_code of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._ship_code

    @ship_code.setter
    def ship_code(self, ship_code):
        """Sets the ship_code of this CartonActivity.


        :param ship_code: The ship_code of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._ship_code = ship_code

    @property
    def order_message(self):
        """Gets the order_message of this CartonActivity.  # noqa: E501


        :return: The order_message of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._order_message

    @order_message.setter
    def order_message(self, order_message):
        """Sets the order_message of this CartonActivity.


        :param order_message: The order_message of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._order_message = order_message

    @property
    def division(self):
        """Gets the division of this CartonActivity.  # noqa: E501


        :return: The division of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._division

    @division.setter
    def division(self, division):
        """Sets the division of this CartonActivity.


        :param division: The division of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._division = division

    @property
    def cost_center(self):
        """Gets the cost_center of this CartonActivity.  # noqa: E501


        :return: The cost_center of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._cost_center

    @cost_center.setter
    def cost_center(self, cost_center):
        """Sets the cost_center of this CartonActivity.


        :param cost_center: The cost_center of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._cost_center = cost_center

    @property
    def authorized_by(self):
        """Gets the authorized_by of this CartonActivity.  # noqa: E501


        :return: The authorized_by of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._authorized_by

    @authorized_by.setter
    def authorized_by(self, authorized_by):
        """Sets the authorized_by of this CartonActivity.


        :param authorized_by: The authorized_by of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._authorized_by = authorized_by

    @property
    def batch_no(self):
        """Gets the batch_no of this CartonActivity.  # noqa: E501


        :return: The batch_no of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._batch_no

    @batch_no.setter
    def batch_no(self, batch_no):
        """Sets the batch_no of this CartonActivity.


        :param batch_no: The batch_no of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._batch_no = batch_no

    @property
    def first_ship_date(self):
        """Gets the first_ship_date of this CartonActivity.  # noqa: E501


        :return: The first_ship_date of this CartonActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._first_ship_date

    @first_ship_date.setter
    def first_ship_date(self, first_ship_date):
        """Sets the first_ship_date of this CartonActivity.


        :param first_ship_date: The first_ship_date of this CartonActivity.  # noqa: E501
        :type: datetime
        """

        self._first_ship_date = first_ship_date

    @property
    def last_ship_date(self):
        """Gets the last_ship_date of this CartonActivity.  # noqa: E501


        :return: The last_ship_date of this CartonActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._last_ship_date

    @last_ship_date.setter
    def last_ship_date(self, last_ship_date):
        """Sets the last_ship_date of this CartonActivity.


        :param last_ship_date: The last_ship_date of this CartonActivity.  # noqa: E501
        :type: datetime
        """

        self._last_ship_date = last_ship_date

    @property
    def deliver_on_date(self):
        """Gets the deliver_on_date of this CartonActivity.  # noqa: E501


        :return: The deliver_on_date of this CartonActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._deliver_on_date

    @deliver_on_date.setter
    def deliver_on_date(self, deliver_on_date):
        """Sets the deliver_on_date of this CartonActivity.


        :param deliver_on_date: The deliver_on_date of this CartonActivity.  # noqa: E501
        :type: datetime
        """

        self._deliver_on_date = deliver_on_date

    @property
    def customer_po_no(self):
        """Gets the customer_po_no of this CartonActivity.  # noqa: E501


        :return: The customer_po_no of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._customer_po_no

    @customer_po_no.setter
    def customer_po_no(self, customer_po_no):
        """Sets the customer_po_no of this CartonActivity.


        :param customer_po_no: The customer_po_no of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._customer_po_no = customer_po_no

    @property
    def ship_via(self):
        """Gets the ship_via of this CartonActivity.  # noqa: E501


        :return: The ship_via of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._ship_via

    @ship_via.setter
    def ship_via(self, ship_via):
        """Sets the ship_via of this CartonActivity.


        :param ship_via: The ship_via of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._ship_via = ship_via

    @property
    def need_by_date(self):
        """Gets the need_by_date of this CartonActivity.  # noqa: E501


        :return: The need_by_date of this CartonActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._need_by_date

    @need_by_date.setter
    def need_by_date(self, need_by_date):
        """Sets the need_by_date of this CartonActivity.


        :param need_by_date: The need_by_date of this CartonActivity.  # noqa: E501
        :type: datetime
        """

        self._need_by_date = need_by_date

    @property
    def total(self):
        """Gets the total of this CartonActivity.  # noqa: E501


        :return: The total of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this CartonActivity.


        :param total: The total of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def balance_due(self):
        """Gets the balance_due of this CartonActivity.  # noqa: E501


        :return: The balance_due of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._balance_due

    @balance_due.setter
    def balance_due(self, balance_due):
        """Sets the balance_due of this CartonActivity.


        :param balance_due: The balance_due of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._balance_due = balance_due

    @property
    def total_paid(self):
        """Gets the total_paid of this CartonActivity.  # noqa: E501


        :return: The total_paid of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._total_paid

    @total_paid.setter
    def total_paid(self, total_paid):
        """Sets the total_paid of this CartonActivity.


        :param total_paid: The total_paid of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._total_paid = total_paid

    @property
    def authorization_amount(self):
        """Gets the authorization_amount of this CartonActivity.  # noqa: E501


        :return: The authorization_amount of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._authorization_amount

    @authorization_amount.setter
    def authorization_amount(self, authorization_amount):
        """Sets the authorization_amount of this CartonActivity.


        :param authorization_amount: The authorization_amount of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._authorization_amount = authorization_amount

    @property
    def subtotal(self):
        """Gets the subtotal of this CartonActivity.  # noqa: E501


        :return: The subtotal of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this CartonActivity.


        :param subtotal: The subtotal of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._subtotal = subtotal

    @property
    def tax_on_freight(self):
        """Gets the tax_on_freight of this CartonActivity.  # noqa: E501


        :return: The tax_on_freight of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._tax_on_freight

    @tax_on_freight.setter
    def tax_on_freight(self, tax_on_freight):
        """Sets the tax_on_freight of this CartonActivity.


        :param tax_on_freight: The tax_on_freight of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._tax_on_freight = tax_on_freight

    @property
    def tax(self):
        """Gets the tax of this CartonActivity.  # noqa: E501


        :return: The tax of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this CartonActivity.


        :param tax: The tax of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._tax = tax

    @property
    def distribution_charges(self):
        """Gets the distribution_charges of this CartonActivity.  # noqa: E501


        :return: The distribution_charges of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._distribution_charges

    @distribution_charges.setter
    def distribution_charges(self, distribution_charges):
        """Sets the distribution_charges of this CartonActivity.


        :param distribution_charges: The distribution_charges of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._distribution_charges = distribution_charges

    @property
    def shipping_charge(self):
        """Gets the shipping_charge of this CartonActivity.  # noqa: E501


        :return: The shipping_charge of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._shipping_charge

    @shipping_charge.setter
    def shipping_charge(self, shipping_charge):
        """Sets the shipping_charge of this CartonActivity.


        :param shipping_charge: The shipping_charge of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._shipping_charge = shipping_charge

    @property
    def total_discount(self):
        """Gets the total_discount of this CartonActivity.  # noqa: E501


        :return: The total_discount of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._total_discount

    @total_discount.setter
    def total_discount(self, total_discount):
        """Sets the total_discount of this CartonActivity.


        :param total_discount: The total_discount of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._total_discount = total_discount

    @property
    def parcel_account_id(self):
        """Gets the parcel_account_id of this CartonActivity.  # noqa: E501


        :return: The parcel_account_id of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._parcel_account_id

    @parcel_account_id.setter
    def parcel_account_id(self, parcel_account_id):
        """Sets the parcel_account_id of this CartonActivity.


        :param parcel_account_id: The parcel_account_id of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._parcel_account_id = parcel_account_id

    @property
    def third_party_parcel_account_id(self):
        """Gets the third_party_parcel_account_id of this CartonActivity.  # noqa: E501


        :return: The third_party_parcel_account_id of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._third_party_parcel_account_id

    @third_party_parcel_account_id.setter
    def third_party_parcel_account_id(self, third_party_parcel_account_id):
        """Sets the third_party_parcel_account_id of this CartonActivity.


        :param third_party_parcel_account_id: The third_party_parcel_account_id of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._third_party_parcel_account_id = third_party_parcel_account_id

    @property
    def packing_slip_template_id(self):
        """Gets the packing_slip_template_id of this CartonActivity.  # noqa: E501


        :return: The packing_slip_template_id of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._packing_slip_template_id

    @packing_slip_template_id.setter
    def packing_slip_template_id(self, packing_slip_template_id):
        """Sets the packing_slip_template_id of this CartonActivity.


        :param packing_slip_template_id: The packing_slip_template_id of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._packing_slip_template_id = packing_slip_template_id

    @property
    def gift_message(self):
        """Gets the gift_message of this CartonActivity.  # noqa: E501


        :return: The gift_message of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._gift_message

    @gift_message.setter
    def gift_message(self, gift_message):
        """Sets the gift_message of this CartonActivity.


        :param gift_message: The gift_message of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._gift_message = gift_message

    @property
    def branch_sector(self):
        """Gets the branch_sector of this CartonActivity.  # noqa: E501


        :return: The branch_sector of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._branch_sector

    @branch_sector.setter
    def branch_sector(self, branch_sector):
        """Sets the branch_sector of this CartonActivity.


        :param branch_sector: The branch_sector of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._branch_sector = branch_sector

    @property
    def branch_area(self):
        """Gets the branch_area of this CartonActivity.  # noqa: E501


        :return: The branch_area of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._branch_area

    @branch_area.setter
    def branch_area(self, branch_area):
        """Sets the branch_area of this CartonActivity.


        :param branch_area: The branch_area of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._branch_area = branch_area

    @property
    def branch_customer_type(self):
        """Gets the branch_customer_type of this CartonActivity.  # noqa: E501


        :return: The branch_customer_type of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._branch_customer_type

    @branch_customer_type.setter
    def branch_customer_type(self, branch_customer_type):
        """Sets the branch_customer_type of this CartonActivity.


        :param branch_customer_type: The branch_customer_type of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._branch_customer_type = branch_customer_type

    @property
    def branch_id(self):
        """Gets the branch_id of this CartonActivity.  # noqa: E501


        :return: The branch_id of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._branch_id

    @branch_id.setter
    def branch_id(self, branch_id):
        """Sets the branch_id of this CartonActivity.


        :param branch_id: The branch_id of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._branch_id = branch_id

    @property
    def order_code(self):
        """Gets the order_code of this CartonActivity.  # noqa: E501


        :return: The order_code of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._order_code

    @order_code.setter
    def order_code(self, order_code):
        """Sets the order_code of this CartonActivity.


        :param order_code: The order_code of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._order_code = order_code

    @property
    def lead_package_id(self):
        """Gets the lead_package_id of this CartonActivity.  # noqa: E501


        :return: The lead_package_id of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._lead_package_id

    @lead_package_id.setter
    def lead_package_id(self, lead_package_id):
        """Sets the lead_package_id of this CartonActivity.


        :param lead_package_id: The lead_package_id of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._lead_package_id = lead_package_id

    @property
    def total_qty(self):
        """Gets the total_qty of this CartonActivity.  # noqa: E501


        :return: The total_qty of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._total_qty

    @total_qty.setter
    def total_qty(self, total_qty):
        """Sets the total_qty of this CartonActivity.


        :param total_qty: The total_qty of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._total_qty = total_qty

    @property
    def estimated_number_of_picks(self):
        """Gets the estimated_number_of_picks of this CartonActivity.  # noqa: E501


        :return: The estimated_number_of_picks of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._estimated_number_of_picks

    @estimated_number_of_picks.setter
    def estimated_number_of_picks(self, estimated_number_of_picks):
        """Sets the estimated_number_of_picks of this CartonActivity.


        :param estimated_number_of_picks: The estimated_number_of_picks of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._estimated_number_of_picks = estimated_number_of_picks

    @property
    def order_confirmation_email_template_id(self):
        """Gets the order_confirmation_email_template_id of this CartonActivity.  # noqa: E501


        :return: The order_confirmation_email_template_id of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._order_confirmation_email_template_id

    @order_confirmation_email_template_id.setter
    def order_confirmation_email_template_id(self, order_confirmation_email_template_id):
        """Sets the order_confirmation_email_template_id of this CartonActivity.


        :param order_confirmation_email_template_id: The order_confirmation_email_template_id of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._order_confirmation_email_template_id = order_confirmation_email_template_id

    @property
    def shipment_confirmation_email_template_id(self):
        """Gets the shipment_confirmation_email_template_id of this CartonActivity.  # noqa: E501


        :return: The shipment_confirmation_email_template_id of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._shipment_confirmation_email_template_id

    @shipment_confirmation_email_template_id.setter
    def shipment_confirmation_email_template_id(self, shipment_confirmation_email_template_id):
        """Sets the shipment_confirmation_email_template_id of this CartonActivity.


        :param shipment_confirmation_email_template_id: The shipment_confirmation_email_template_id of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._shipment_confirmation_email_template_id = shipment_confirmation_email_template_id

    @property
    def external_shipping_system_id(self):
        """Gets the external_shipping_system_id of this CartonActivity.  # noqa: E501


        :return: The external_shipping_system_id of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._external_shipping_system_id

    @external_shipping_system_id.setter
    def external_shipping_system_id(self, external_shipping_system_id):
        """Sets the external_shipping_system_id of this CartonActivity.


        :param external_shipping_system_id: The external_shipping_system_id of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._external_shipping_system_id = external_shipping_system_id

    @property
    def shipping_system_name(self):
        """Gets the shipping_system_name of this CartonActivity.  # noqa: E501


        :return: The shipping_system_name of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._shipping_system_name

    @shipping_system_name.setter
    def shipping_system_name(self, shipping_system_name):
        """Sets the shipping_system_name of this CartonActivity.


        :param shipping_system_name: The shipping_system_name of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._shipping_system_name = shipping_system_name

    @property
    def order_invoice_template_id(self):
        """Gets the order_invoice_template_id of this CartonActivity.  # noqa: E501


        :return: The order_invoice_template_id of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._order_invoice_template_id

    @order_invoice_template_id.setter
    def order_invoice_template_id(self, order_invoice_template_id):
        """Sets the order_invoice_template_id of this CartonActivity.


        :param order_invoice_template_id: The order_invoice_template_id of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._order_invoice_template_id = order_invoice_template_id

    @property
    def price_mode(self):
        """Gets the price_mode of this CartonActivity.  # noqa: E501


        :return: The price_mode of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._price_mode

    @price_mode.setter
    def price_mode(self, price_mode):
        """Sets the price_mode of this CartonActivity.


        :param price_mode: The price_mode of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._price_mode = price_mode

    @property
    def warehouse_service_type_id(self):
        """Gets the warehouse_service_type_id of this CartonActivity.  # noqa: E501


        :return: The warehouse_service_type_id of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_service_type_id

    @warehouse_service_type_id.setter
    def warehouse_service_type_id(self, warehouse_service_type_id):
        """Sets the warehouse_service_type_id of this CartonActivity.


        :param warehouse_service_type_id: The warehouse_service_type_id of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._warehouse_service_type_id = warehouse_service_type_id

    @property
    def warehouse_service_level_id(self):
        """Gets the warehouse_service_level_id of this CartonActivity.  # noqa: E501


        :return: The warehouse_service_level_id of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_service_level_id

    @warehouse_service_level_id.setter
    def warehouse_service_level_id(self, warehouse_service_level_id):
        """Sets the warehouse_service_level_id of this CartonActivity.


        :param warehouse_service_level_id: The warehouse_service_level_id of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._warehouse_service_level_id = warehouse_service_level_id

    @property
    def sla_date(self):
        """Gets the sla_date of this CartonActivity.  # noqa: E501


        :return: The sla_date of this CartonActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._sla_date

    @sla_date.setter
    def sla_date(self, sla_date):
        """Sets the sla_date of this CartonActivity.


        :param sla_date: The sla_date of this CartonActivity.  # noqa: E501
        :type: datetime
        """

        self._sla_date = sla_date

    @property
    def sla_status(self):
        """Gets the sla_status of this CartonActivity.  # noqa: E501


        :return: The sla_status of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._sla_status

    @sla_status.setter
    def sla_status(self, sla_status):
        """Sets the sla_status of this CartonActivity.


        :param sla_status: The sla_status of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._sla_status = sla_status

    @property
    def production_type(self):
        """Gets the production_type of this CartonActivity.  # noqa: E501


        :return: The production_type of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._production_type

    @production_type.setter
    def production_type(self, production_type):
        """Sets the production_type of this CartonActivity.


        :param production_type: The production_type of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._production_type = production_type

    @property
    def back_order_status(self):
        """Gets the back_order_status of this CartonActivity.  # noqa: E501


        :return: The back_order_status of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._back_order_status

    @back_order_status.setter
    def back_order_status(self, back_order_status):
        """Sets the back_order_status of this CartonActivity.


        :param back_order_status: The back_order_status of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._back_order_status = back_order_status

    @property
    def back_order_release_date(self):
        """Gets the back_order_release_date of this CartonActivity.  # noqa: E501


        :return: The back_order_release_date of this CartonActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._back_order_release_date

    @back_order_release_date.setter
    def back_order_release_date(self, back_order_release_date):
        """Sets the back_order_release_date of this CartonActivity.


        :param back_order_release_date: The back_order_release_date of this CartonActivity.  # noqa: E501
        :type: datetime
        """

        self._back_order_release_date = back_order_release_date

    @property
    def carton_type_id(self):
        """Gets the carton_type_id of this CartonActivity.  # noqa: E501


        :return: The carton_type_id of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._carton_type_id

    @carton_type_id.setter
    def carton_type_id(self, carton_type_id):
        """Sets the carton_type_id of this CartonActivity.


        :param carton_type_id: The carton_type_id of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._carton_type_id = carton_type_id

    @property
    def carton_abbr(self):
        """Gets the carton_abbr of this CartonActivity.  # noqa: E501


        :return: The carton_abbr of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._carton_abbr

    @carton_abbr.setter
    def carton_abbr(self, carton_abbr):
        """Sets the carton_abbr of this CartonActivity.


        :param carton_abbr: The carton_abbr of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._carton_abbr = carton_abbr

    @property
    def carton_name(self):
        """Gets the carton_name of this CartonActivity.  # noqa: E501


        :return: The carton_name of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._carton_name

    @carton_name.setter
    def carton_name(self, carton_name):
        """Sets the carton_name of this CartonActivity.


        :param carton_name: The carton_name of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._carton_name = carton_name

    @property
    def carton_length(self):
        """Gets the carton_length of this CartonActivity.  # noqa: E501


        :return: The carton_length of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._carton_length

    @carton_length.setter
    def carton_length(self, carton_length):
        """Sets the carton_length of this CartonActivity.


        :param carton_length: The carton_length of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._carton_length = carton_length

    @property
    def carton_width(self):
        """Gets the carton_width of this CartonActivity.  # noqa: E501


        :return: The carton_width of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._carton_width

    @carton_width.setter
    def carton_width(self, carton_width):
        """Sets the carton_width of this CartonActivity.


        :param carton_width: The carton_width of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._carton_width = carton_width

    @property
    def carton_height(self):
        """Gets the carton_height of this CartonActivity.  # noqa: E501


        :return: The carton_height of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._carton_height

    @carton_height.setter
    def carton_height(self, carton_height):
        """Sets the carton_height of this CartonActivity.


        :param carton_height: The carton_height of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._carton_height = carton_height

    @property
    def carton_inner_length(self):
        """Gets the carton_inner_length of this CartonActivity.  # noqa: E501


        :return: The carton_inner_length of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._carton_inner_length

    @carton_inner_length.setter
    def carton_inner_length(self, carton_inner_length):
        """Sets the carton_inner_length of this CartonActivity.


        :param carton_inner_length: The carton_inner_length of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._carton_inner_length = carton_inner_length

    @property
    def carton_inner_width(self):
        """Gets the carton_inner_width of this CartonActivity.  # noqa: E501


        :return: The carton_inner_width of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._carton_inner_width

    @carton_inner_width.setter
    def carton_inner_width(self, carton_inner_width):
        """Sets the carton_inner_width of this CartonActivity.


        :param carton_inner_width: The carton_inner_width of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._carton_inner_width = carton_inner_width

    @property
    def carton_inner_height(self):
        """Gets the carton_inner_height of this CartonActivity.  # noqa: E501


        :return: The carton_inner_height of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._carton_inner_height

    @carton_inner_height.setter
    def carton_inner_height(self, carton_inner_height):
        """Sets the carton_inner_height of this CartonActivity.


        :param carton_inner_height: The carton_inner_height of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._carton_inner_height = carton_inner_height

    @property
    def carton_weight(self):
        """Gets the carton_weight of this CartonActivity.  # noqa: E501


        :return: The carton_weight of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._carton_weight

    @carton_weight.setter
    def carton_weight(self, carton_weight):
        """Sets the carton_weight of this CartonActivity.


        :param carton_weight: The carton_weight of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._carton_weight = carton_weight

    @property
    def predefined_carton_id(self):
        """Gets the predefined_carton_id of this CartonActivity.  # noqa: E501


        :return: The predefined_carton_id of this CartonActivity.  # noqa: E501
        :rtype: int
        """
        return self._predefined_carton_id

    @predefined_carton_id.setter
    def predefined_carton_id(self, predefined_carton_id):
        """Sets the predefined_carton_id of this CartonActivity.


        :param predefined_carton_id: The predefined_carton_id of this CartonActivity.  # noqa: E501
        :type: int
        """

        self._predefined_carton_id = predefined_carton_id

    @property
    def predefined_carton_label(self):
        """Gets the predefined_carton_label of this CartonActivity.  # noqa: E501


        :return: The predefined_carton_label of this CartonActivity.  # noqa: E501
        :rtype: str
        """
        return self._predefined_carton_label

    @predefined_carton_label.setter
    def predefined_carton_label(self, predefined_carton_label):
        """Sets the predefined_carton_label of this CartonActivity.


        :param predefined_carton_label: The predefined_carton_label of this CartonActivity.  # noqa: E501
        :type: str
        """

        self._predefined_carton_label = predefined_carton_label

    @property
    def billing_quantity(self):
        """Gets the billing_quantity of this CartonActivity.  # noqa: E501


        :return: The billing_quantity of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._billing_quantity

    @billing_quantity.setter
    def billing_quantity(self, billing_quantity):
        """Sets the billing_quantity of this CartonActivity.


        :param billing_quantity: The billing_quantity of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._billing_quantity = billing_quantity

    @property
    def charge_rate(self):
        """Gets the charge_rate of this CartonActivity.  # noqa: E501


        :return: The charge_rate of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._charge_rate

    @charge_rate.setter
    def charge_rate(self, charge_rate):
        """Sets the charge_rate of this CartonActivity.


        :param charge_rate: The charge_rate of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._charge_rate = charge_rate

    @property
    def extended_charge(self):
        """Gets the extended_charge of this CartonActivity.  # noqa: E501


        :return: The extended_charge of this CartonActivity.  # noqa: E501
        :rtype: float
        """
        return self._extended_charge

    @extended_charge.setter
    def extended_charge(self, extended_charge):
        """Sets the extended_charge of this CartonActivity.


        :param extended_charge: The extended_charge of this CartonActivity.  # noqa: E501
        :type: float
        """

        self._extended_charge = extended_charge

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CartonActivity.  # noqa: E501


        :return: The custom_fields of this CartonActivity.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CartonActivity.


        :param custom_fields: The custom_fields of this CartonActivity.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CartonActivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
