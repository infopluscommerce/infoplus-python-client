# coding: utf-8

"""
    Infoplus API

    Infoplus API.  # noqa: E501

    OpenAPI spec version: beta
    Contact: api@infopluscommerce.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PalletType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'pallet_length_in': 'float',
        'pallet_width_in': 'float',
        'pallet_height_in': 'float',
        'pallet_weight_lbs': 'float',
        'packable_length_in': 'float',
        'packable_width_in': 'float',
        'packable_height_in': 'float',
        'lob_id': 'int',
        'is_active': 'bool',
        'custom_fields': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'pallet_length_in': 'palletLengthIn',
        'pallet_width_in': 'palletWidthIn',
        'pallet_height_in': 'palletHeightIn',
        'pallet_weight_lbs': 'palletWeightLbs',
        'packable_length_in': 'packableLengthIn',
        'packable_width_in': 'packableWidthIn',
        'packable_height_in': 'packableHeightIn',
        'lob_id': 'lobId',
        'is_active': 'isActive',
        'custom_fields': 'customFields'
    }

    def __init__(self, id=None, name=None, pallet_length_in=None, pallet_width_in=None, pallet_height_in=None, pallet_weight_lbs=None, packable_length_in=None, packable_width_in=None, packable_height_in=None, lob_id=None, is_active=False, custom_fields=None):  # noqa: E501
        """PalletType - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._pallet_length_in = None
        self._pallet_width_in = None
        self._pallet_height_in = None
        self._pallet_weight_lbs = None
        self._packable_length_in = None
        self._packable_width_in = None
        self._packable_height_in = None
        self._lob_id = None
        self._is_active = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.pallet_length_in = pallet_length_in
        self.pallet_width_in = pallet_width_in
        self.pallet_height_in = pallet_height_in
        if pallet_weight_lbs is not None:
            self.pallet_weight_lbs = pallet_weight_lbs
        self.packable_length_in = packable_length_in
        self.packable_width_in = packable_width_in
        self.packable_height_in = packable_height_in
        self.lob_id = lob_id
        self.is_active = is_active
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this PalletType.  # noqa: E501


        :return: The id of this PalletType.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PalletType.


        :param id: The id of this PalletType.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PalletType.  # noqa: E501


        :return: The name of this PalletType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PalletType.


        :param name: The name of this PalletType.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def pallet_length_in(self):
        """Gets the pallet_length_in of this PalletType.  # noqa: E501


        :return: The pallet_length_in of this PalletType.  # noqa: E501
        :rtype: float
        """
        return self._pallet_length_in

    @pallet_length_in.setter
    def pallet_length_in(self, pallet_length_in):
        """Sets the pallet_length_in of this PalletType.


        :param pallet_length_in: The pallet_length_in of this PalletType.  # noqa: E501
        :type: float
        """
        if pallet_length_in is None:
            raise ValueError("Invalid value for `pallet_length_in`, must not be `None`")  # noqa: E501

        self._pallet_length_in = pallet_length_in

    @property
    def pallet_width_in(self):
        """Gets the pallet_width_in of this PalletType.  # noqa: E501


        :return: The pallet_width_in of this PalletType.  # noqa: E501
        :rtype: float
        """
        return self._pallet_width_in

    @pallet_width_in.setter
    def pallet_width_in(self, pallet_width_in):
        """Sets the pallet_width_in of this PalletType.


        :param pallet_width_in: The pallet_width_in of this PalletType.  # noqa: E501
        :type: float
        """
        if pallet_width_in is None:
            raise ValueError("Invalid value for `pallet_width_in`, must not be `None`")  # noqa: E501

        self._pallet_width_in = pallet_width_in

    @property
    def pallet_height_in(self):
        """Gets the pallet_height_in of this PalletType.  # noqa: E501


        :return: The pallet_height_in of this PalletType.  # noqa: E501
        :rtype: float
        """
        return self._pallet_height_in

    @pallet_height_in.setter
    def pallet_height_in(self, pallet_height_in):
        """Sets the pallet_height_in of this PalletType.


        :param pallet_height_in: The pallet_height_in of this PalletType.  # noqa: E501
        :type: float
        """
        if pallet_height_in is None:
            raise ValueError("Invalid value for `pallet_height_in`, must not be `None`")  # noqa: E501

        self._pallet_height_in = pallet_height_in

    @property
    def pallet_weight_lbs(self):
        """Gets the pallet_weight_lbs of this PalletType.  # noqa: E501


        :return: The pallet_weight_lbs of this PalletType.  # noqa: E501
        :rtype: float
        """
        return self._pallet_weight_lbs

    @pallet_weight_lbs.setter
    def pallet_weight_lbs(self, pallet_weight_lbs):
        """Sets the pallet_weight_lbs of this PalletType.


        :param pallet_weight_lbs: The pallet_weight_lbs of this PalletType.  # noqa: E501
        :type: float
        """

        self._pallet_weight_lbs = pallet_weight_lbs

    @property
    def packable_length_in(self):
        """Gets the packable_length_in of this PalletType.  # noqa: E501


        :return: The packable_length_in of this PalletType.  # noqa: E501
        :rtype: float
        """
        return self._packable_length_in

    @packable_length_in.setter
    def packable_length_in(self, packable_length_in):
        """Sets the packable_length_in of this PalletType.


        :param packable_length_in: The packable_length_in of this PalletType.  # noqa: E501
        :type: float
        """
        if packable_length_in is None:
            raise ValueError("Invalid value for `packable_length_in`, must not be `None`")  # noqa: E501

        self._packable_length_in = packable_length_in

    @property
    def packable_width_in(self):
        """Gets the packable_width_in of this PalletType.  # noqa: E501


        :return: The packable_width_in of this PalletType.  # noqa: E501
        :rtype: float
        """
        return self._packable_width_in

    @packable_width_in.setter
    def packable_width_in(self, packable_width_in):
        """Sets the packable_width_in of this PalletType.


        :param packable_width_in: The packable_width_in of this PalletType.  # noqa: E501
        :type: float
        """
        if packable_width_in is None:
            raise ValueError("Invalid value for `packable_width_in`, must not be `None`")  # noqa: E501

        self._packable_width_in = packable_width_in

    @property
    def packable_height_in(self):
        """Gets the packable_height_in of this PalletType.  # noqa: E501


        :return: The packable_height_in of this PalletType.  # noqa: E501
        :rtype: float
        """
        return self._packable_height_in

    @packable_height_in.setter
    def packable_height_in(self, packable_height_in):
        """Sets the packable_height_in of this PalletType.


        :param packable_height_in: The packable_height_in of this PalletType.  # noqa: E501
        :type: float
        """
        if packable_height_in is None:
            raise ValueError("Invalid value for `packable_height_in`, must not be `None`")  # noqa: E501

        self._packable_height_in = packable_height_in

    @property
    def lob_id(self):
        """Gets the lob_id of this PalletType.  # noqa: E501


        :return: The lob_id of this PalletType.  # noqa: E501
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """Sets the lob_id of this PalletType.


        :param lob_id: The lob_id of this PalletType.  # noqa: E501
        :type: int
        """
        if lob_id is None:
            raise ValueError("Invalid value for `lob_id`, must not be `None`")  # noqa: E501

        self._lob_id = lob_id

    @property
    def is_active(self):
        """Gets the is_active of this PalletType.  # noqa: E501


        :return: The is_active of this PalletType.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this PalletType.


        :param is_active: The is_active of this PalletType.  # noqa: E501
        :type: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active

    @property
    def custom_fields(self):
        """Gets the custom_fields of this PalletType.  # noqa: E501


        :return: The custom_fields of this PalletType.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this PalletType.


        :param custom_fields: The custom_fields of this PalletType.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PalletType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
