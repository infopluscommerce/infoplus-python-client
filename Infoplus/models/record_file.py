# coding: utf-8

"""
    Infoplus API

    Infoplus API.  # noqa: E501

    OpenAPI spec version: v3.0
    Contact: api@infopluscommerce.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RecordFile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'file_name': 'str',
        'extension': 'str',
        'url': 'str',
        'role_name': 'str',
        'label': 'str',
        'modify_date': 'datetime',
        'printer_type_id': 'int',
        'user_full_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'file_name': 'fileName',
        'extension': 'extension',
        'url': 'url',
        'role_name': 'roleName',
        'label': 'label',
        'modify_date': 'modifyDate',
        'printer_type_id': 'printerTypeId',
        'user_full_name': 'userFullName'
    }

    def __init__(self, id=None, file_name=None, extension=None, url=None, role_name=None, label=None, modify_date=None, printer_type_id=None, user_full_name=None):  # noqa: E501
        """RecordFile - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._file_name = None
        self._extension = None
        self._url = None
        self._role_name = None
        self._label = None
        self._modify_date = None
        self._printer_type_id = None
        self._user_full_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if file_name is not None:
            self.file_name = file_name
        if extension is not None:
            self.extension = extension
        if url is not None:
            self.url = url
        if role_name is not None:
            self.role_name = role_name
        if label is not None:
            self.label = label
        if modify_date is not None:
            self.modify_date = modify_date
        if printer_type_id is not None:
            self.printer_type_id = printer_type_id
        if user_full_name is not None:
            self.user_full_name = user_full_name

    @property
    def id(self):
        """Gets the id of this RecordFile.  # noqa: E501


        :return: The id of this RecordFile.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RecordFile.


        :param id: The id of this RecordFile.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def file_name(self):
        """Gets the file_name of this RecordFile.  # noqa: E501


        :return: The file_name of this RecordFile.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this RecordFile.


        :param file_name: The file_name of this RecordFile.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def extension(self):
        """Gets the extension of this RecordFile.  # noqa: E501


        :return: The extension of this RecordFile.  # noqa: E501
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this RecordFile.


        :param extension: The extension of this RecordFile.  # noqa: E501
        :type: str
        """

        self._extension = extension

    @property
    def url(self):
        """Gets the url of this RecordFile.  # noqa: E501


        :return: The url of this RecordFile.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this RecordFile.


        :param url: The url of this RecordFile.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def role_name(self):
        """Gets the role_name of this RecordFile.  # noqa: E501


        :return: The role_name of this RecordFile.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this RecordFile.


        :param role_name: The role_name of this RecordFile.  # noqa: E501
        :type: str
        """

        self._role_name = role_name

    @property
    def label(self):
        """Gets the label of this RecordFile.  # noqa: E501


        :return: The label of this RecordFile.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this RecordFile.


        :param label: The label of this RecordFile.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def modify_date(self):
        """Gets the modify_date of this RecordFile.  # noqa: E501


        :return: The modify_date of this RecordFile.  # noqa: E501
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """Sets the modify_date of this RecordFile.


        :param modify_date: The modify_date of this RecordFile.  # noqa: E501
        :type: datetime
        """

        self._modify_date = modify_date

    @property
    def printer_type_id(self):
        """Gets the printer_type_id of this RecordFile.  # noqa: E501


        :return: The printer_type_id of this RecordFile.  # noqa: E501
        :rtype: int
        """
        return self._printer_type_id

    @printer_type_id.setter
    def printer_type_id(self, printer_type_id):
        """Sets the printer_type_id of this RecordFile.


        :param printer_type_id: The printer_type_id of this RecordFile.  # noqa: E501
        :type: int
        """

        self._printer_type_id = printer_type_id

    @property
    def user_full_name(self):
        """Gets the user_full_name of this RecordFile.  # noqa: E501


        :return: The user_full_name of this RecordFile.  # noqa: E501
        :rtype: str
        """
        return self._user_full_name

    @user_full_name.setter
    def user_full_name(self, user_full_name):
        """Sets the user_full_name of this RecordFile.


        :param user_full_name: The user_full_name of this RecordFile.  # noqa: E501
        :type: str
        """

        self._user_full_name = user_full_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecordFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
