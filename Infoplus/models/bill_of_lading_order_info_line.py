# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class BillOfLadingOrderInfoLine(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        BillOfLadingOrderInfoLine - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'customer_order_no': 'str',
            'no_packages': 'int',
            'weight': 'int',
            'palletslip': 'bool',
            'additional_shipper_info': 'str',
            'custom_fields': 'dict(str, object)'
        }

        self.attribute_map = {
            'customer_order_no': 'customerOrderNo',
            'no_packages': 'noPackages',
            'weight': 'weight',
            'palletslip': 'palletslip',
            'additional_shipper_info': 'additionalShipperInfo',
            'custom_fields': 'customFields'
        }

        self._customer_order_no = None
        self._no_packages = None
        self._weight = None
        self._palletslip = False
        self._additional_shipper_info = None
        self._custom_fields = None

    @property
    def customer_order_no(self):
        """
        Gets the customer_order_no of this BillOfLadingOrderInfoLine.


        :return: The customer_order_no of this BillOfLadingOrderInfoLine.
        :rtype: str
        """
        return self._customer_order_no

    @customer_order_no.setter
    def customer_order_no(self, customer_order_no):
        """
        Sets the customer_order_no of this BillOfLadingOrderInfoLine.


        :param customer_order_no: The customer_order_no of this BillOfLadingOrderInfoLine.
        :type: str
        """
        self._customer_order_no = customer_order_no

    @property
    def no_packages(self):
        """
        Gets the no_packages of this BillOfLadingOrderInfoLine.


        :return: The no_packages of this BillOfLadingOrderInfoLine.
        :rtype: int
        """
        return self._no_packages

    @no_packages.setter
    def no_packages(self, no_packages):
        """
        Sets the no_packages of this BillOfLadingOrderInfoLine.


        :param no_packages: The no_packages of this BillOfLadingOrderInfoLine.
        :type: int
        """
        self._no_packages = no_packages

    @property
    def weight(self):
        """
        Gets the weight of this BillOfLadingOrderInfoLine.


        :return: The weight of this BillOfLadingOrderInfoLine.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """
        Sets the weight of this BillOfLadingOrderInfoLine.


        :param weight: The weight of this BillOfLadingOrderInfoLine.
        :type: int
        """
        self._weight = weight

    @property
    def palletslip(self):
        """
        Gets the palletslip of this BillOfLadingOrderInfoLine.


        :return: The palletslip of this BillOfLadingOrderInfoLine.
        :rtype: bool
        """
        return self._palletslip

    @palletslip.setter
    def palletslip(self, palletslip):
        """
        Sets the palletslip of this BillOfLadingOrderInfoLine.


        :param palletslip: The palletslip of this BillOfLadingOrderInfoLine.
        :type: bool
        """
        self._palletslip = palletslip

    @property
    def additional_shipper_info(self):
        """
        Gets the additional_shipper_info of this BillOfLadingOrderInfoLine.


        :return: The additional_shipper_info of this BillOfLadingOrderInfoLine.
        :rtype: str
        """
        return self._additional_shipper_info

    @additional_shipper_info.setter
    def additional_shipper_info(self, additional_shipper_info):
        """
        Sets the additional_shipper_info of this BillOfLadingOrderInfoLine.


        :param additional_shipper_info: The additional_shipper_info of this BillOfLadingOrderInfoLine.
        :type: str
        """
        self._additional_shipper_info = additional_shipper_info

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this BillOfLadingOrderInfoLine.


        :return: The custom_fields of this BillOfLadingOrderInfoLine.
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this BillOfLadingOrderInfoLine.


        :param custom_fields: The custom_fields of this BillOfLadingOrderInfoLine.
        :type: dict(str, object)
        """
        self._custom_fields = custom_fields

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

