# coding: utf-8

"""
    Infoplus API

    Infoplus API.  # noqa: E501

    OpenAPI spec version: v3.0
    Contact: api@infopluscommerce.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CartonType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'abbreviation': 'str',
        'name': 'str',
        'length_in': 'float',
        'width_in': 'float',
        'height_in': 'float',
        'inner_length_in': 'float',
        'inner_width_in': 'float',
        'inner_height_in': 'float',
        'weight_lbs': 'float',
        'lob_id': 'int',
        'is_active': 'bool',
        'predefined_package_type_id': 'int',
        'origin': 'str',
        'type': 'str',
        'custom_fields': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'abbreviation': 'abbreviation',
        'name': 'name',
        'length_in': 'lengthIn',
        'width_in': 'widthIn',
        'height_in': 'heightIn',
        'inner_length_in': 'innerLengthIn',
        'inner_width_in': 'innerWidthIn',
        'inner_height_in': 'innerHeightIn',
        'weight_lbs': 'weightLbs',
        'lob_id': 'lobId',
        'is_active': 'isActive',
        'predefined_package_type_id': 'predefinedPackageTypeId',
        'origin': 'origin',
        'type': 'type',
        'custom_fields': 'customFields'
    }

    def __init__(self, id=None, abbreviation=None, name=None, length_in=None, width_in=None, height_in=None, inner_length_in=None, inner_width_in=None, inner_height_in=None, weight_lbs=None, lob_id=None, is_active=False, predefined_package_type_id=None, origin=None, type=None, custom_fields=None):  # noqa: E501
        """CartonType - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._abbreviation = None
        self._name = None
        self._length_in = None
        self._width_in = None
        self._height_in = None
        self._inner_length_in = None
        self._inner_width_in = None
        self._inner_height_in = None
        self._weight_lbs = None
        self._lob_id = None
        self._is_active = None
        self._predefined_package_type_id = None
        self._origin = None
        self._type = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.abbreviation = abbreviation
        self.name = name
        self.length_in = length_in
        self.width_in = width_in
        self.height_in = height_in
        self.inner_length_in = inner_length_in
        self.inner_width_in = inner_width_in
        self.inner_height_in = inner_height_in
        if weight_lbs is not None:
            self.weight_lbs = weight_lbs
        self.lob_id = lob_id
        self.is_active = is_active
        if predefined_package_type_id is not None:
            self.predefined_package_type_id = predefined_package_type_id
        if origin is not None:
            self.origin = origin
        if type is not None:
            self.type = type
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this CartonType.  # noqa: E501


        :return: The id of this CartonType.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CartonType.


        :param id: The id of this CartonType.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def abbreviation(self):
        """Gets the abbreviation of this CartonType.  # noqa: E501


        :return: The abbreviation of this CartonType.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this CartonType.


        :param abbreviation: The abbreviation of this CartonType.  # noqa: E501
        :type: str
        """
        if abbreviation is None:
            raise ValueError("Invalid value for `abbreviation`, must not be `None`")  # noqa: E501

        self._abbreviation = abbreviation

    @property
    def name(self):
        """Gets the name of this CartonType.  # noqa: E501


        :return: The name of this CartonType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CartonType.


        :param name: The name of this CartonType.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def length_in(self):
        """Gets the length_in of this CartonType.  # noqa: E501


        :return: The length_in of this CartonType.  # noqa: E501
        :rtype: float
        """
        return self._length_in

    @length_in.setter
    def length_in(self, length_in):
        """Sets the length_in of this CartonType.


        :param length_in: The length_in of this CartonType.  # noqa: E501
        :type: float
        """
        if length_in is None:
            raise ValueError("Invalid value for `length_in`, must not be `None`")  # noqa: E501

        self._length_in = length_in

    @property
    def width_in(self):
        """Gets the width_in of this CartonType.  # noqa: E501


        :return: The width_in of this CartonType.  # noqa: E501
        :rtype: float
        """
        return self._width_in

    @width_in.setter
    def width_in(self, width_in):
        """Sets the width_in of this CartonType.


        :param width_in: The width_in of this CartonType.  # noqa: E501
        :type: float
        """
        if width_in is None:
            raise ValueError("Invalid value for `width_in`, must not be `None`")  # noqa: E501

        self._width_in = width_in

    @property
    def height_in(self):
        """Gets the height_in of this CartonType.  # noqa: E501


        :return: The height_in of this CartonType.  # noqa: E501
        :rtype: float
        """
        return self._height_in

    @height_in.setter
    def height_in(self, height_in):
        """Sets the height_in of this CartonType.


        :param height_in: The height_in of this CartonType.  # noqa: E501
        :type: float
        """
        if height_in is None:
            raise ValueError("Invalid value for `height_in`, must not be `None`")  # noqa: E501

        self._height_in = height_in

    @property
    def inner_length_in(self):
        """Gets the inner_length_in of this CartonType.  # noqa: E501


        :return: The inner_length_in of this CartonType.  # noqa: E501
        :rtype: float
        """
        return self._inner_length_in

    @inner_length_in.setter
    def inner_length_in(self, inner_length_in):
        """Sets the inner_length_in of this CartonType.


        :param inner_length_in: The inner_length_in of this CartonType.  # noqa: E501
        :type: float
        """
        if inner_length_in is None:
            raise ValueError("Invalid value for `inner_length_in`, must not be `None`")  # noqa: E501

        self._inner_length_in = inner_length_in

    @property
    def inner_width_in(self):
        """Gets the inner_width_in of this CartonType.  # noqa: E501


        :return: The inner_width_in of this CartonType.  # noqa: E501
        :rtype: float
        """
        return self._inner_width_in

    @inner_width_in.setter
    def inner_width_in(self, inner_width_in):
        """Sets the inner_width_in of this CartonType.


        :param inner_width_in: The inner_width_in of this CartonType.  # noqa: E501
        :type: float
        """
        if inner_width_in is None:
            raise ValueError("Invalid value for `inner_width_in`, must not be `None`")  # noqa: E501

        self._inner_width_in = inner_width_in

    @property
    def inner_height_in(self):
        """Gets the inner_height_in of this CartonType.  # noqa: E501


        :return: The inner_height_in of this CartonType.  # noqa: E501
        :rtype: float
        """
        return self._inner_height_in

    @inner_height_in.setter
    def inner_height_in(self, inner_height_in):
        """Sets the inner_height_in of this CartonType.


        :param inner_height_in: The inner_height_in of this CartonType.  # noqa: E501
        :type: float
        """
        if inner_height_in is None:
            raise ValueError("Invalid value for `inner_height_in`, must not be `None`")  # noqa: E501

        self._inner_height_in = inner_height_in

    @property
    def weight_lbs(self):
        """Gets the weight_lbs of this CartonType.  # noqa: E501


        :return: The weight_lbs of this CartonType.  # noqa: E501
        :rtype: float
        """
        return self._weight_lbs

    @weight_lbs.setter
    def weight_lbs(self, weight_lbs):
        """Sets the weight_lbs of this CartonType.


        :param weight_lbs: The weight_lbs of this CartonType.  # noqa: E501
        :type: float
        """

        self._weight_lbs = weight_lbs

    @property
    def lob_id(self):
        """Gets the lob_id of this CartonType.  # noqa: E501


        :return: The lob_id of this CartonType.  # noqa: E501
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """Sets the lob_id of this CartonType.


        :param lob_id: The lob_id of this CartonType.  # noqa: E501
        :type: int
        """
        if lob_id is None:
            raise ValueError("Invalid value for `lob_id`, must not be `None`")  # noqa: E501

        self._lob_id = lob_id

    @property
    def is_active(self):
        """Gets the is_active of this CartonType.  # noqa: E501


        :return: The is_active of this CartonType.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this CartonType.


        :param is_active: The is_active of this CartonType.  # noqa: E501
        :type: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active

    @property
    def predefined_package_type_id(self):
        """Gets the predefined_package_type_id of this CartonType.  # noqa: E501


        :return: The predefined_package_type_id of this CartonType.  # noqa: E501
        :rtype: int
        """
        return self._predefined_package_type_id

    @predefined_package_type_id.setter
    def predefined_package_type_id(self, predefined_package_type_id):
        """Sets the predefined_package_type_id of this CartonType.


        :param predefined_package_type_id: The predefined_package_type_id of this CartonType.  # noqa: E501
        :type: int
        """

        self._predefined_package_type_id = predefined_package_type_id

    @property
    def origin(self):
        """Gets the origin of this CartonType.  # noqa: E501


        :return: The origin of this CartonType.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this CartonType.


        :param origin: The origin of this CartonType.  # noqa: E501
        :type: str
        """

        self._origin = origin

    @property
    def type(self):
        """Gets the type of this CartonType.  # noqa: E501


        :return: The type of this CartonType.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CartonType.


        :param type: The type of this CartonType.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CartonType.  # noqa: E501


        :return: The custom_fields of this CartonType.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CartonType.


        :param custom_fields: The custom_fields of this CartonType.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CartonType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
