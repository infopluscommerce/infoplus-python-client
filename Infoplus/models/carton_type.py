# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class CartonType(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CartonType - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'abbreviation': 'str',
            'name': 'str',
            'length_in': 'float',
            'width_in': 'float',
            'height_in': 'float',
            'inner_length_in': 'float',
            'inner_width_in': 'float',
            'inner_height_in': 'float',
            'weight_lbs': 'float',
            'lob_id': 'int',
            'is_active': 'bool',
            'custom_fields': 'dict(str, object)'
        }

        self.attribute_map = {
            'id': 'id',
            'abbreviation': 'abbreviation',
            'name': 'name',
            'length_in': 'lengthIn',
            'width_in': 'widthIn',
            'height_in': 'heightIn',
            'inner_length_in': 'innerLengthIn',
            'inner_width_in': 'innerWidthIn',
            'inner_height_in': 'innerHeightIn',
            'weight_lbs': 'weightLbs',
            'lob_id': 'lobId',
            'is_active': 'isActive',
            'custom_fields': 'customFields'
        }

        self._id = None
        self._abbreviation = None
        self._name = None
        self._length_in = None
        self._width_in = None
        self._height_in = None
        self._inner_length_in = None
        self._inner_width_in = None
        self._inner_height_in = None
        self._weight_lbs = None
        self._lob_id = None
        self._is_active = False
        self._custom_fields = None

    @property
    def id(self):
        """
        Gets the id of this CartonType.


        :return: The id of this CartonType.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CartonType.


        :param id: The id of this CartonType.
        :type: int
        """
        self._id = id

    @property
    def abbreviation(self):
        """
        Gets the abbreviation of this CartonType.


        :return: The abbreviation of this CartonType.
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """
        Sets the abbreviation of this CartonType.


        :param abbreviation: The abbreviation of this CartonType.
        :type: str
        """
        self._abbreviation = abbreviation

    @property
    def name(self):
        """
        Gets the name of this CartonType.


        :return: The name of this CartonType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CartonType.


        :param name: The name of this CartonType.
        :type: str
        """
        self._name = name

    @property
    def length_in(self):
        """
        Gets the length_in of this CartonType.


        :return: The length_in of this CartonType.
        :rtype: float
        """
        return self._length_in

    @length_in.setter
    def length_in(self, length_in):
        """
        Sets the length_in of this CartonType.


        :param length_in: The length_in of this CartonType.
        :type: float
        """
        self._length_in = length_in

    @property
    def width_in(self):
        """
        Gets the width_in of this CartonType.


        :return: The width_in of this CartonType.
        :rtype: float
        """
        return self._width_in

    @width_in.setter
    def width_in(self, width_in):
        """
        Sets the width_in of this CartonType.


        :param width_in: The width_in of this CartonType.
        :type: float
        """
        self._width_in = width_in

    @property
    def height_in(self):
        """
        Gets the height_in of this CartonType.


        :return: The height_in of this CartonType.
        :rtype: float
        """
        return self._height_in

    @height_in.setter
    def height_in(self, height_in):
        """
        Sets the height_in of this CartonType.


        :param height_in: The height_in of this CartonType.
        :type: float
        """
        self._height_in = height_in

    @property
    def inner_length_in(self):
        """
        Gets the inner_length_in of this CartonType.


        :return: The inner_length_in of this CartonType.
        :rtype: float
        """
        return self._inner_length_in

    @inner_length_in.setter
    def inner_length_in(self, inner_length_in):
        """
        Sets the inner_length_in of this CartonType.


        :param inner_length_in: The inner_length_in of this CartonType.
        :type: float
        """
        self._inner_length_in = inner_length_in

    @property
    def inner_width_in(self):
        """
        Gets the inner_width_in of this CartonType.


        :return: The inner_width_in of this CartonType.
        :rtype: float
        """
        return self._inner_width_in

    @inner_width_in.setter
    def inner_width_in(self, inner_width_in):
        """
        Sets the inner_width_in of this CartonType.


        :param inner_width_in: The inner_width_in of this CartonType.
        :type: float
        """
        self._inner_width_in = inner_width_in

    @property
    def inner_height_in(self):
        """
        Gets the inner_height_in of this CartonType.


        :return: The inner_height_in of this CartonType.
        :rtype: float
        """
        return self._inner_height_in

    @inner_height_in.setter
    def inner_height_in(self, inner_height_in):
        """
        Sets the inner_height_in of this CartonType.


        :param inner_height_in: The inner_height_in of this CartonType.
        :type: float
        """
        self._inner_height_in = inner_height_in

    @property
    def weight_lbs(self):
        """
        Gets the weight_lbs of this CartonType.


        :return: The weight_lbs of this CartonType.
        :rtype: float
        """
        return self._weight_lbs

    @weight_lbs.setter
    def weight_lbs(self, weight_lbs):
        """
        Sets the weight_lbs of this CartonType.


        :param weight_lbs: The weight_lbs of this CartonType.
        :type: float
        """
        self._weight_lbs = weight_lbs

    @property
    def lob_id(self):
        """
        Gets the lob_id of this CartonType.


        :return: The lob_id of this CartonType.
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """
        Sets the lob_id of this CartonType.


        :param lob_id: The lob_id of this CartonType.
        :type: int
        """
        self._lob_id = lob_id

    @property
    def is_active(self):
        """
        Gets the is_active of this CartonType.


        :return: The is_active of this CartonType.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """
        Sets the is_active of this CartonType.


        :param is_active: The is_active of this CartonType.
        :type: bool
        """
        self._is_active = is_active

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this CartonType.


        :return: The custom_fields of this CartonType.
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this CartonType.


        :param custom_fields: The custom_fields of this CartonType.
        :type: dict(str, object)
        """
        self._custom_fields = custom_fields

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

