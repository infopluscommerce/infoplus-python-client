# coding: utf-8

"""
    Infoplus API

    Infoplus API.  # noqa: E501

    OpenAPI spec version: beta
    Contact: api@infopluscommerce.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class QuickAdjustment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'warehouse_id': 'int',
        'location_id': 'int',
        'lob_id': 'int',
        'adjustment_code': 'str',
        'total_quantity': 'int',
        'change_quantity': 'int',
        'message': 'str',
        'status': 'str',
        'product_id_tag': 'str',
        'create_date': 'datetime',
        'modify_date': 'datetime',
        'custom_fields': 'dict(str, object)',
        'sku': 'str'
    }

    attribute_map = {
        'id': 'id',
        'warehouse_id': 'warehouseId',
        'location_id': 'locationId',
        'lob_id': 'lobId',
        'adjustment_code': 'adjustmentCode',
        'total_quantity': 'totalQuantity',
        'change_quantity': 'changeQuantity',
        'message': 'message',
        'status': 'status',
        'product_id_tag': 'productIdTag',
        'create_date': 'createDate',
        'modify_date': 'modifyDate',
        'custom_fields': 'customFields',
        'sku': 'sku'
    }

    def __init__(self, id=None, warehouse_id=None, location_id=None, lob_id=None, adjustment_code=None, total_quantity=None, change_quantity=None, message=None, status=None, product_id_tag=None, create_date=None, modify_date=None, custom_fields=None, sku=None):  # noqa: E501
        """QuickAdjustment - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._warehouse_id = None
        self._location_id = None
        self._lob_id = None
        self._adjustment_code = None
        self._total_quantity = None
        self._change_quantity = None
        self._message = None
        self._status = None
        self._product_id_tag = None
        self._create_date = None
        self._modify_date = None
        self._custom_fields = None
        self._sku = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.warehouse_id = warehouse_id
        self.location_id = location_id
        if lob_id is not None:
            self.lob_id = lob_id
        self.adjustment_code = adjustment_code
        if total_quantity is not None:
            self.total_quantity = total_quantity
        if change_quantity is not None:
            self.change_quantity = change_quantity
        if message is not None:
            self.message = message
        if status is not None:
            self.status = status
        if product_id_tag is not None:
            self.product_id_tag = product_id_tag
        if create_date is not None:
            self.create_date = create_date
        if modify_date is not None:
            self.modify_date = modify_date
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if sku is not None:
            self.sku = sku

    @property
    def id(self):
        """Gets the id of this QuickAdjustment.  # noqa: E501


        :return: The id of this QuickAdjustment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QuickAdjustment.


        :param id: The id of this QuickAdjustment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this QuickAdjustment.  # noqa: E501


        :return: The warehouse_id of this QuickAdjustment.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this QuickAdjustment.


        :param warehouse_id: The warehouse_id of this QuickAdjustment.  # noqa: E501
        :type: int
        """
        if warehouse_id is None:
            raise ValueError("Invalid value for `warehouse_id`, must not be `None`")  # noqa: E501

        self._warehouse_id = warehouse_id

    @property
    def location_id(self):
        """Gets the location_id of this QuickAdjustment.  # noqa: E501


        :return: The location_id of this QuickAdjustment.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this QuickAdjustment.


        :param location_id: The location_id of this QuickAdjustment.  # noqa: E501
        :type: int
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")  # noqa: E501

        self._location_id = location_id

    @property
    def lob_id(self):
        """Gets the lob_id of this QuickAdjustment.  # noqa: E501


        :return: The lob_id of this QuickAdjustment.  # noqa: E501
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """Sets the lob_id of this QuickAdjustment.


        :param lob_id: The lob_id of this QuickAdjustment.  # noqa: E501
        :type: int
        """

        self._lob_id = lob_id

    @property
    def adjustment_code(self):
        """Gets the adjustment_code of this QuickAdjustment.  # noqa: E501


        :return: The adjustment_code of this QuickAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_code

    @adjustment_code.setter
    def adjustment_code(self, adjustment_code):
        """Sets the adjustment_code of this QuickAdjustment.


        :param adjustment_code: The adjustment_code of this QuickAdjustment.  # noqa: E501
        :type: str
        """
        if adjustment_code is None:
            raise ValueError("Invalid value for `adjustment_code`, must not be `None`")  # noqa: E501

        self._adjustment_code = adjustment_code

    @property
    def total_quantity(self):
        """Gets the total_quantity of this QuickAdjustment.  # noqa: E501


        :return: The total_quantity of this QuickAdjustment.  # noqa: E501
        :rtype: int
        """
        return self._total_quantity

    @total_quantity.setter
    def total_quantity(self, total_quantity):
        """Sets the total_quantity of this QuickAdjustment.


        :param total_quantity: The total_quantity of this QuickAdjustment.  # noqa: E501
        :type: int
        """

        self._total_quantity = total_quantity

    @property
    def change_quantity(self):
        """Gets the change_quantity of this QuickAdjustment.  # noqa: E501


        :return: The change_quantity of this QuickAdjustment.  # noqa: E501
        :rtype: int
        """
        return self._change_quantity

    @change_quantity.setter
    def change_quantity(self, change_quantity):
        """Sets the change_quantity of this QuickAdjustment.


        :param change_quantity: The change_quantity of this QuickAdjustment.  # noqa: E501
        :type: int
        """

        self._change_quantity = change_quantity

    @property
    def message(self):
        """Gets the message of this QuickAdjustment.  # noqa: E501


        :return: The message of this QuickAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this QuickAdjustment.


        :param message: The message of this QuickAdjustment.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this QuickAdjustment.  # noqa: E501


        :return: The status of this QuickAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this QuickAdjustment.


        :param status: The status of this QuickAdjustment.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def product_id_tag(self):
        """Gets the product_id_tag of this QuickAdjustment.  # noqa: E501


        :return: The product_id_tag of this QuickAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._product_id_tag

    @product_id_tag.setter
    def product_id_tag(self, product_id_tag):
        """Sets the product_id_tag of this QuickAdjustment.


        :param product_id_tag: The product_id_tag of this QuickAdjustment.  # noqa: E501
        :type: str
        """

        self._product_id_tag = product_id_tag

    @property
    def create_date(self):
        """Gets the create_date of this QuickAdjustment.  # noqa: E501


        :return: The create_date of this QuickAdjustment.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this QuickAdjustment.


        :param create_date: The create_date of this QuickAdjustment.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def modify_date(self):
        """Gets the modify_date of this QuickAdjustment.  # noqa: E501


        :return: The modify_date of this QuickAdjustment.  # noqa: E501
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """Sets the modify_date of this QuickAdjustment.


        :param modify_date: The modify_date of this QuickAdjustment.  # noqa: E501
        :type: datetime
        """

        self._modify_date = modify_date

    @property
    def custom_fields(self):
        """Gets the custom_fields of this QuickAdjustment.  # noqa: E501


        :return: The custom_fields of this QuickAdjustment.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this QuickAdjustment.


        :param custom_fields: The custom_fields of this QuickAdjustment.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    @property
    def sku(self):
        """Gets the sku of this QuickAdjustment.  # noqa: E501


        :return: The sku of this QuickAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this QuickAdjustment.


        :param sku: The sku of this QuickAdjustment.  # noqa: E501
        :type: str
        """

        self._sku = sku

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuickAdjustment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
