# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class QuickAdjustment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        QuickAdjustment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'create_date': 'datetime',
            'modify_date': 'datetime',
            'warehouse_id': 'int',
            'location_id': 'int',
            'adjustment_code': 'str',
            'total_quantity': 'int',
            'message': 'str',
            'status': 'str',
            'custom_fields': 'dict(str, object)',
            'sku': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'create_date': 'createDate',
            'modify_date': 'modifyDate',
            'warehouse_id': 'warehouseId',
            'location_id': 'locationId',
            'adjustment_code': 'adjustmentCode',
            'total_quantity': 'totalQuantity',
            'message': 'message',
            'status': 'status',
            'custom_fields': 'customFields',
            'sku': 'sku'
        }

        self._id = None
        self._create_date = None
        self._modify_date = None
        self._warehouse_id = None
        self._location_id = None
        self._adjustment_code = None
        self._total_quantity = None
        self._message = None
        self._status = None
        self._custom_fields = None
        self._sku = None

    @property
    def id(self):
        """
        Gets the id of this QuickAdjustment.


        :return: The id of this QuickAdjustment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this QuickAdjustment.


        :param id: The id of this QuickAdjustment.
        :type: int
        """
        self._id = id

    @property
    def create_date(self):
        """
        Gets the create_date of this QuickAdjustment.


        :return: The create_date of this QuickAdjustment.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """
        Sets the create_date of this QuickAdjustment.


        :param create_date: The create_date of this QuickAdjustment.
        :type: datetime
        """
        self._create_date = create_date

    @property
    def modify_date(self):
        """
        Gets the modify_date of this QuickAdjustment.


        :return: The modify_date of this QuickAdjustment.
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """
        Sets the modify_date of this QuickAdjustment.


        :param modify_date: The modify_date of this QuickAdjustment.
        :type: datetime
        """
        self._modify_date = modify_date

    @property
    def warehouse_id(self):
        """
        Gets the warehouse_id of this QuickAdjustment.


        :return: The warehouse_id of this QuickAdjustment.
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """
        Sets the warehouse_id of this QuickAdjustment.


        :param warehouse_id: The warehouse_id of this QuickAdjustment.
        :type: int
        """
        self._warehouse_id = warehouse_id

    @property
    def location_id(self):
        """
        Gets the location_id of this QuickAdjustment.


        :return: The location_id of this QuickAdjustment.
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """
        Sets the location_id of this QuickAdjustment.


        :param location_id: The location_id of this QuickAdjustment.
        :type: int
        """
        self._location_id = location_id

    @property
    def adjustment_code(self):
        """
        Gets the adjustment_code of this QuickAdjustment.


        :return: The adjustment_code of this QuickAdjustment.
        :rtype: str
        """
        return self._adjustment_code

    @adjustment_code.setter
    def adjustment_code(self, adjustment_code):
        """
        Sets the adjustment_code of this QuickAdjustment.


        :param adjustment_code: The adjustment_code of this QuickAdjustment.
        :type: str
        """
        self._adjustment_code = adjustment_code

    @property
    def total_quantity(self):
        """
        Gets the total_quantity of this QuickAdjustment.


        :return: The total_quantity of this QuickAdjustment.
        :rtype: int
        """
        return self._total_quantity

    @total_quantity.setter
    def total_quantity(self, total_quantity):
        """
        Sets the total_quantity of this QuickAdjustment.


        :param total_quantity: The total_quantity of this QuickAdjustment.
        :type: int
        """
        self._total_quantity = total_quantity

    @property
    def message(self):
        """
        Gets the message of this QuickAdjustment.


        :return: The message of this QuickAdjustment.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this QuickAdjustment.


        :param message: The message of this QuickAdjustment.
        :type: str
        """
        self._message = message

    @property
    def status(self):
        """
        Gets the status of this QuickAdjustment.


        :return: The status of this QuickAdjustment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this QuickAdjustment.


        :param status: The status of this QuickAdjustment.
        :type: str
        """
        self._status = status

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this QuickAdjustment.


        :return: The custom_fields of this QuickAdjustment.
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this QuickAdjustment.


        :param custom_fields: The custom_fields of this QuickAdjustment.
        :type: dict(str, object)
        """
        self._custom_fields = custom_fields

    @property
    def sku(self):
        """
        Gets the sku of this QuickAdjustment.


        :return: The sku of this QuickAdjustment.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this QuickAdjustment.


        :param sku: The sku of this QuickAdjustment.
        :type: str
        """
        self._sku = sku

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

