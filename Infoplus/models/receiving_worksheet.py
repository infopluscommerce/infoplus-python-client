# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ReceivingWorksheet(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ReceivingWorksheet - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'warehouse_id': 'int',
            'po_no_id': 'int',
            'lob_id': 'int',
            'vendor_id': 'int',
            'status': 'str',
            'service_level': 'str',
            'receiving_process_id': 'int',
            'created_by': 'int',
            'worksheet_name': 'str',
            'carrier': 'str',
            'on_the_dock': 'bool',
            'auto_commit': 'bool',
            'line_items': 'list[ReceivingWorksheetLineItem]',
            'notes': 'str',
            'work_batch_id': 'int',
            'create_date': 'datetime',
            'modify_date': 'datetime',
            'custom_fields': 'dict(str, object)'
        }

        self.attribute_map = {
            'id': 'id',
            'warehouse_id': 'warehouseId',
            'po_no_id': 'poNoId',
            'lob_id': 'lobId',
            'vendor_id': 'vendorId',
            'status': 'status',
            'service_level': 'serviceLevel',
            'receiving_process_id': 'receivingProcessId',
            'created_by': 'createdBy',
            'worksheet_name': 'worksheetName',
            'carrier': 'carrier',
            'on_the_dock': 'onTheDock',
            'auto_commit': 'autoCommit',
            'line_items': 'lineItems',
            'notes': 'notes',
            'work_batch_id': 'workBatchId',
            'create_date': 'createDate',
            'modify_date': 'modifyDate',
            'custom_fields': 'customFields'
        }

        self._id = None
        self._warehouse_id = None
        self._po_no_id = None
        self._lob_id = None
        self._vendor_id = None
        self._status = None
        self._service_level = None
        self._receiving_process_id = None
        self._created_by = None
        self._worksheet_name = None
        self._carrier = None
        self._on_the_dock = False
        self._auto_commit = False
        self._line_items = None
        self._notes = None
        self._work_batch_id = None
        self._create_date = None
        self._modify_date = None
        self._custom_fields = None

    @property
    def id(self):
        """
        Gets the id of this ReceivingWorksheet.


        :return: The id of this ReceivingWorksheet.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ReceivingWorksheet.


        :param id: The id of this ReceivingWorksheet.
        :type: int
        """
        self._id = id

    @property
    def warehouse_id(self):
        """
        Gets the warehouse_id of this ReceivingWorksheet.


        :return: The warehouse_id of this ReceivingWorksheet.
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """
        Sets the warehouse_id of this ReceivingWorksheet.


        :param warehouse_id: The warehouse_id of this ReceivingWorksheet.
        :type: int
        """
        self._warehouse_id = warehouse_id

    @property
    def po_no_id(self):
        """
        Gets the po_no_id of this ReceivingWorksheet.


        :return: The po_no_id of this ReceivingWorksheet.
        :rtype: int
        """
        return self._po_no_id

    @po_no_id.setter
    def po_no_id(self, po_no_id):
        """
        Sets the po_no_id of this ReceivingWorksheet.


        :param po_no_id: The po_no_id of this ReceivingWorksheet.
        :type: int
        """
        self._po_no_id = po_no_id

    @property
    def lob_id(self):
        """
        Gets the lob_id of this ReceivingWorksheet.


        :return: The lob_id of this ReceivingWorksheet.
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """
        Sets the lob_id of this ReceivingWorksheet.


        :param lob_id: The lob_id of this ReceivingWorksheet.
        :type: int
        """
        self._lob_id = lob_id

    @property
    def vendor_id(self):
        """
        Gets the vendor_id of this ReceivingWorksheet.


        :return: The vendor_id of this ReceivingWorksheet.
        :rtype: int
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """
        Sets the vendor_id of this ReceivingWorksheet.


        :param vendor_id: The vendor_id of this ReceivingWorksheet.
        :type: int
        """
        self._vendor_id = vendor_id

    @property
    def status(self):
        """
        Gets the status of this ReceivingWorksheet.


        :return: The status of this ReceivingWorksheet.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ReceivingWorksheet.


        :param status: The status of this ReceivingWorksheet.
        :type: str
        """
        self._status = status

    @property
    def service_level(self):
        """
        Gets the service_level of this ReceivingWorksheet.


        :return: The service_level of this ReceivingWorksheet.
        :rtype: str
        """
        return self._service_level

    @service_level.setter
    def service_level(self, service_level):
        """
        Sets the service_level of this ReceivingWorksheet.


        :param service_level: The service_level of this ReceivingWorksheet.
        :type: str
        """
        self._service_level = service_level

    @property
    def receiving_process_id(self):
        """
        Gets the receiving_process_id of this ReceivingWorksheet.


        :return: The receiving_process_id of this ReceivingWorksheet.
        :rtype: int
        """
        return self._receiving_process_id

    @receiving_process_id.setter
    def receiving_process_id(self, receiving_process_id):
        """
        Sets the receiving_process_id of this ReceivingWorksheet.


        :param receiving_process_id: The receiving_process_id of this ReceivingWorksheet.
        :type: int
        """
        self._receiving_process_id = receiving_process_id

    @property
    def created_by(self):
        """
        Gets the created_by of this ReceivingWorksheet.


        :return: The created_by of this ReceivingWorksheet.
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Sets the created_by of this ReceivingWorksheet.


        :param created_by: The created_by of this ReceivingWorksheet.
        :type: int
        """
        self._created_by = created_by

    @property
    def worksheet_name(self):
        """
        Gets the worksheet_name of this ReceivingWorksheet.


        :return: The worksheet_name of this ReceivingWorksheet.
        :rtype: str
        """
        return self._worksheet_name

    @worksheet_name.setter
    def worksheet_name(self, worksheet_name):
        """
        Sets the worksheet_name of this ReceivingWorksheet.


        :param worksheet_name: The worksheet_name of this ReceivingWorksheet.
        :type: str
        """
        self._worksheet_name = worksheet_name

    @property
    def carrier(self):
        """
        Gets the carrier of this ReceivingWorksheet.


        :return: The carrier of this ReceivingWorksheet.
        :rtype: str
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """
        Sets the carrier of this ReceivingWorksheet.


        :param carrier: The carrier of this ReceivingWorksheet.
        :type: str
        """
        self._carrier = carrier

    @property
    def on_the_dock(self):
        """
        Gets the on_the_dock of this ReceivingWorksheet.


        :return: The on_the_dock of this ReceivingWorksheet.
        :rtype: bool
        """
        return self._on_the_dock

    @on_the_dock.setter
    def on_the_dock(self, on_the_dock):
        """
        Sets the on_the_dock of this ReceivingWorksheet.


        :param on_the_dock: The on_the_dock of this ReceivingWorksheet.
        :type: bool
        """
        self._on_the_dock = on_the_dock

    @property
    def auto_commit(self):
        """
        Gets the auto_commit of this ReceivingWorksheet.


        :return: The auto_commit of this ReceivingWorksheet.
        :rtype: bool
        """
        return self._auto_commit

    @auto_commit.setter
    def auto_commit(self, auto_commit):
        """
        Sets the auto_commit of this ReceivingWorksheet.


        :param auto_commit: The auto_commit of this ReceivingWorksheet.
        :type: bool
        """
        self._auto_commit = auto_commit

    @property
    def line_items(self):
        """
        Gets the line_items of this ReceivingWorksheet.


        :return: The line_items of this ReceivingWorksheet.
        :rtype: list[ReceivingWorksheetLineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """
        Sets the line_items of this ReceivingWorksheet.


        :param line_items: The line_items of this ReceivingWorksheet.
        :type: list[ReceivingWorksheetLineItem]
        """
        self._line_items = line_items

    @property
    def notes(self):
        """
        Gets the notes of this ReceivingWorksheet.


        :return: The notes of this ReceivingWorksheet.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """
        Sets the notes of this ReceivingWorksheet.


        :param notes: The notes of this ReceivingWorksheet.
        :type: str
        """
        self._notes = notes

    @property
    def work_batch_id(self):
        """
        Gets the work_batch_id of this ReceivingWorksheet.


        :return: The work_batch_id of this ReceivingWorksheet.
        :rtype: int
        """
        return self._work_batch_id

    @work_batch_id.setter
    def work_batch_id(self, work_batch_id):
        """
        Sets the work_batch_id of this ReceivingWorksheet.


        :param work_batch_id: The work_batch_id of this ReceivingWorksheet.
        :type: int
        """
        self._work_batch_id = work_batch_id

    @property
    def create_date(self):
        """
        Gets the create_date of this ReceivingWorksheet.


        :return: The create_date of this ReceivingWorksheet.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """
        Sets the create_date of this ReceivingWorksheet.


        :param create_date: The create_date of this ReceivingWorksheet.
        :type: datetime
        """
        self._create_date = create_date

    @property
    def modify_date(self):
        """
        Gets the modify_date of this ReceivingWorksheet.


        :return: The modify_date of this ReceivingWorksheet.
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """
        Sets the modify_date of this ReceivingWorksheet.


        :param modify_date: The modify_date of this ReceivingWorksheet.
        :type: datetime
        """
        self._modify_date = modify_date

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this ReceivingWorksheet.


        :return: The custom_fields of this ReceivingWorksheet.
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this ReceivingWorksheet.


        :param custom_fields: The custom_fields of this ReceivingWorksheet.
        :type: dict(str, object)
        """
        self._custom_fields = custom_fields

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

