# coding: utf-8

"""
    Infoplus API

    Infoplus API.  # noqa: E501

    OpenAPI spec version: v3.0
    Contact: api@infopluscommerce.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Infoplus.models.work_product import WorkProduct  # noqa: F401,E501


class Work(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'source_warehouse_id': 'int',
        'source_building_id': 'int',
        'source_location': 'str',
        'destination_warehouse_id': 'int',
        'destination_building_id': 'int',
        'destination_location': 'str',
        'type': 'str',
        'create_date': 'datetime',
        'modify_date': 'datetime',
        'priority_code': 'int',
        'user_defined_message': 'str',
        'status': 'str',
        'user_id': 'int',
        'lob_id': 'int',
        'work_batch_id': 'int',
        'work_product_list': 'list[WorkProduct]',
        'fulfillment_process_id': 'int',
        'pick_line_id': 'int',
        'custom_fields': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'source_warehouse_id': 'sourceWarehouseId',
        'source_building_id': 'sourceBuildingId',
        'source_location': 'sourceLocation',
        'destination_warehouse_id': 'destinationWarehouseId',
        'destination_building_id': 'destinationBuildingId',
        'destination_location': 'destinationLocation',
        'type': 'type',
        'create_date': 'createDate',
        'modify_date': 'modifyDate',
        'priority_code': 'priorityCode',
        'user_defined_message': 'userDefinedMessage',
        'status': 'status',
        'user_id': 'userId',
        'lob_id': 'lobId',
        'work_batch_id': 'workBatchId',
        'work_product_list': 'workProductList',
        'fulfillment_process_id': 'fulfillmentProcessId',
        'pick_line_id': 'pickLineId',
        'custom_fields': 'customFields'
    }

    def __init__(self, id=None, source_warehouse_id=None, source_building_id=None, source_location=None, destination_warehouse_id=None, destination_building_id=None, destination_location=None, type=None, create_date=None, modify_date=None, priority_code=None, user_defined_message=None, status=None, user_id=None, lob_id=None, work_batch_id=None, work_product_list=None, fulfillment_process_id=None, pick_line_id=None, custom_fields=None):  # noqa: E501
        """Work - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._source_warehouse_id = None
        self._source_building_id = None
        self._source_location = None
        self._destination_warehouse_id = None
        self._destination_building_id = None
        self._destination_location = None
        self._type = None
        self._create_date = None
        self._modify_date = None
        self._priority_code = None
        self._user_defined_message = None
        self._status = None
        self._user_id = None
        self._lob_id = None
        self._work_batch_id = None
        self._work_product_list = None
        self._fulfillment_process_id = None
        self._pick_line_id = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.source_warehouse_id = source_warehouse_id
        self.source_building_id = source_building_id
        self.source_location = source_location
        self.destination_warehouse_id = destination_warehouse_id
        self.destination_building_id = destination_building_id
        self.destination_location = destination_location
        self.type = type
        if create_date is not None:
            self.create_date = create_date
        if modify_date is not None:
            self.modify_date = modify_date
        self.priority_code = priority_code
        if user_defined_message is not None:
            self.user_defined_message = user_defined_message
        self.status = status
        self.user_id = user_id
        if lob_id is not None:
            self.lob_id = lob_id
        if work_batch_id is not None:
            self.work_batch_id = work_batch_id
        if work_product_list is not None:
            self.work_product_list = work_product_list
        if fulfillment_process_id is not None:
            self.fulfillment_process_id = fulfillment_process_id
        if pick_line_id is not None:
            self.pick_line_id = pick_line_id
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this Work.  # noqa: E501


        :return: The id of this Work.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Work.


        :param id: The id of this Work.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def source_warehouse_id(self):
        """Gets the source_warehouse_id of this Work.  # noqa: E501


        :return: The source_warehouse_id of this Work.  # noqa: E501
        :rtype: int
        """
        return self._source_warehouse_id

    @source_warehouse_id.setter
    def source_warehouse_id(self, source_warehouse_id):
        """Sets the source_warehouse_id of this Work.


        :param source_warehouse_id: The source_warehouse_id of this Work.  # noqa: E501
        :type: int
        """
        if source_warehouse_id is None:
            raise ValueError("Invalid value for `source_warehouse_id`, must not be `None`")  # noqa: E501

        self._source_warehouse_id = source_warehouse_id

    @property
    def source_building_id(self):
        """Gets the source_building_id of this Work.  # noqa: E501


        :return: The source_building_id of this Work.  # noqa: E501
        :rtype: int
        """
        return self._source_building_id

    @source_building_id.setter
    def source_building_id(self, source_building_id):
        """Sets the source_building_id of this Work.


        :param source_building_id: The source_building_id of this Work.  # noqa: E501
        :type: int
        """
        if source_building_id is None:
            raise ValueError("Invalid value for `source_building_id`, must not be `None`")  # noqa: E501

        self._source_building_id = source_building_id

    @property
    def source_location(self):
        """Gets the source_location of this Work.  # noqa: E501


        :return: The source_location of this Work.  # noqa: E501
        :rtype: str
        """
        return self._source_location

    @source_location.setter
    def source_location(self, source_location):
        """Sets the source_location of this Work.


        :param source_location: The source_location of this Work.  # noqa: E501
        :type: str
        """
        if source_location is None:
            raise ValueError("Invalid value for `source_location`, must not be `None`")  # noqa: E501

        self._source_location = source_location

    @property
    def destination_warehouse_id(self):
        """Gets the destination_warehouse_id of this Work.  # noqa: E501


        :return: The destination_warehouse_id of this Work.  # noqa: E501
        :rtype: int
        """
        return self._destination_warehouse_id

    @destination_warehouse_id.setter
    def destination_warehouse_id(self, destination_warehouse_id):
        """Sets the destination_warehouse_id of this Work.


        :param destination_warehouse_id: The destination_warehouse_id of this Work.  # noqa: E501
        :type: int
        """
        if destination_warehouse_id is None:
            raise ValueError("Invalid value for `destination_warehouse_id`, must not be `None`")  # noqa: E501

        self._destination_warehouse_id = destination_warehouse_id

    @property
    def destination_building_id(self):
        """Gets the destination_building_id of this Work.  # noqa: E501


        :return: The destination_building_id of this Work.  # noqa: E501
        :rtype: int
        """
        return self._destination_building_id

    @destination_building_id.setter
    def destination_building_id(self, destination_building_id):
        """Sets the destination_building_id of this Work.


        :param destination_building_id: The destination_building_id of this Work.  # noqa: E501
        :type: int
        """
        if destination_building_id is None:
            raise ValueError("Invalid value for `destination_building_id`, must not be `None`")  # noqa: E501

        self._destination_building_id = destination_building_id

    @property
    def destination_location(self):
        """Gets the destination_location of this Work.  # noqa: E501


        :return: The destination_location of this Work.  # noqa: E501
        :rtype: str
        """
        return self._destination_location

    @destination_location.setter
    def destination_location(self, destination_location):
        """Sets the destination_location of this Work.


        :param destination_location: The destination_location of this Work.  # noqa: E501
        :type: str
        """
        if destination_location is None:
            raise ValueError("Invalid value for `destination_location`, must not be `None`")  # noqa: E501

        self._destination_location = destination_location

    @property
    def type(self):
        """Gets the type of this Work.  # noqa: E501


        :return: The type of this Work.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Work.


        :param type: The type of this Work.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def create_date(self):
        """Gets the create_date of this Work.  # noqa: E501


        :return: The create_date of this Work.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this Work.


        :param create_date: The create_date of this Work.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def modify_date(self):
        """Gets the modify_date of this Work.  # noqa: E501


        :return: The modify_date of this Work.  # noqa: E501
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """Sets the modify_date of this Work.


        :param modify_date: The modify_date of this Work.  # noqa: E501
        :type: datetime
        """

        self._modify_date = modify_date

    @property
    def priority_code(self):
        """Gets the priority_code of this Work.  # noqa: E501


        :return: The priority_code of this Work.  # noqa: E501
        :rtype: int
        """
        return self._priority_code

    @priority_code.setter
    def priority_code(self, priority_code):
        """Sets the priority_code of this Work.


        :param priority_code: The priority_code of this Work.  # noqa: E501
        :type: int
        """
        if priority_code is None:
            raise ValueError("Invalid value for `priority_code`, must not be `None`")  # noqa: E501

        self._priority_code = priority_code

    @property
    def user_defined_message(self):
        """Gets the user_defined_message of this Work.  # noqa: E501


        :return: The user_defined_message of this Work.  # noqa: E501
        :rtype: str
        """
        return self._user_defined_message

    @user_defined_message.setter
    def user_defined_message(self, user_defined_message):
        """Sets the user_defined_message of this Work.


        :param user_defined_message: The user_defined_message of this Work.  # noqa: E501
        :type: str
        """

        self._user_defined_message = user_defined_message

    @property
    def status(self):
        """Gets the status of this Work.  # noqa: E501


        :return: The status of this Work.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Work.


        :param status: The status of this Work.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def user_id(self):
        """Gets the user_id of this Work.  # noqa: E501


        :return: The user_id of this Work.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Work.


        :param user_id: The user_id of this Work.  # noqa: E501
        :type: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def lob_id(self):
        """Gets the lob_id of this Work.  # noqa: E501


        :return: The lob_id of this Work.  # noqa: E501
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """Sets the lob_id of this Work.


        :param lob_id: The lob_id of this Work.  # noqa: E501
        :type: int
        """

        self._lob_id = lob_id

    @property
    def work_batch_id(self):
        """Gets the work_batch_id of this Work.  # noqa: E501


        :return: The work_batch_id of this Work.  # noqa: E501
        :rtype: int
        """
        return self._work_batch_id

    @work_batch_id.setter
    def work_batch_id(self, work_batch_id):
        """Sets the work_batch_id of this Work.


        :param work_batch_id: The work_batch_id of this Work.  # noqa: E501
        :type: int
        """

        self._work_batch_id = work_batch_id

    @property
    def work_product_list(self):
        """Gets the work_product_list of this Work.  # noqa: E501


        :return: The work_product_list of this Work.  # noqa: E501
        :rtype: list[WorkProduct]
        """
        return self._work_product_list

    @work_product_list.setter
    def work_product_list(self, work_product_list):
        """Sets the work_product_list of this Work.


        :param work_product_list: The work_product_list of this Work.  # noqa: E501
        :type: list[WorkProduct]
        """

        self._work_product_list = work_product_list

    @property
    def fulfillment_process_id(self):
        """Gets the fulfillment_process_id of this Work.  # noqa: E501


        :return: The fulfillment_process_id of this Work.  # noqa: E501
        :rtype: int
        """
        return self._fulfillment_process_id

    @fulfillment_process_id.setter
    def fulfillment_process_id(self, fulfillment_process_id):
        """Sets the fulfillment_process_id of this Work.


        :param fulfillment_process_id: The fulfillment_process_id of this Work.  # noqa: E501
        :type: int
        """

        self._fulfillment_process_id = fulfillment_process_id

    @property
    def pick_line_id(self):
        """Gets the pick_line_id of this Work.  # noqa: E501


        :return: The pick_line_id of this Work.  # noqa: E501
        :rtype: int
        """
        return self._pick_line_id

    @pick_line_id.setter
    def pick_line_id(self, pick_line_id):
        """Sets the pick_line_id of this Work.


        :param pick_line_id: The pick_line_id of this Work.  # noqa: E501
        :type: int
        """

        self._pick_line_id = pick_line_id

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Work.  # noqa: E501


        :return: The custom_fields of this Work.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Work.


        :param custom_fields: The custom_fields of this Work.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Work):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
