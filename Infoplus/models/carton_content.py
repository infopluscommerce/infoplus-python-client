# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class CartonContent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CartonContent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'group_order_id': 'float',
            'order_no': 'float',
            'carton_no_id': 'int',
            'line_item_id': 'int',
            'location': 'str',
            'quantity': 'int',
            'quantity_scanned': 'int',
            'completed': 'datetime',
            'tote_id': 'str',
            'picker_id': 'str',
            'status': 'str',
            'custom_fields': 'dict(str, object)'
        }

        self.attribute_map = {
            'id': 'id',
            'group_order_id': 'groupOrderId',
            'order_no': 'orderNo',
            'carton_no_id': 'cartonNoId',
            'line_item_id': 'lineItemId',
            'location': 'location',
            'quantity': 'quantity',
            'quantity_scanned': 'quantityScanned',
            'completed': 'completed',
            'tote_id': 'toteId',
            'picker_id': 'pickerId',
            'status': 'status',
            'custom_fields': 'customFields'
        }

        self._id = None
        self._group_order_id = None
        self._order_no = None
        self._carton_no_id = None
        self._line_item_id = None
        self._location = None
        self._quantity = None
        self._quantity_scanned = None
        self._completed = None
        self._tote_id = None
        self._picker_id = None
        self._status = None
        self._custom_fields = None

    @property
    def id(self):
        """
        Gets the id of this CartonContent.


        :return: The id of this CartonContent.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CartonContent.


        :param id: The id of this CartonContent.
        :type: int
        """
        self._id = id

    @property
    def group_order_id(self):
        """
        Gets the group_order_id of this CartonContent.


        :return: The group_order_id of this CartonContent.
        :rtype: float
        """
        return self._group_order_id

    @group_order_id.setter
    def group_order_id(self, group_order_id):
        """
        Sets the group_order_id of this CartonContent.


        :param group_order_id: The group_order_id of this CartonContent.
        :type: float
        """
        self._group_order_id = group_order_id

    @property
    def order_no(self):
        """
        Gets the order_no of this CartonContent.


        :return: The order_no of this CartonContent.
        :rtype: float
        """
        return self._order_no

    @order_no.setter
    def order_no(self, order_no):
        """
        Sets the order_no of this CartonContent.


        :param order_no: The order_no of this CartonContent.
        :type: float
        """
        self._order_no = order_no

    @property
    def carton_no_id(self):
        """
        Gets the carton_no_id of this CartonContent.


        :return: The carton_no_id of this CartonContent.
        :rtype: int
        """
        return self._carton_no_id

    @carton_no_id.setter
    def carton_no_id(self, carton_no_id):
        """
        Sets the carton_no_id of this CartonContent.


        :param carton_no_id: The carton_no_id of this CartonContent.
        :type: int
        """
        self._carton_no_id = carton_no_id

    @property
    def line_item_id(self):
        """
        Gets the line_item_id of this CartonContent.


        :return: The line_item_id of this CartonContent.
        :rtype: int
        """
        return self._line_item_id

    @line_item_id.setter
    def line_item_id(self, line_item_id):
        """
        Sets the line_item_id of this CartonContent.


        :param line_item_id: The line_item_id of this CartonContent.
        :type: int
        """
        self._line_item_id = line_item_id

    @property
    def location(self):
        """
        Gets the location of this CartonContent.


        :return: The location of this CartonContent.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this CartonContent.


        :param location: The location of this CartonContent.
        :type: str
        """
        self._location = location

    @property
    def quantity(self):
        """
        Gets the quantity of this CartonContent.


        :return: The quantity of this CartonContent.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this CartonContent.


        :param quantity: The quantity of this CartonContent.
        :type: int
        """
        self._quantity = quantity

    @property
    def quantity_scanned(self):
        """
        Gets the quantity_scanned of this CartonContent.


        :return: The quantity_scanned of this CartonContent.
        :rtype: int
        """
        return self._quantity_scanned

    @quantity_scanned.setter
    def quantity_scanned(self, quantity_scanned):
        """
        Sets the quantity_scanned of this CartonContent.


        :param quantity_scanned: The quantity_scanned of this CartonContent.
        :type: int
        """
        self._quantity_scanned = quantity_scanned

    @property
    def completed(self):
        """
        Gets the completed of this CartonContent.


        :return: The completed of this CartonContent.
        :rtype: datetime
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """
        Sets the completed of this CartonContent.


        :param completed: The completed of this CartonContent.
        :type: datetime
        """
        self._completed = completed

    @property
    def tote_id(self):
        """
        Gets the tote_id of this CartonContent.


        :return: The tote_id of this CartonContent.
        :rtype: str
        """
        return self._tote_id

    @tote_id.setter
    def tote_id(self, tote_id):
        """
        Sets the tote_id of this CartonContent.


        :param tote_id: The tote_id of this CartonContent.
        :type: str
        """
        self._tote_id = tote_id

    @property
    def picker_id(self):
        """
        Gets the picker_id of this CartonContent.


        :return: The picker_id of this CartonContent.
        :rtype: str
        """
        return self._picker_id

    @picker_id.setter
    def picker_id(self, picker_id):
        """
        Sets the picker_id of this CartonContent.


        :param picker_id: The picker_id of this CartonContent.
        :type: str
        """
        self._picker_id = picker_id

    @property
    def status(self):
        """
        Gets the status of this CartonContent.


        :return: The status of this CartonContent.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this CartonContent.


        :param status: The status of this CartonContent.
        :type: str
        """
        self._status = status

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this CartonContent.


        :return: The custom_fields of this CartonContent.
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this CartonContent.


        :param custom_fields: The custom_fields of this CartonContent.
        :type: dict(str, object)
        """
        self._custom_fields = custom_fields

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

