# coding: utf-8

"""
    Infoplus API

    Infoplus API.  # noqa: E501

    OpenAPI spec version: v3.0
    Contact: api@infopluscommerce.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'create_date': 'datetime',
        'modify_date': 'datetime',
        'name': 'str',
        'label': 'str',
        'enabled': 'bool',
        'field_type': 'str',
        'searchable': 'bool',
        'tooltip': 'str',
        'tab_label': 'str',
        'record_type': 'str',
        'custom_fields': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'create_date': 'createDate',
        'modify_date': 'modifyDate',
        'name': 'name',
        'label': 'label',
        'enabled': 'enabled',
        'field_type': 'fieldType',
        'searchable': 'searchable',
        'tooltip': 'tooltip',
        'tab_label': 'tabLabel',
        'record_type': 'recordType',
        'custom_fields': 'customFields'
    }

    def __init__(self, id=None, create_date=None, modify_date=None, name=None, label=None, enabled=False, field_type=None, searchable=False, tooltip=None, tab_label=None, record_type=None, custom_fields=None):  # noqa: E501
        """CustomField - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._create_date = None
        self._modify_date = None
        self._name = None
        self._label = None
        self._enabled = None
        self._field_type = None
        self._searchable = None
        self._tooltip = None
        self._tab_label = None
        self._record_type = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if create_date is not None:
            self.create_date = create_date
        if modify_date is not None:
            self.modify_date = modify_date
        self.name = name
        self.label = label
        self.enabled = enabled
        self.field_type = field_type
        self.searchable = searchable
        if tooltip is not None:
            self.tooltip = tooltip
        self.tab_label = tab_label
        self.record_type = record_type
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this CustomField.  # noqa: E501


        :return: The id of this CustomField.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomField.


        :param id: The id of this CustomField.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def create_date(self):
        """Gets the create_date of this CustomField.  # noqa: E501


        :return: The create_date of this CustomField.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this CustomField.


        :param create_date: The create_date of this CustomField.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def modify_date(self):
        """Gets the modify_date of this CustomField.  # noqa: E501


        :return: The modify_date of this CustomField.  # noqa: E501
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """Sets the modify_date of this CustomField.


        :param modify_date: The modify_date of this CustomField.  # noqa: E501
        :type: datetime
        """

        self._modify_date = modify_date

    @property
    def name(self):
        """Gets the name of this CustomField.  # noqa: E501


        :return: The name of this CustomField.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomField.


        :param name: The name of this CustomField.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def label(self):
        """Gets the label of this CustomField.  # noqa: E501


        :return: The label of this CustomField.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CustomField.


        :param label: The label of this CustomField.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def enabled(self):
        """Gets the enabled of this CustomField.  # noqa: E501


        :return: The enabled of this CustomField.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CustomField.


        :param enabled: The enabled of this CustomField.  # noqa: E501
        :type: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def field_type(self):
        """Gets the field_type of this CustomField.  # noqa: E501


        :return: The field_type of this CustomField.  # noqa: E501
        :rtype: str
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this CustomField.


        :param field_type: The field_type of this CustomField.  # noqa: E501
        :type: str
        """
        if field_type is None:
            raise ValueError("Invalid value for `field_type`, must not be `None`")  # noqa: E501

        self._field_type = field_type

    @property
    def searchable(self):
        """Gets the searchable of this CustomField.  # noqa: E501


        :return: The searchable of this CustomField.  # noqa: E501
        :rtype: bool
        """
        return self._searchable

    @searchable.setter
    def searchable(self, searchable):
        """Sets the searchable of this CustomField.


        :param searchable: The searchable of this CustomField.  # noqa: E501
        :type: bool
        """
        if searchable is None:
            raise ValueError("Invalid value for `searchable`, must not be `None`")  # noqa: E501

        self._searchable = searchable

    @property
    def tooltip(self):
        """Gets the tooltip of this CustomField.  # noqa: E501


        :return: The tooltip of this CustomField.  # noqa: E501
        :rtype: str
        """
        return self._tooltip

    @tooltip.setter
    def tooltip(self, tooltip):
        """Sets the tooltip of this CustomField.


        :param tooltip: The tooltip of this CustomField.  # noqa: E501
        :type: str
        """

        self._tooltip = tooltip

    @property
    def tab_label(self):
        """Gets the tab_label of this CustomField.  # noqa: E501


        :return: The tab_label of this CustomField.  # noqa: E501
        :rtype: str
        """
        return self._tab_label

    @tab_label.setter
    def tab_label(self, tab_label):
        """Sets the tab_label of this CustomField.


        :param tab_label: The tab_label of this CustomField.  # noqa: E501
        :type: str
        """
        if tab_label is None:
            raise ValueError("Invalid value for `tab_label`, must not be `None`")  # noqa: E501

        self._tab_label = tab_label

    @property
    def record_type(self):
        """Gets the record_type of this CustomField.  # noqa: E501


        :return: The record_type of this CustomField.  # noqa: E501
        :rtype: str
        """
        return self._record_type

    @record_type.setter
    def record_type(self, record_type):
        """Sets the record_type of this CustomField.


        :param record_type: The record_type of this CustomField.  # noqa: E501
        :type: str
        """
        if record_type is None:
            raise ValueError("Invalid value for `record_type`, must not be `None`")  # noqa: E501

        self._record_type = record_type

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CustomField.  # noqa: E501


        :return: The custom_fields of this CustomField.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CustomField.


        :param custom_fields: The custom_fields of this CustomField.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
