# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ManageScheduledPlans(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ManageScheduledPlans - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'create_date': 'datetime',
            'modify_date': 'datetime',
            'description': 'str',
            'scheduledplantypeid': 'int',
            'planid': 'int',
            'active': 'bool',
            'user': 'int',
            'deleted': 'bool',
            'warehouse_id': 'int',
            'custom_fields': 'dict(str, object)'
        }

        self.attribute_map = {
            'id': 'id',
            'create_date': 'createDate',
            'modify_date': 'modifyDate',
            'description': 'description',
            'scheduledplantypeid': 'scheduledplantypeid',
            'planid': 'planid',
            'active': 'active',
            'user': 'user',
            'deleted': 'deleted',
            'warehouse_id': 'warehouseId',
            'custom_fields': 'customFields'
        }

        self._id = None
        self._create_date = None
        self._modify_date = None
        self._description = None
        self._scheduledplantypeid = None
        self._planid = None
        self._active = False
        self._user = None
        self._deleted = False
        self._warehouse_id = None
        self._custom_fields = None

    @property
    def id(self):
        """
        Gets the id of this ManageScheduledPlans.


        :return: The id of this ManageScheduledPlans.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ManageScheduledPlans.


        :param id: The id of this ManageScheduledPlans.
        :type: int
        """
        self._id = id

    @property
    def create_date(self):
        """
        Gets the create_date of this ManageScheduledPlans.


        :return: The create_date of this ManageScheduledPlans.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """
        Sets the create_date of this ManageScheduledPlans.


        :param create_date: The create_date of this ManageScheduledPlans.
        :type: datetime
        """
        self._create_date = create_date

    @property
    def modify_date(self):
        """
        Gets the modify_date of this ManageScheduledPlans.


        :return: The modify_date of this ManageScheduledPlans.
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """
        Sets the modify_date of this ManageScheduledPlans.


        :param modify_date: The modify_date of this ManageScheduledPlans.
        :type: datetime
        """
        self._modify_date = modify_date

    @property
    def description(self):
        """
        Gets the description of this ManageScheduledPlans.


        :return: The description of this ManageScheduledPlans.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ManageScheduledPlans.


        :param description: The description of this ManageScheduledPlans.
        :type: str
        """
        self._description = description

    @property
    def scheduledplantypeid(self):
        """
        Gets the scheduledplantypeid of this ManageScheduledPlans.


        :return: The scheduledplantypeid of this ManageScheduledPlans.
        :rtype: int
        """
        return self._scheduledplantypeid

    @scheduledplantypeid.setter
    def scheduledplantypeid(self, scheduledplantypeid):
        """
        Sets the scheduledplantypeid of this ManageScheduledPlans.


        :param scheduledplantypeid: The scheduledplantypeid of this ManageScheduledPlans.
        :type: int
        """
        self._scheduledplantypeid = scheduledplantypeid

    @property
    def planid(self):
        """
        Gets the planid of this ManageScheduledPlans.


        :return: The planid of this ManageScheduledPlans.
        :rtype: int
        """
        return self._planid

    @planid.setter
    def planid(self, planid):
        """
        Sets the planid of this ManageScheduledPlans.


        :param planid: The planid of this ManageScheduledPlans.
        :type: int
        """
        self._planid = planid

    @property
    def active(self):
        """
        Gets the active of this ManageScheduledPlans.


        :return: The active of this ManageScheduledPlans.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this ManageScheduledPlans.


        :param active: The active of this ManageScheduledPlans.
        :type: bool
        """
        self._active = active

    @property
    def user(self):
        """
        Gets the user of this ManageScheduledPlans.


        :return: The user of this ManageScheduledPlans.
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this ManageScheduledPlans.


        :param user: The user of this ManageScheduledPlans.
        :type: int
        """
        self._user = user

    @property
    def deleted(self):
        """
        Gets the deleted of this ManageScheduledPlans.


        :return: The deleted of this ManageScheduledPlans.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this ManageScheduledPlans.


        :param deleted: The deleted of this ManageScheduledPlans.
        :type: bool
        """
        self._deleted = deleted

    @property
    def warehouse_id(self):
        """
        Gets the warehouse_id of this ManageScheduledPlans.


        :return: The warehouse_id of this ManageScheduledPlans.
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """
        Sets the warehouse_id of this ManageScheduledPlans.


        :param warehouse_id: The warehouse_id of this ManageScheduledPlans.
        :type: int
        """
        self._warehouse_id = warehouse_id

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this ManageScheduledPlans.


        :return: The custom_fields of this ManageScheduledPlans.
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this ManageScheduledPlans.


        :param custom_fields: The custom_fields of this ManageScheduledPlans.
        :type: dict(str, object)
        """
        self._custom_fields = custom_fields

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

