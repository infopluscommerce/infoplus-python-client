# coding: utf-8

"""
FulfillmentPlanApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class FulfillmentPlanApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_fulfillment_plan(self, body, **kwargs):
        """
        Create a fulfillmentPlan
        Inserts a new fulfillmentPlan using the specified data.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_fulfillment_plan(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param FulfillmentPlan body: FulfillmentPlan to be inserted. (required)
        :return: FulfillmentPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_fulfillment_plan" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_fulfillment_plan`")

        resource_path = '/beta/fulfillmentPlan'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FulfillmentPlan',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def add_fulfillment_plan_audit(self, fulfillment_plan_id, fulfillment_plan_audit, **kwargs):
        """
        Add new audit for a fulfillmentPlan
        Adds an audit to an existing fulfillmentPlan.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_fulfillment_plan_audit(fulfillment_plan_id, fulfillment_plan_audit, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fulfillment_plan_id: Id of the fulfillmentPlan to add an audit to (required)
        :param str fulfillment_plan_audit: The audit to add (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fulfillment_plan_id', 'fulfillment_plan_audit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_fulfillment_plan_audit" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'fulfillment_plan_id' is set
        if ('fulfillment_plan_id' not in params) or (params['fulfillment_plan_id'] is None):
            raise ValueError("Missing the required parameter `fulfillment_plan_id` when calling `add_fulfillment_plan_audit`")
        # verify the required parameter 'fulfillment_plan_audit' is set
        if ('fulfillment_plan_audit' not in params) or (params['fulfillment_plan_audit'] is None):
            raise ValueError("Missing the required parameter `fulfillment_plan_audit` when calling `add_fulfillment_plan_audit`")

        resource_path = '/beta/fulfillmentPlan/{fulfillmentPlanId}/audit/{fulfillmentPlanAudit}'.replace('{format}', 'json')
        path_params = {}
        if 'fulfillment_plan_id' in params:
            path_params['fulfillmentPlanId'] = params['fulfillment_plan_id']
        if 'fulfillment_plan_audit' in params:
            path_params['fulfillmentPlanAudit'] = params['fulfillment_plan_audit']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def add_fulfillment_plan_tag(self, fulfillment_plan_id, fulfillment_plan_tag, **kwargs):
        """
        Add new tags for a fulfillmentPlan.
        Adds a tag to an existing fulfillmentPlan.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_fulfillment_plan_tag(fulfillment_plan_id, fulfillment_plan_tag, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fulfillment_plan_id: Id of the fulfillmentPlan to add a tag to (required)
        :param str fulfillment_plan_tag: The tag to add (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fulfillment_plan_id', 'fulfillment_plan_tag']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_fulfillment_plan_tag" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'fulfillment_plan_id' is set
        if ('fulfillment_plan_id' not in params) or (params['fulfillment_plan_id'] is None):
            raise ValueError("Missing the required parameter `fulfillment_plan_id` when calling `add_fulfillment_plan_tag`")
        # verify the required parameter 'fulfillment_plan_tag' is set
        if ('fulfillment_plan_tag' not in params) or (params['fulfillment_plan_tag'] is None):
            raise ValueError("Missing the required parameter `fulfillment_plan_tag` when calling `add_fulfillment_plan_tag`")

        resource_path = '/beta/fulfillmentPlan/{fulfillmentPlanId}/tag/{fulfillmentPlanTag}'.replace('{format}', 'json')
        path_params = {}
        if 'fulfillment_plan_id' in params:
            path_params['fulfillmentPlanId'] = params['fulfillment_plan_id']
        if 'fulfillment_plan_tag' in params:
            path_params['fulfillmentPlanTag'] = params['fulfillment_plan_tag']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_fulfillment_plan(self, fulfillment_plan_id, **kwargs):
        """
        Delete a fulfillmentPlan
        Deletes the fulfillmentPlan identified by the specified id.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_fulfillment_plan(fulfillment_plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fulfillment_plan_id: Id of the fulfillmentPlan to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fulfillment_plan_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_fulfillment_plan" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'fulfillment_plan_id' is set
        if ('fulfillment_plan_id' not in params) or (params['fulfillment_plan_id'] is None):
            raise ValueError("Missing the required parameter `fulfillment_plan_id` when calling `delete_fulfillment_plan`")

        resource_path = '/beta/fulfillmentPlan/{fulfillmentPlanId}'.replace('{format}', 'json')
        path_params = {}
        if 'fulfillment_plan_id' in params:
            path_params['fulfillmentPlanId'] = params['fulfillment_plan_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_fulfillment_plan_tag(self, fulfillment_plan_id, fulfillment_plan_tag, **kwargs):
        """
        Delete a tag for a fulfillmentPlan.
        Deletes an existing fulfillmentPlan tag using the specified data.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_fulfillment_plan_tag(fulfillment_plan_id, fulfillment_plan_tag, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fulfillment_plan_id: Id of the fulfillmentPlan to remove tag from (required)
        :param str fulfillment_plan_tag: The tag to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fulfillment_plan_id', 'fulfillment_plan_tag']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_fulfillment_plan_tag" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'fulfillment_plan_id' is set
        if ('fulfillment_plan_id' not in params) or (params['fulfillment_plan_id'] is None):
            raise ValueError("Missing the required parameter `fulfillment_plan_id` when calling `delete_fulfillment_plan_tag`")
        # verify the required parameter 'fulfillment_plan_tag' is set
        if ('fulfillment_plan_tag' not in params) or (params['fulfillment_plan_tag'] is None):
            raise ValueError("Missing the required parameter `fulfillment_plan_tag` when calling `delete_fulfillment_plan_tag`")

        resource_path = '/beta/fulfillmentPlan/{fulfillmentPlanId}/tag/{fulfillmentPlanTag}'.replace('{format}', 'json')
        path_params = {}
        if 'fulfillment_plan_id' in params:
            path_params['fulfillmentPlanId'] = params['fulfillment_plan_id']
        if 'fulfillment_plan_tag' in params:
            path_params['fulfillmentPlanTag'] = params['fulfillment_plan_tag']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_duplicate_fulfillment_plan_by_id(self, fulfillment_plan_id, **kwargs):
        """
        Get a duplicated a fulfillmentPlan by id
        Returns a duplicated fulfillmentPlan identified by the specified id.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_duplicate_fulfillment_plan_by_id(fulfillment_plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fulfillment_plan_id: Id of the fulfillmentPlan to be duplicated. (required)
        :return: FulfillmentPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fulfillment_plan_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_duplicate_fulfillment_plan_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'fulfillment_plan_id' is set
        if ('fulfillment_plan_id' not in params) or (params['fulfillment_plan_id'] is None):
            raise ValueError("Missing the required parameter `fulfillment_plan_id` when calling `get_duplicate_fulfillment_plan_by_id`")

        resource_path = '/beta/fulfillmentPlan/duplicate/{fulfillmentPlanId}'.replace('{format}', 'json')
        path_params = {}
        if 'fulfillment_plan_id' in params:
            path_params['fulfillmentPlanId'] = params['fulfillment_plan_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FulfillmentPlan',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_fulfillment_plan_by_filter(self, **kwargs):
        """
        Search fulfillmentPlans by filter
        Returns the list of fulfillmentPlans that match the given filter.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fulfillment_plan_by_filter(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str filter: Query string, used to filter results.
        :param int page: Result page number.  Defaults to 1.
        :param int limit: Maximum results per page.  Defaults to 20.  Max allowed value is 250.
        :param str sort: Sort results by specified field.
        :return: list[FulfillmentPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter', 'page', 'limit', 'sort']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fulfillment_plan_by_filter" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/beta/fulfillmentPlan/search'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'sort' in params:
            query_params['sort'] = params['sort']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[FulfillmentPlan]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_fulfillment_plan_by_id(self, fulfillment_plan_id, **kwargs):
        """
        Get a fulfillmentPlan by id
        Returns the fulfillmentPlan identified by the specified id.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fulfillment_plan_by_id(fulfillment_plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fulfillment_plan_id: Id of the fulfillmentPlan to be returned. (required)
        :return: FulfillmentPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fulfillment_plan_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fulfillment_plan_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'fulfillment_plan_id' is set
        if ('fulfillment_plan_id' not in params) or (params['fulfillment_plan_id'] is None):
            raise ValueError("Missing the required parameter `fulfillment_plan_id` when calling `get_fulfillment_plan_by_id`")

        resource_path = '/beta/fulfillmentPlan/{fulfillmentPlanId}'.replace('{format}', 'json')
        path_params = {}
        if 'fulfillment_plan_id' in params:
            path_params['fulfillmentPlanId'] = params['fulfillment_plan_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FulfillmentPlan',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_fulfillment_plan_tags(self, fulfillment_plan_id, **kwargs):
        """
        Get the tags for a fulfillmentPlan.
        Get all existing fulfillmentPlan tags.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fulfillment_plan_tags(fulfillment_plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fulfillment_plan_id: Id of the fulfillmentPlan to get tags for (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fulfillment_plan_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fulfillment_plan_tags" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'fulfillment_plan_id' is set
        if ('fulfillment_plan_id' not in params) or (params['fulfillment_plan_id'] is None):
            raise ValueError("Missing the required parameter `fulfillment_plan_id` when calling `get_fulfillment_plan_tags`")

        resource_path = '/beta/fulfillmentPlan/{fulfillmentPlanId}/tag'.replace('{format}', 'json')
        path_params = {}
        if 'fulfillment_plan_id' in params:
            path_params['fulfillmentPlanId'] = params['fulfillment_plan_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_fulfillment_plan(self, body, **kwargs):
        """
        Update a fulfillmentPlan
        Updates an existing fulfillmentPlan using the specified data.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_fulfillment_plan(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param FulfillmentPlan body: FulfillmentPlan to be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_fulfillment_plan" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_fulfillment_plan`")

        resource_path = '/beta/fulfillmentPlan'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_fulfillment_plan_custom_fields(self, body, **kwargs):
        """
        Update a fulfillmentPlan custom fields
        Updates an existing fulfillmentPlan custom fields using the specified data.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_fulfillment_plan_custom_fields(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param FulfillmentPlan body: FulfillmentPlan to be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_fulfillment_plan_custom_fields" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_fulfillment_plan_custom_fields`")

        resource_path = '/beta/fulfillmentPlan/customFields'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
